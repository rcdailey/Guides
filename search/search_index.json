{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TRaSH-Guides \u00b6 TRaSH Guides, Guides that aren't trash. Here you will find Guides mainly for Sonarr/Radarr/Bazarr and everything related to it. How this all started \u00b6 When starting to use Sonarr/Radarr I noticed it didn't get exactly the release I actually wanted being I'm a bit picky about what release & quality I prefer. So I decided to fine tune it to try to get the releases & quality I preferred, On discord I also noticed that others run in to the same issue so I explained them how I managed to get it solved. Being I had to explain it often I decided to write it down and make it public so I could easily link it to someone when they needed it. After a while I also decided to create guides for often asked questions on discord, and started to collect all kind of information gathered from different sources. The guides I make I try to make them as easy as possible for everyone to understand, in my opinion pictures explain often more then just some text. Support \u00b6 If you have questions, suggestions, requests or want to contribute, Click the chat badge to join the Discord Channel where you can ask your questions directly or use the following link to open a issue on GitHub. Feel free to create a PR if you want to. DISCLAIMER \u00b6 The information I use for the guides is information I gathered from different sources like their support forum, Reddit or Discord, Provided by user input or from the develop team it self. Most things I tested myself and tried to see if I could tune them a bit more to my needs and sometimes even for others. Everything here you use on your own risk I won't be hold responsible if something happens to your collection! Special Thanks \u00b6 iXNyNe aka nemchik for introducing me in the world of dockers with DockSTARTer, and helping me to learn the basics for it. Roxedus for helping me with the transfer/convert of my github guides to mkdocs and make everything look great. rg9400 for the providing most of the Radarr v3 Custom Format Collection. Everyone who contributed to this project in anyway possible.","title":"Home"},{"location":"#trash-guides","text":"TRaSH Guides, Guides that aren't trash. Here you will find Guides mainly for Sonarr/Radarr/Bazarr and everything related to it.","title":"TRaSH-Guides"},{"location":"#how-this-all-started","text":"When starting to use Sonarr/Radarr I noticed it didn't get exactly the release I actually wanted being I'm a bit picky about what release & quality I prefer. So I decided to fine tune it to try to get the releases & quality I preferred, On discord I also noticed that others run in to the same issue so I explained them how I managed to get it solved. Being I had to explain it often I decided to write it down and make it public so I could easily link it to someone when they needed it. After a while I also decided to create guides for often asked questions on discord, and started to collect all kind of information gathered from different sources. The guides I make I try to make them as easy as possible for everyone to understand, in my opinion pictures explain often more then just some text.","title":"How this all started"},{"location":"#support","text":"If you have questions, suggestions, requests or want to contribute, Click the chat badge to join the Discord Channel where you can ask your questions directly or use the following link to open a issue on GitHub. Feel free to create a PR if you want to.","title":"Support"},{"location":"#disclaimer","text":"The information I use for the guides is information I gathered from different sources like their support forum, Reddit or Discord, Provided by user input or from the develop team it self. Most things I tested myself and tried to see if I could tune them a bit more to my needs and sometimes even for others. Everything here you use on your own risk I won't be hold responsible if something happens to your collection!","title":"DISCLAIMER"},{"location":"#special-thanks","text":"iXNyNe aka nemchik for introducing me in the world of dockers with DockSTARTer, and helping me to learn the basics for it. Roxedus for helping me with the transfer/convert of my github guides to mkdocs and make everything look great. rg9400 for the providing most of the Radarr v3 Custom Format Collection. Everyone who contributed to this project in anyway possible.","title":"Special Thanks"},{"location":"thnx/","text":"Thnx for the Coffee \u00b6","title":"Thnx for the Coffee"},{"location":"thnx/#thnx-for-the-coffee","text":"","title":"Thnx for the Coffee"},{"location":"Bazarr/","text":"Bazarr \u00b6 Here you will find several scripts you can use with Bazarr Stable Bazarr Branch: master \u00b6 (stable) Builds Pushed after a testing period in development Github Branch: master Docker: hotio/bazarr:latest hotio/bazarr:latest Dev = Bazarr Branch: development \u00b6 (development) Builds pushed when complete Github Branch: development Docker: hotio/bazarr:nightly hotio/bazarr:nightly","title":"Bazarr"},{"location":"Bazarr/#bazarr","text":"Here you will find several scripts you can use with Bazarr","title":"Bazarr"},{"location":"Bazarr/#stable-bazarr-branch-master","text":"(stable) Builds Pushed after a testing period in development Github Branch: master Docker: hotio/bazarr:latest hotio/bazarr:latest","title":"Stable Bazarr Branch: master"},{"location":"Bazarr/#dev-bazarr-branch-development","text":"(development) Builds pushed when complete Github Branch: development Docker: hotio/bazarr:nightly hotio/bazarr:nightly","title":"Dev = Bazarr Branch: development"},{"location":"Bazarr/scripts/","text":"Scripts you can use with Bazarr \u00b6 2to3-language-code \u00b6 Changes the 2 iso code to 3 iso code. Script #!/bin/bash mv \"{{subtitles}}\" \"{{directory}}/{{episode_name}}.{{subtitles_language_code3}}.srt\" exit","title":"Scripts you can use with Bazarr"},{"location":"Bazarr/scripts/#scripts-you-can-use-with-bazarr","text":"","title":"Scripts you can use with Bazarr"},{"location":"Bazarr/scripts/#2to3-language-code","text":"Changes the 2 iso code to 3 iso code. Script #!/bin/bash mv \"{{subtitles}}\" \"{{directory}}/{{episode_name}}.{{subtitles_language_code3}}.srt\" exit","title":"2to3-language-code"},{"location":"Bazarr/scripts/2to3-language-code/","text":"2to3-language-code \u00b6 Title: 2to3-language-code.sh | Author(s): ??? Description: Changes the 2 iso code to 3 iso code \u00b6 Changes the 2 iso language code to 3 iso language code.","title":"2to3-language-code"},{"location":"Bazarr/scripts/2to3-language-code/#2to3-language-code","text":"Title: 2to3-language-code.sh | Author(s): ???","title":"2to3-language-code"},{"location":"Bazarr/scripts/2to3-language-code/#description-changes-the-2-iso-code-to-3-iso-code","text":"Changes the 2 iso language code to 3 iso language code.","title":"Description: Changes the 2 iso code to 3 iso code"},{"location":"Misc/","text":"Misc \u00b6 Here you will find a collection of random guides I made.","title":"Misc"},{"location":"Misc/#misc","text":"Here you will find a collection of random guides I made.","title":"Misc"},{"location":"Misc/Discord-Notifier-Basic-Setup/","text":"Discord Notifiarr Basic Setup \u00b6 Formerly aka Discord Notifier Login \u00b6 First we're going to visit the Notifiarr site, if you don't have an account yet, click the link to signup. Your Email address you used during signup. Your Password you created during signup. Login to the site and setup. Password reset if you forgot your password. Signup if you don't have an account. Link to Notifiarr Discord support channel. Profile \u00b6 After you have logged in, you will be redirected to your profile screen. Select your Country . Select your Timezone . Click on Generate API Key (This needs to be done). Select your Notification Language . Change your Time Format to your liking. Don't forget to Save your Changes. Integration Setup \u00b6 Enable the integrations you want to use Setup your discord server (required), invite the bot (required) and reactions (optional). Integration Settings \u00b6 First, click on Manage Integrations so you can enable what you want to receive notifications for. A screen will popup and here you're able to select from which application/service you receive a notification. When you enabled the ones you want click on Save Setup which notifications you want to to receive from each option. Cog wheel, this opens the integration settings External link, this opens the website for the integration WIKI link, this opens any extra wiki information available for the integration Trigger, this enables/disables a specific trigger for the integration Channels, this sets the channel in your server to post to for the integration Integration Settings (Cog wheel) Notification Settings Configuration \u00b6 Instructions how to setup the integration Enable/Disable notification trigger Change color bar for notification trigger Expand trigger to enable/disable message fields Customize the layout for the notification (drag/drop editor to the right in the image) Enable so each notification is unique and wont update existing ones. Here you can edit the layout Discord Settings \u00b6 Setup your discord server, shared channels, reactions and invite the bot into your server. Create the channels \u00b6 First thing to do is create a few channels (in your discord server) where you receive your notifications. Note I won't be explaining how to setup a discord channel, that's up to you but google has plenty of references. You can do it all from one channel or separate the notifications (granular) for each trigger if you want. Simple channel setup \u00b6 #media => All the *arr notifications you setup in Notification Settings . #errors => Health checks, network errors, etc. #plex => Play, resume, etc. for Plex. After you create the needed channels, it's time to add them to the Setup the channels First we need to get the server ID Open your User Settings -> Appearance -> Enable Developer Mode. Right click on the server name at the top of your discord and press \"Copy ID\" Example right click Paste the channel ID in the corresponding boxes Add your server ID Select the channel ID for the #media channel. Use this option if you want to use separate channels for the notifications (see below). Select the channel ID for the #errors channel. Select the channel ID for the #plex channel. Use this option if you want to use separate channels for the notifications (see below). Granular arr setup Granular arr setup \u00b6 Granular media setup Granular media setup \u00b6 Invite the bot \u00b6 It's time to invite the bot in to your Server/Channels by clicking on the following link. You will get a screen that looks like the following screenshot. Select the server the bot should join. Click on Authorize to approve. Note You have to be an administrator of the Discord channel to invite bots. Make sure the bot has permissions to post. Bot Setup Help Right click on your server > Server Settings > Roles If you have a Bot role you can skip this, otherwise click the + next to ROLES Name the role Bot and scroll down to Text Permissions. Enable Send Messages , Embed Links & Add Reactions Go back to your server, right click on the Media Bot and assign the role of Bot Reactions \u00b6 Here we will setup the Discord Notifier reactions(emoji's) that will be shown during a playback in plex, or during a download/import in Sonarr/Radarr. This section exist of 2 parts. *arr state (grab/failed) and play state of plex. The Trackers/Indexers. First we're going to download the emoji's and you can do that in 2 ways. 1 at a time - Right click -> Save As... - for these emoji images to some location on your computer. Pack Download - Click here to download a zip of all the current reaction images. For this example, we will be using Pack Download. You'll need download the file and then unpack it somewhere on your computer. After which, you can then add the emoji's to your Discord Server easily. How to add your own Emoji's => LINK After you've added them to your Discord Server it's time to get the ID's from your emoji's, to do this go in to one of your channels and type: \\: emoji_name: Example What results in to. So your ID would be :grab:706535455876710461 . Paste the ID results from your channel in to the corresponding boxes. Do this for all the other boxes also including your Trackers/Indexers. Trackers and Indexers \u00b6 Paste here the the emoji ID. The actual indexer name you're using in Sonarr/Radarr. Example What will result in to. If you use a different name in Sonarr and Radarr just add them with a comma BeyondHD - Jackett,BHD . Don't forget to click on Save Changes !!! Note After pasting the Emoji's ID in to the box you will notice that the leading colon will disappear nothing to worry about that's per design Integrations \u00b6 Here we will explain how to we add all this to your *arr and Plex. Radarr, Readarr and Lidarr \u00b6 Radarr, Readarr and Lidarr supports Discord Notifier natively so that's an easy one to add. Settings => Connect => click on the plus icon and select Discord Notifier add your API key and you're done. Radarr Example In Radarr go to Settings => Connect => Click on the plus icon and select DiscordNotifier.com . Then add the following info. The name you want to use for the notification. Enable On Grab , On Import , On Upgrade , On Health Issue & Include Health Warnings . Add here you API key from Discord Notifier. Click on Test to see if it works. If everything is correct click on Save Sonarr \u00b6 Sonarr doesn't have native support & will not get one per their devs. That's why we're going to use the webhook method. Settings => Connect > Click on the plus icon and select Webhook . Add the following info: Name : Discord Notifier Enable: On Grab , On Import , On Upgrade , On Health Issue & Include Health Warnings . URL: The URL that you can copy/paste from the integrations page. Click Save Sonarr Example Settings => Connect > Click on the plus icon and select Webhook . Add the following info. The name you want to use for the notification. Enable On Grab , On Import , On Upgrade , On Health Issue & Include Health Warnings . Add the URL that you can copy/paste from the integrations page. Make sure this is on POST . Click on Test to see if it works. If everything is correct click on Save Bazarr \u00b6 For Bazarr you need to make use of JSON method. Settings => Notifications => and select JSON On the top click on the Edit icon and Enable the notification type. Add the JSON URL that you copy/pasted from the integrations page. Scroll up and save Bazarr Example Settings => Notifications => and select JSON On the top click on the Edit icon and Enable the notification type. Add the following info. Enable the JSON Notification. Add the JSON URL that you copy/pasted from the integrations page. Click on Test to see if it works. If everything is correct click on Ok Don't forget to click on Save on the top of the Bazarr screen. Plex \u00b6 URL Webhook \u00b6 Settings => Webhooks => click on ADD WEBHOOK and add the URL that you can copy/paste from the integrations page and click on SAVE CHANGES Plex Example Settings => Webhooks => click on ADD WEBHOOK On the top right click on the Settings icon, and on the left sidebar select Webhooks Click on the middle of the screen on and add the following info. Add the URL that you can copy/paste from the integrations page. Click on SAVE CHANGES Advanced Plex Settings Advanced Plex Settings \u00b6 Python Webhook \u00b6 Python is required for this to work. Make sure your docker solution has it available if running docker. All implementations \u00b6 Open the file and change the variables accordingly. There are links in the file comments to help as well You can test the script by typing python /path/to/script in your CLI. If the file has a shebang in it (#!python) then you do not need to specify python on the CLI. Docker \u00b6 Cloudbox - Has python installed Hotio - Has python installed LSIO - Does not have python installed Linux \u00b6 placeholder Unraid \u00b6 placeholder Windows \u00b6 placeholder Run the python file so it listens on the specific port. Testing \u00b6 On the bottom of all the instruction you will now have the ability to test your settings. This only tests the connection between the notifier and your discord. You can use the Test in each *arr and that will test the everything (connection wise). Click on the icons to test your notifications. After going through this tutorial and you still aren't getting notifications in your discord channel from the respective logos, then retry the steps outlined above. If there is still an issue, try asking in the Discord Notifier discord channel for additional support.","title":"Discord Notifiarr Basic Setup"},{"location":"Misc/Discord-Notifier-Basic-Setup/#discord-notifiarr-basic-setup","text":"Formerly aka Discord Notifier","title":"Discord Notifiarr Basic Setup"},{"location":"Misc/Discord-Notifier-Basic-Setup/#login","text":"First we're going to visit the Notifiarr site, if you don't have an account yet, click the link to signup. Your Email address you used during signup. Your Password you created during signup. Login to the site and setup. Password reset if you forgot your password. Signup if you don't have an account. Link to Notifiarr Discord support channel.","title":"Login"},{"location":"Misc/Discord-Notifier-Basic-Setup/#profile","text":"After you have logged in, you will be redirected to your profile screen. Select your Country . Select your Timezone . Click on Generate API Key (This needs to be done). Select your Notification Language . Change your Time Format to your liking. Don't forget to Save your Changes.","title":"Profile"},{"location":"Misc/Discord-Notifier-Basic-Setup/#integration-setup","text":"Enable the integrations you want to use Setup your discord server (required), invite the bot (required) and reactions (optional).","title":"Integration Setup"},{"location":"Misc/Discord-Notifier-Basic-Setup/#integration-settings","text":"First, click on Manage Integrations so you can enable what you want to receive notifications for. A screen will popup and here you're able to select from which application/service you receive a notification. When you enabled the ones you want click on Save Setup which notifications you want to to receive from each option. Cog wheel, this opens the integration settings External link, this opens the website for the integration WIKI link, this opens any extra wiki information available for the integration Trigger, this enables/disables a specific trigger for the integration Channels, this sets the channel in your server to post to for the integration Integration Settings (Cog wheel)","title":"Integration Settings"},{"location":"Misc/Discord-Notifier-Basic-Setup/#notification-settings-configuration","text":"Instructions how to setup the integration Enable/Disable notification trigger Change color bar for notification trigger Expand trigger to enable/disable message fields Customize the layout for the notification (drag/drop editor to the right in the image) Enable so each notification is unique and wont update existing ones. Here you can edit the layout","title":"Notification Settings Configuration"},{"location":"Misc/Discord-Notifier-Basic-Setup/#discord-settings","text":"Setup your discord server, shared channels, reactions and invite the bot into your server.","title":"Discord Settings"},{"location":"Misc/Discord-Notifier-Basic-Setup/#create-the-channels","text":"First thing to do is create a few channels (in your discord server) where you receive your notifications. Note I won't be explaining how to setup a discord channel, that's up to you but google has plenty of references. You can do it all from one channel or separate the notifications (granular) for each trigger if you want.","title":"Create the channels"},{"location":"Misc/Discord-Notifier-Basic-Setup/#simple-channel-setup","text":"#media => All the *arr notifications you setup in Notification Settings . #errors => Health checks, network errors, etc. #plex => Play, resume, etc. for Plex. After you create the needed channels, it's time to add them to the Setup the channels First we need to get the server ID Open your User Settings -> Appearance -> Enable Developer Mode. Right click on the server name at the top of your discord and press \"Copy ID\" Example right click Paste the channel ID in the corresponding boxes Add your server ID Select the channel ID for the #media channel. Use this option if you want to use separate channels for the notifications (see below). Select the channel ID for the #errors channel. Select the channel ID for the #plex channel. Use this option if you want to use separate channels for the notifications (see below). Granular arr setup","title":"Simple channel setup"},{"location":"Misc/Discord-Notifier-Basic-Setup/#granular-arr-setup","text":"Granular media setup","title":"Granular arr setup"},{"location":"Misc/Discord-Notifier-Basic-Setup/#granular-media-setup","text":"","title":"Granular media setup"},{"location":"Misc/Discord-Notifier-Basic-Setup/#invite-the-bot","text":"It's time to invite the bot in to your Server/Channels by clicking on the following link. You will get a screen that looks like the following screenshot. Select the server the bot should join. Click on Authorize to approve. Note You have to be an administrator of the Discord channel to invite bots. Make sure the bot has permissions to post. Bot Setup Help Right click on your server > Server Settings > Roles If you have a Bot role you can skip this, otherwise click the + next to ROLES Name the role Bot and scroll down to Text Permissions. Enable Send Messages , Embed Links & Add Reactions Go back to your server, right click on the Media Bot and assign the role of Bot","title":"Invite the bot"},{"location":"Misc/Discord-Notifier-Basic-Setup/#reactions","text":"Here we will setup the Discord Notifier reactions(emoji's) that will be shown during a playback in plex, or during a download/import in Sonarr/Radarr. This section exist of 2 parts. *arr state (grab/failed) and play state of plex. The Trackers/Indexers. First we're going to download the emoji's and you can do that in 2 ways. 1 at a time - Right click -> Save As... - for these emoji images to some location on your computer. Pack Download - Click here to download a zip of all the current reaction images. For this example, we will be using Pack Download. You'll need download the file and then unpack it somewhere on your computer. After which, you can then add the emoji's to your Discord Server easily. How to add your own Emoji's => LINK After you've added them to your Discord Server it's time to get the ID's from your emoji's, to do this go in to one of your channels and type: \\: emoji_name: Example What results in to. So your ID would be :grab:706535455876710461 . Paste the ID results from your channel in to the corresponding boxes. Do this for all the other boxes also including your Trackers/Indexers.","title":"Reactions"},{"location":"Misc/Discord-Notifier-Basic-Setup/#trackers-and-indexers","text":"Paste here the the emoji ID. The actual indexer name you're using in Sonarr/Radarr. Example What will result in to. If you use a different name in Sonarr and Radarr just add them with a comma BeyondHD - Jackett,BHD . Don't forget to click on Save Changes !!! Note After pasting the Emoji's ID in to the box you will notice that the leading colon will disappear nothing to worry about that's per design","title":"Trackers and Indexers"},{"location":"Misc/Discord-Notifier-Basic-Setup/#integrations","text":"Here we will explain how to we add all this to your *arr and Plex.","title":"Integrations"},{"location":"Misc/Discord-Notifier-Basic-Setup/#radarr-readarr-and-lidarr","text":"Radarr, Readarr and Lidarr supports Discord Notifier natively so that's an easy one to add. Settings => Connect => click on the plus icon and select Discord Notifier add your API key and you're done. Radarr Example In Radarr go to Settings => Connect => Click on the plus icon and select DiscordNotifier.com . Then add the following info. The name you want to use for the notification. Enable On Grab , On Import , On Upgrade , On Health Issue & Include Health Warnings . Add here you API key from Discord Notifier. Click on Test to see if it works. If everything is correct click on Save","title":"Radarr, Readarr and Lidarr"},{"location":"Misc/Discord-Notifier-Basic-Setup/#sonarr","text":"Sonarr doesn't have native support & will not get one per their devs. That's why we're going to use the webhook method. Settings => Connect > Click on the plus icon and select Webhook . Add the following info: Name : Discord Notifier Enable: On Grab , On Import , On Upgrade , On Health Issue & Include Health Warnings . URL: The URL that you can copy/paste from the integrations page. Click Save Sonarr Example Settings => Connect > Click on the plus icon and select Webhook . Add the following info. The name you want to use for the notification. Enable On Grab , On Import , On Upgrade , On Health Issue & Include Health Warnings . Add the URL that you can copy/paste from the integrations page. Make sure this is on POST . Click on Test to see if it works. If everything is correct click on Save","title":"Sonarr"},{"location":"Misc/Discord-Notifier-Basic-Setup/#bazarr","text":"For Bazarr you need to make use of JSON method. Settings => Notifications => and select JSON On the top click on the Edit icon and Enable the notification type. Add the JSON URL that you copy/pasted from the integrations page. Scroll up and save Bazarr Example Settings => Notifications => and select JSON On the top click on the Edit icon and Enable the notification type. Add the following info. Enable the JSON Notification. Add the JSON URL that you copy/pasted from the integrations page. Click on Test to see if it works. If everything is correct click on Ok Don't forget to click on Save on the top of the Bazarr screen.","title":"Bazarr"},{"location":"Misc/Discord-Notifier-Basic-Setup/#plex","text":"","title":"Plex"},{"location":"Misc/Discord-Notifier-Basic-Setup/#url-webhook","text":"Settings => Webhooks => click on ADD WEBHOOK and add the URL that you can copy/paste from the integrations page and click on SAVE CHANGES Plex Example Settings => Webhooks => click on ADD WEBHOOK On the top right click on the Settings icon, and on the left sidebar select Webhooks Click on the middle of the screen on and add the following info. Add the URL that you can copy/paste from the integrations page. Click on SAVE CHANGES Advanced Plex Settings","title":"URL Webhook"},{"location":"Misc/Discord-Notifier-Basic-Setup/#advanced-plex-settings","text":"","title":"Advanced Plex Settings"},{"location":"Misc/Discord-Notifier-Basic-Setup/#python-webhook","text":"Python is required for this to work. Make sure your docker solution has it available if running docker.","title":"Python Webhook"},{"location":"Misc/Discord-Notifier-Basic-Setup/#all-implementations","text":"Open the file and change the variables accordingly. There are links in the file comments to help as well You can test the script by typing python /path/to/script in your CLI. If the file has a shebang in it (#!python) then you do not need to specify python on the CLI.","title":"All implementations"},{"location":"Misc/Discord-Notifier-Basic-Setup/#docker","text":"Cloudbox - Has python installed Hotio - Has python installed LSIO - Does not have python installed","title":"Docker"},{"location":"Misc/Discord-Notifier-Basic-Setup/#linux","text":"placeholder","title":"Linux"},{"location":"Misc/Discord-Notifier-Basic-Setup/#unraid","text":"placeholder","title":"Unraid"},{"location":"Misc/Discord-Notifier-Basic-Setup/#windows","text":"placeholder Run the python file so it listens on the specific port.","title":"Windows"},{"location":"Misc/Discord-Notifier-Basic-Setup/#testing","text":"On the bottom of all the instruction you will now have the ability to test your settings. This only tests the connection between the notifier and your discord. You can use the Test in each *arr and that will test the everything (connection wise). Click on the icons to test your notifications. After going through this tutorial and you still aren't getting notifications in your discord channel from the respective logos, then retry the steps outlined above. If there is still an issue, try asking in the Discord Notifier discord channel for additional support.","title":"Testing"},{"location":"Misc/How-to-setup-Torguard-for-port-forwarding/","text":"Setup TorGuard for port forwarding \u00b6 Note These settings are a recommendation if you want to choose other settings be my guest. If you want to support me, please use the following referral link and use one of the following codes: TGLIFE : Get 50% Off for Life for Anonymous Proxy, Anonymous VPN, Anonymous Webmail. TGLIFE-STREAMING : Get 50% Off for Life Anonymous Proxy, Anonymous VPN, Streaming Bundle. TGLIFE-PRO : Get 50% Off for Life for Anonymous VPN, Streaming Bundle, Anonymous VPN Pro. Create a user account \u00b6 Go to My Account > Services > My Service Credentials . First we're going to create a user account for your VPN so we won't need to use your main account that you use to login to your account on the Torguard site. This account will be used for authentication with your VPN Torrent client. Create a new username and choose a secure password or create a random username and password. How to get the IP of your VPN server \u00b6 Go to My Account > Server > Global VPN Network Then we're going to select which server we're going to use, For the best speed it's recommended to choose the one nearest to your location. Lets use for this example: USA Miami and copy/paste the Hostname us-fl.secureconnect.me . then open a cmd window or something equal and type: ping us-fl.secureconnect.me You will then get the IP of the server. Remember that for later use. How to set Port forwarding \u00b6 Go to My Account > Services > My Services . Then click on Manage and select Request Port Forward . That's the IP we found earlier. Select UDP . Select a Port/Auth I personally use 995|SHA1 . Select the Protocol TCP . I suggest to use a high Port number 10.000+ or a game port you don't use, don't use the default torrent ports 6881- 6889 (This is also the port you will use in your torrent client). Click on the + sign and do the same with the UDP Protocol . Then click on Submit Request . And you will see something like this. You will also receive a e-mail with the ports you forwarded. How to create the .ovpn file \u00b6 Go to My Account > Tools > OpenVPN Config Generator . Choose the OS you want to use the .ovpn for. Choose Custom . Put in the IP we got earlier and used for the port forwarding. Choose UDP . Choose 995|SHA1 or what you selected during the port forwarding. Choose AES-128-GCM . Choose 2.4 and above . Check Require TLS 1.2 Click on Generate Config Now you will download a .ovpn file with a random number. This .ovpn file you place in the openvpn folder of your VPN torrent client.","title":"Setup TorGuard for port forwarding"},{"location":"Misc/How-to-setup-Torguard-for-port-forwarding/#setup-torguard-for-port-forwarding","text":"Note These settings are a recommendation if you want to choose other settings be my guest. If you want to support me, please use the following referral link and use one of the following codes: TGLIFE : Get 50% Off for Life for Anonymous Proxy, Anonymous VPN, Anonymous Webmail. TGLIFE-STREAMING : Get 50% Off for Life Anonymous Proxy, Anonymous VPN, Streaming Bundle. TGLIFE-PRO : Get 50% Off for Life for Anonymous VPN, Streaming Bundle, Anonymous VPN Pro.","title":"Setup TorGuard for port forwarding"},{"location":"Misc/How-to-setup-Torguard-for-port-forwarding/#create-a-user-account","text":"Go to My Account > Services > My Service Credentials . First we're going to create a user account for your VPN so we won't need to use your main account that you use to login to your account on the Torguard site. This account will be used for authentication with your VPN Torrent client. Create a new username and choose a secure password or create a random username and password.","title":"Create a user account"},{"location":"Misc/How-to-setup-Torguard-for-port-forwarding/#how-to-get-the-ip-of-your-vpn-server","text":"Go to My Account > Server > Global VPN Network Then we're going to select which server we're going to use, For the best speed it's recommended to choose the one nearest to your location. Lets use for this example: USA Miami and copy/paste the Hostname us-fl.secureconnect.me . then open a cmd window or something equal and type: ping us-fl.secureconnect.me You will then get the IP of the server. Remember that for later use.","title":"How to get the IP of your VPN server"},{"location":"Misc/How-to-setup-Torguard-for-port-forwarding/#how-to-set-port-forwarding","text":"Go to My Account > Services > My Services . Then click on Manage and select Request Port Forward . That's the IP we found earlier. Select UDP . Select a Port/Auth I personally use 995|SHA1 . Select the Protocol TCP . I suggest to use a high Port number 10.000+ or a game port you don't use, don't use the default torrent ports 6881- 6889 (This is also the port you will use in your torrent client). Click on the + sign and do the same with the UDP Protocol . Then click on Submit Request . And you will see something like this. You will also receive a e-mail with the ports you forwarded.","title":"How to set Port forwarding"},{"location":"Misc/How-to-setup-Torguard-for-port-forwarding/#how-to-create-the-ovpn-file","text":"Go to My Account > Tools > OpenVPN Config Generator . Choose the OS you want to use the .ovpn for. Choose Custom . Put in the IP we got earlier and used for the port forwarding. Choose UDP . Choose 995|SHA1 or what you selected during the port forwarding. Choose AES-128-GCM . Choose 2.4 and above . Check Require TLS 1.2 Click on Generate Config Now you will download a .ovpn file with a random number. This .ovpn file you place in the openvpn folder of your VPN torrent client.","title":"How to create the .ovpn file"},{"location":"Misc/how-to-provide-a-docker-compose/","text":"How to provide a docker compose \u00b6 When you're running dockers and you need help on discord etc you often hear the question: \"Provide a docker compose\" If you need to provide this info always remember to provide it from all your *arr (Sonarr, Radarr, Lidarr, Bazarr) and also from your download client(s). If you're using a system with a GUI (Synology, unRAID, OMV, etc.) it's not always easy to provide a docker compose but it's possible. Warning Please don't use screenshots to provide the info as they aren't always revealing all the needed info Use one of the following from terminal(puTTy) to get the docker compose with or without the use of sudo . sudo docker run --rm -v /var/run/docker.sock:/var/run/docker.sock red5d/docker-autocompose CONTAINER_NAME CONTAINER_NAME2 Example: sudo docker run --rm -v /var/run/docker.sock:/var/run/docker.sock red5d/docker-autocompose sonarr radarr bazarr nzbget Paste the results on one of the following sites. gist.github.com hastebin.com pastebin.com If you use docker run command to create your docker containers, paste your run command in to composerize","title":"How to provide a docker compose"},{"location":"Misc/how-to-provide-a-docker-compose/#how-to-provide-a-docker-compose","text":"When you're running dockers and you need help on discord etc you often hear the question: \"Provide a docker compose\" If you need to provide this info always remember to provide it from all your *arr (Sonarr, Radarr, Lidarr, Bazarr) and also from your download client(s). If you're using a system with a GUI (Synology, unRAID, OMV, etc.) it's not always easy to provide a docker compose but it's possible. Warning Please don't use screenshots to provide the info as they aren't always revealing all the needed info Use one of the following from terminal(puTTy) to get the docker compose with or without the use of sudo . sudo docker run --rm -v /var/run/docker.sock:/var/run/docker.sock red5d/docker-autocompose CONTAINER_NAME CONTAINER_NAME2 Example: sudo docker run --rm -v /var/run/docker.sock:/var/run/docker.sock red5d/docker-autocompose sonarr radarr bazarr nzbget Paste the results on one of the following sites. gist.github.com hastebin.com pastebin.com If you use docker run command to create your docker containers, paste your run command in to composerize","title":"How to provide a docker compose"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/","text":"How To Set Up Hardlinks and Atomic-Moves \u00b6 Description \u00b6 Info If you\u2019re wondering why hard links aren\u2019t working or why a simple move is taking far longer than it should. Here we will try to explains it. The paths you use on the inside matter. Because of how Docker\u2019s volumes work, passing in two or three volumes such as the commonly suggested /tv , /movies and /downloads makes them look like two or three file systems, even if they aren\u2019t. This means hard links won\u2019t work and instead of an instant move, a slower and more I/O intensive copy + delete is used. So you want one of the following ? Instant moves (Atomic-Moves) during import of the *arr (useful when using Usenet)? You don't want to use twice the storage when using torrents. (hardlinks)? You want to perma seed? Then keep reading. FAQ FAQ \u00b6 Q: What are the *arr ? Sonarr, Radarr, Lidarr, etc. Q: What are hardlinks? Short answer is \"having a file in multiple folders\" without using up your storage, Long Answer . Q: What's Atomic Moves? A real move and not a copy file from download folder to media folder and then delete file from download folder. How to Setup for \u00b6 DockSTARTer UnRaid Synology Docker Bare Metal (Native) DockSTARTer DockSTARTer \u00b6 Note I'm using the default paths in this example, and will keep the other paths unchanged so nothing will break if you make a mistake. Folder Structure \u00b6 We're going to use a mounted drive that we're going to use as storage for downloads and your media. In this example the mounted drive will be mounted to /mnt/ with the following folder structure. storage \u251c\u2500\u2500 downloads | \u251c\u2500\u2500 torrents \u2502 | \u251c\u2500\u2500 movies \u2502 | \u251c\u2500\u2500 music \u2502 | \u2514\u2500\u2500 tv | \u2514\u2500\u2500 usenet \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u2514\u2500\u2500 medialibrary \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv Changes to the .env \u00b6 To accomplish this we need to change first a few paths in your .env (Usually ~/.docker/compose/.env ) # Global Settings COMPOSE_HTTP_TIMEOUT=60 DOCKERCONFDIR=~/.config/appdata DOCKERGID=999 DOCKERHOSTNAME=DockSTARTer DOCKERLOGGING_MAXFILE=10 DOCKERLOGGING_MAXSIZE=200k DOCKERSTORAGEDIR=/mnt/storage PGID=1000 PUID=1000 TZ=America/Chicago # DEPRECATED Settings (will be removed at the end of 2020) DOCKERSHAREDDIR=~/shared DOWNLOADSDIR=/mnt/downloads MEDIADIR_AUDIOBOOKS=/mnt/medialibrary/audiobooks MEDIADIR_BOOKS=/mnt/medialibrary/books MEDIADIR_COMICS=/mnt/medialibrary/comics MEDIADIR_MOVIES=/mnt/medialibrary/movies MEDIADIR_MUSIC=/mnt/medialibrary/music MEDIADIR_TV=/mnt/medialibrary/tv Changes to your paths \u00b6 When that's all set then you will need to change the paths you're going to use in the containers from: /downloads => /storage/downloads /audiobooks => /storage/medialibrary/audiobooks /books => /storage/medialibrary/books /comics => /storage/medialibrary/comics /movies => /storage/medialibrary/movies /music => /storage/medialibrary/music /tv => /storage/medialibrary/tv DockSTARTer Examples \u00b6 Info The screenshots in the examples are using the following root path /storage Sonarr Examples Sonarr Settings => Media Management => Importing Settings => Media Management => Root Folders Series => Add New Radarr Examples Radarr Settings => Media Management => Importing Settings => Media Management => Root Folders Movies => Add New SABnzbd Examples SABnzbd SABnzbd config => Folders SABnzbd config => Categories NZBGet Examples NZBGet Settings => PATHS Settings => CATEGORIES qBittorrent Examples qBittorrent Options => Downloads Deluge Example Deluge Preferences => Downloads ruTorrent Examples ruTorrent ../config/rtorrent/config/rtorrent.rc (path to your appdata) Settings => Downloads Settings => Autotools UnRaid UnRaid \u00b6 Note The first thing you need to do is forget the suggested paths from the Spaceinvader One YouTube Tutorials, and don't use the predefined paths from the unraid templates. (Spaceinvader One YouTube guides are great to learn how to start with unraid or how to setup certain applications, and yes I did and still do use them. Probably the main reason why he's using those path is because they are predefined in the template) Create the main share \u00b6 Attention To get Hardlinks and Atomic-Moves working with Unraid you will need to make use of ONE share with subfolders. For this example I'm using my own setup and preferred share data . Go to your dashboard and on the top select shares select add share . use data if you got a cache drive and want to make use of it put it on Yes or keep it disabled (Hardlinks will stay in tact if you're using the cache) click on ADD SHARE Note Keep in mind regarding the use of the Cache drive, The mover can't move files that are in use, like when seeding with torrents. You will need to shutdown your client or stop/pause the torrents so the mover can move them to your Array. With Usenet you won't have any issues. Folder Structure \u00b6 On the host (Unraid) you will need to add /mnt/user before it. So /mnt/user/data The data folder has sub-folders for torrents and usenet and each of these have sub-folders for tv , movie and music downloads to keep things neat. The media folder has nicely named TV , Movies and Music sub-folders, this is your library and what you\u2019d pass to Plex, Emby or JellyFin. These subfolders you need to create your self, you can use krusader or winscp to create them or any other way you prefer. data \u251c\u2500\u2500 torrents \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u251c\u2500\u2500 usenet \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u2514\u2500\u2500 media \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv I'm using lower case on all folder on purpose, being Linux is case sensitive. Setting up the containers \u00b6 After you created all the needed folders it's time to setup the paths in the docker containers. Go to your dashboard and select your docker container you want to edit or if you're starting fresh add the docker containers you want to use or prefer. Unraid makes it actually pretty clear what's the Host Path and what's the Container Path. Container Path: => The path that will be used inside the container. Host Path: => The path on your Unraid Server (The Host). Torrent clients \u00b6 qBittorrent, Deluge, ruTorrent Container Path: => /data/torrents/ Host Path: => /mnt/user/data/torrents/ Info The reason why we use /data/torrents/ for the torrent client is because it only needs access to the torrent files. In the torrent software settings, you\u2019ll need to reconfigure paths and you can sort into sub-folders like /data/torrents/{tv|movies|music} . data \u2514\u2500\u2500 torrents \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv Usenet clients \u00b6 NZBGet or SABnzbd Container Path: => /data/usenet/ Host Path: => /mnt/user/data/usenet/ Info The reason why we use /data/usenet/ for the usenet client is because it only needs access to the usenet files. In the usenet software settings, you\u2019ll need to reconfigure paths and you can sort into sub-folders like /data/usenet/{tv|movies|music} . data \u2514\u2500\u2500 usenet \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv The arr(s) \u00b6 Sonarr, Radarr and Lidarr Container Path: => /data Host Path: => /mnt/user/data/ Info Sonarr, Radarr and Lidarr gets access to everything because the download folder(s) and media folder will look like and be one file system. Hard links will work and moves will be atomic, instead of copy + delete. data \u251c\u2500\u2500 torrents \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u251c\u2500\u2500 usenet \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u2514\u2500\u2500 media \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv Media Server \u00b6 Plex, Emby, JellyFin and Bazarr Container Path: => /data/media Host Path: => /mnt/user/data/media/ Info Plex, Emby, JellyFin and Bazarr only needs access to your media library, which can have any number of sub folders like Movies, Kids Movies, TV, Documentary TV and/or Music as sub folders. data \u2514\u2500\u2500 media \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv Final Result \u00b6 Don't forget to look at the Examples how to setup the paths inside the containers. Synology Synology \u00b6 Note Being I don't have a Synology myself and I kind of hate the Synology GUI for the dockers, I'm doing this with the use of docker-compose. This works like 10x faster then the GUI and after adding it shows up in the GUI. Thnx to faxity for the initial compose that I used to create the Synology Guide. We need to get some information that we need later to setup the docker-compose file. PUID and PGID \u00b6 In order for the Docker container to access the shares on the Synology, we need to give it the same permissions as your main user who has access to those shares. For this we need to figure out the PUID and the PGID of the user having access to your shares. You will need to SSH into your Synology. If you didn't already enable it you need to do that first Then use a program like Putty and SSH to your Synology. Login if you get a popup asking if you want to trust the key, Just press OK or ACCEPT Enter the login information of your main Synology user account. Once logged in type id . This will show your UID (aka PUID). Which in this screenshot is 1026 for the administrator and the GID (aka PGID) which is 100 for the users group. Remember these values for later use. Note Yes we know it's not recommended to use the admin account but if you already know this then you wouldn't need to read this ;) Folder Structure \u00b6 Attention To get Hardlinks and Atomic-Moves working with your Synology you will need to make use of ONE share with subfolders. For this example we're going to make use of a share called data . On the host (Synology) you will need to add /volume1/ before it. So /volume1/data The data folder has sub-folders for torrents and usenet and each of these have sub-folders for tv , movie and music downloads to keep things neat. The media folder has nicely named TV , Movies and Music sub-folders, this is your library and what you\u2019d pass to Plex, Emby or JellyFin. These subfolders you need to create your self. I'm using lower case on all folder on purpose, being Linux is case sensitive. data \u251c\u2500\u2500 torrents \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u251c\u2500\u2500 usenet \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u2514\u2500\u2500 media \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv Breakdown of the Folder Structure Breakdown of the Folder Structure \u00b6 Torrent clients qBittorrent, Deluge, ruTorrent The reason why we use /data/torrents for the torrent client is because it only needs access to the torrent files. In the torrent software settings, you\u2019ll need to reconfigure paths and you can sort into sub-folders like /data/torrents/{tv|movies|music} . data \u2514\u2500\u2500 torrents \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv Usenet clients NZBGet or SABnzbd The reason why we use /data/usenet for the usenet client is because it only needs access to the usenet files. In the usenet software settings, you\u2019ll need to reconfigure paths and you can sort into sub-folders like /data/usenet/{tv|movies|music} . data \u2514\u2500\u2500 usenet \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv The arr(s) Sonarr, Radarr and Lidarr Sonarr, Radarr and Lidarr gets access to everything because the download folder(s) and media folder will look like and be one file system. Hard links will work and moves will be atomic, instead of copy + delete. data \u251c\u2500\u2500 torrents \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u251c\u2500\u2500 usenet \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u2514\u2500\u2500 media \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv Media Server Plex, Emby, JellyFin and Bazarr Plex, Emby, JellyFin and Bazarr only needs access to your media library, which can have any number of sub folders like Movies, Kids Movies, TV, Documentary TV and/or Music as sub folders. data \u2514\u2500\u2500 media \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv Appdata \u00b6 Your appdata will be stored in /volume1/docker/appdata/{appname} These {appname} sub folders you need to create your self. ( This is a limitation of the Synology ) We're going to do this in Putty or a similar program. sudo mkdir /volume1/docker/appdata cd /volume1/docker/appdata sudo mkdir radarr sonarr bazarr plex tautulli So your appdata folder will look like this. ls -al /volume1/docker/appdata docker \u2514\u2500\u2500 appdata \u251c\u2500\u2500 radarr \u251c\u2500\u2500 sonarr \u251c\u2500\u2500 bazarr \u251c\u2500\u2500 plex \u2514\u2500\u2500 tautulli Needed files \u00b6 First we will download the docker-compose.yml file Download this docker-compose.yml to your /volume1/docker/appdata location so you got your important stuff together. sudo wget https://raw.githubusercontent.com/TRaSH-/Guides-Synology-Templates/main/docker-compose/docker-compose.yml What's included and What's not included This docker-compose file will have the following docker containers included. Radarr Sonarr Bazarr (Subtitle searcher and downloaded) Plex Tautulli Watchtower (automatic docker container updater at 4am) What's not included. I didn't add a downloader to it because it depends on what you prefer usenet/torrents and which client you prefer, so i created a new Repository on Github where I provide and maintain some templates that you can find in the template folder ready to use with the main docker-compose.yml . The only thing you need to do is copy/paste what's inside the .yml file in to the main docker-compose.yml , the template also has the command what you need to use to create the appdata folder that we explained earlier. Second we will download the .env file Download this .env to your /volume1/docker/appdata location so you got your important stuff together. sudo wget https://raw.githubusercontent.com/TRaSH-/Guides-Synology-Templates/main/docker-compose/.env Changes you need to do \u00b6 The .env we downloaded holds the variables/information you need to change so everything works (I added also a description in the .env file) DOCKERCONFDIR (only change this if you know what you're doing and decide to use another path then in this guide used) DOCKERDATADIR (only change this if you know what you're doing and decide to use another path then in this guide used) PUID/PGID (this info you got earlier from HERE ) TZ (Change to your timezone) It holds more variables/information for other containers but they are described in the .env Permissions \u00b6 Now we need to make sure that the newly created files and folders have the correct permissions. Note If you're using another user then admin then you need to change it in the commands below !!! sudo chown -R admin:users /volume1/data /volume1/docker sudo chmod -R a = ,a+rX,u+w,g+w /volume1/data /volume1/docker Run the Docker Compose \u00b6 Important make sure you deleted/removed all your existing dockers from the GUI and also remove your native installs of these applications !!! When you did all the above steps you only need to type the following in your /volume1/docker/appdata cd /volume1/docker/appdata sudo docker-compose up -d You will notice that all the images will be downloaded, and after that the containers will be started. If you get a error then look at the error what it says and try to fix it. If you still got issues then put your used docker-compose.yml on pastebin and join the guides-discord here and provide the pastebin link with the error, have patience because of timezone differences. Don't forget to look at the Examples how to setup the paths inside the containers. Attention If you need to do any changes only edit the docker-compose.yml file and activate the changes when you type sudo docker-compose up -d again. Any changes you do/did in the GUI will be reverted when you run the docker-compose. Just don't use the GUI !!! docker-compose commands sudo docker-compose up -d (This Docker-compose command helps builds the image, then creates and starts Docker containers. The containers are from the services specified in the compose file. If the containers are already running and you run docker-compose up, it recreates the container.) sudo docker-compose pull (Pulls an image associated with a service defined in a docker-compose.yml) sudo docker-compose down (The Docker-compose down command also stops Docker containers like the stop command does. But it goes the extra mile. Docker-compose down, doesn\u2019t just stop the containers, it also removes them.) sudo docker system prune -a --volumes --force (Remove all unused containers, networks, images (both dangling and unreferenced), and optionally, volumes.) Docker Docker \u00b6 Tip If you're new to dockers and want a easy setup I suggest to take a look at DockSTARTer . I've also created a short guide HERE where I explain the settings for the most used applications. The main goal of DockSTARTer is to make it quick and easy to get up and running with Docker. You may choose to rely on DockSTARTer for various changes to your Docker system or use DockSTARTer as a stepping stone and learn to do more advanced configurations. DockSTARTer was actually my first steps in to the world of dockers. Note I'm not going to explain how to get dockers installed and running, I will only explain which folder structure we recommend. Folder Structure \u00b6 Attention It doesn't really matter which path you use for your media and appdata, the only thing you should avoid is /home . Because user folders in /home are expected to have some restrictive permissions. It just could end up creating a permissions mess, so it's better to just avoid entirely. For this example we're going to make use of a share called data . The data folder has sub-folders for torrents and usenet and each of these have sub-folders for tv , movie and music downloads to keep things neat. The media folder has nicely named TV , Movies and Music sub-folders, this is your library and what you\u2019d pass to Plex, Emby or JellyFin. In this examples I'm using lower case on all folder on purpose, being Linux is case sensitive. data \u251c\u2500\u2500 torrents \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u251c\u2500\u2500 usenet \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u2514\u2500\u2500 media \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv Breakdown of the Folder Structure Breakdown of the Folder Structure \u00b6 Torrent clients qBittorrent, Deluge, ruTorrent The reason why we use /data/torrents for the torrent client is because it only needs access to the torrent files. In the torrent software settings, you\u2019ll need to reconfigure paths and you can sort into sub-folders like /data/torrents/{tv|movies|music} . data \u2514\u2500\u2500 torrents \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv Usenet clients NZBGet or SABnzbd The reason why we use /data/usenet for the usenet client is because it only needs access to the usenet files. In the usenet software settings, you\u2019ll need to reconfigure paths and you can sort into sub-folders like /data/usenet/{tv|movies|music} . data \u2514\u2500\u2500 usenet \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv The arr(s) Sonarr, Radarr and Lidarr Sonarr, Radarr and Lidarr gets access to everything because the download folder(s) and media folder will look like and be one file system. Hard links will work and moves will be atomic, instead of copy + delete. data \u251c\u2500\u2500 torrents \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u251c\u2500\u2500 usenet \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u2514\u2500\u2500 media \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv Media Server Plex, Emby, JellyFin and Bazarr Plex, Emby, JellyFin and Bazarr only needs access to your media library, which can have any number of sub folders like Movies, Kids Movies, TV, Documentary TV and/or Music as sub folders. data \u2514\u2500\u2500 media \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv Don't forget to look at the Examples how to setup the paths inside the containers. Bare Metal (Native) Native \u00b6 Note I'm not going to explain how to install all the applications, I will only explain which folder structure we recommend. Folder Structure \u00b6 Attention It doesn't really matter which path you use for your media, the only thing you should avoid is /home . Because user folders in /home are expected to have some restrictive permissions. It just could end up creating a permissions mess, so it's better to just avoid entirely. For this example we're going to make use of a share called data . The data folder has sub-folders for torrents and usenet and each of these have sub-folders for tv , movie and music downloads to keep things neat. The media folder has nicely named TV , Movies and Music sub-folders, this is your library and what you\u2019d pass to Plex, Emby or JellyFin. I'm using lower case on all folder on purpose, being Linux is case sensitive. data \u251c\u2500\u2500 torrents \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u251c\u2500\u2500 usenet \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u2514\u2500\u2500 media \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv Breakdown of the Folder Structure Breakdown of the Folder Structure \u00b6 Torrent clients qBittorrent, Deluge, ruTorrent The reason why we use /data/torrents for the torrent client is because it only needs access to the torrent files. In the torrent software settings, you\u2019ll need to reconfigure paths and you can sort into sub-folders like /data/torrents/{tv|movies|music} . data \u2514\u2500\u2500 torrents \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv Usenet clients NZBGet or SABnzbd The reason why we use /data/usenet for the usenet client is because it only needs access to the usenet files. In the usenet software settings, you\u2019ll need to reconfigure paths and you can sort into sub-folders like /data/usenet/{tv|movies|music} . data \u2514\u2500\u2500 usenet \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv The arr(s) Sonarr, Radarr and Lidarr Sonarr, Radarr and Lidarr gets access to everything because the download folder(s) and media folder will look like and be one file system. Hard links will work and moves will be atomic, instead of copy + delete. data \u251c\u2500\u2500 torrents \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u251c\u2500\u2500 usenet \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u2514\u2500\u2500 media \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv Media Server Plex, Emby, JellyFin and Bazarr Plex, Emby, JellyFin and Bazarr only needs access to your media library, which can have any number of sub folders like Movies, Kids Movies, TV, Documentary TV and/or Music as sub folders. data \u2514\u2500\u2500 media \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv Permissions \u00b6 Recursively chown user and group and Recursively chmod to 775/664 sudo chown -R $USER : $USER /data sudo chmod -R a = ,a+rX,u+w,g+w /data Don't forget to look at the Examples how to setup the paths inside the containers. Examples \u00b6 Info Pick one path layout and use it for all of them. It doesn't matter if you prefer to use /data , /shared , /storage or whatever. The screenshots in the examples are using the following root path /data Sonarr Radarr SABnzbd NZBGet qBittorrent Deluge ruTorrent Sonarr Examples Sonarr \u00b6 Settings => Media Management => Importing Settings => Media Management => Root Folders Series => Add New Radarr Examples Radarr \u00b6 Settings => Media Management => Importing Settings => Media Management => Root Folders Movies => Add New SABnzbd Examples SABnzbd \u00b6 SABnzbd config => Folders SABnzbd config => Categories NZBGet Examples NZBGet \u00b6 Settings => PATHS Settings => CATEGORIES qBittorrent Examples qBittorrent \u00b6 Options => Downloads Deluge Example Deluge \u00b6 Preferences => Downloads ruTorrent Examples ruTorrent \u00b6 ../config/rtorrent/config/rtorrent.rc (path to your appdata) Settings => Downloads Settings => Autotools Big Thnx to fryfrog for his Docker Guide that I used as basis for this guide.","title":"How To Set Up Hardlinks and Atomic-Moves"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#how-to-set-up-hardlinks-and-atomic-moves","text":"","title":"How To Set Up Hardlinks and Atomic-Moves"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#description","text":"Info If you\u2019re wondering why hard links aren\u2019t working or why a simple move is taking far longer than it should. Here we will try to explains it. The paths you use on the inside matter. Because of how Docker\u2019s volumes work, passing in two or three volumes such as the commonly suggested /tv , /movies and /downloads makes them look like two or three file systems, even if they aren\u2019t. This means hard links won\u2019t work and instead of an instant move, a slower and more I/O intensive copy + delete is used. So you want one of the following ? Instant moves (Atomic-Moves) during import of the *arr (useful when using Usenet)? You don't want to use twice the storage when using torrents. (hardlinks)? You want to perma seed? Then keep reading. FAQ","title":"Description"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#faq","text":"Q: What are the *arr ? Sonarr, Radarr, Lidarr, etc. Q: What are hardlinks? Short answer is \"having a file in multiple folders\" without using up your storage, Long Answer . Q: What's Atomic Moves? A real move and not a copy file from download folder to media folder and then delete file from download folder.","title":"FAQ"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#how-to-setup-for","text":"DockSTARTer UnRaid Synology Docker Bare Metal (Native) DockSTARTer","title":"How to Setup for"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#dockstarter","text":"Note I'm using the default paths in this example, and will keep the other paths unchanged so nothing will break if you make a mistake.","title":"DockSTARTer"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#folder-structure","text":"We're going to use a mounted drive that we're going to use as storage for downloads and your media. In this example the mounted drive will be mounted to /mnt/ with the following folder structure. storage \u251c\u2500\u2500 downloads | \u251c\u2500\u2500 torrents \u2502 | \u251c\u2500\u2500 movies \u2502 | \u251c\u2500\u2500 music \u2502 | \u2514\u2500\u2500 tv | \u2514\u2500\u2500 usenet \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u2514\u2500\u2500 medialibrary \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv","title":"Folder Structure"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#changes-to-the-env","text":"To accomplish this we need to change first a few paths in your .env (Usually ~/.docker/compose/.env ) # Global Settings COMPOSE_HTTP_TIMEOUT=60 DOCKERCONFDIR=~/.config/appdata DOCKERGID=999 DOCKERHOSTNAME=DockSTARTer DOCKERLOGGING_MAXFILE=10 DOCKERLOGGING_MAXSIZE=200k DOCKERSTORAGEDIR=/mnt/storage PGID=1000 PUID=1000 TZ=America/Chicago # DEPRECATED Settings (will be removed at the end of 2020) DOCKERSHAREDDIR=~/shared DOWNLOADSDIR=/mnt/downloads MEDIADIR_AUDIOBOOKS=/mnt/medialibrary/audiobooks MEDIADIR_BOOKS=/mnt/medialibrary/books MEDIADIR_COMICS=/mnt/medialibrary/comics MEDIADIR_MOVIES=/mnt/medialibrary/movies MEDIADIR_MUSIC=/mnt/medialibrary/music MEDIADIR_TV=/mnt/medialibrary/tv","title":"Changes to the .env"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#changes-to-your-paths","text":"When that's all set then you will need to change the paths you're going to use in the containers from: /downloads => /storage/downloads /audiobooks => /storage/medialibrary/audiobooks /books => /storage/medialibrary/books /comics => /storage/medialibrary/comics /movies => /storage/medialibrary/movies /music => /storage/medialibrary/music /tv => /storage/medialibrary/tv","title":"Changes to your paths"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#dockstarter-examples","text":"Info The screenshots in the examples are using the following root path /storage Sonarr Examples","title":"DockSTARTer Examples"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#unraid","text":"Note The first thing you need to do is forget the suggested paths from the Spaceinvader One YouTube Tutorials, and don't use the predefined paths from the unraid templates. (Spaceinvader One YouTube guides are great to learn how to start with unraid or how to setup certain applications, and yes I did and still do use them. Probably the main reason why he's using those path is because they are predefined in the template)","title":"UnRaid"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#create-the-main-share","text":"Attention To get Hardlinks and Atomic-Moves working with Unraid you will need to make use of ONE share with subfolders. For this example I'm using my own setup and preferred share data . Go to your dashboard and on the top select shares select add share . use data if you got a cache drive and want to make use of it put it on Yes or keep it disabled (Hardlinks will stay in tact if you're using the cache) click on ADD SHARE Note Keep in mind regarding the use of the Cache drive, The mover can't move files that are in use, like when seeding with torrents. You will need to shutdown your client or stop/pause the torrents so the mover can move them to your Array. With Usenet you won't have any issues.","title":"Create the main share"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#folder-structure_1","text":"On the host (Unraid) you will need to add /mnt/user before it. So /mnt/user/data The data folder has sub-folders for torrents and usenet and each of these have sub-folders for tv , movie and music downloads to keep things neat. The media folder has nicely named TV , Movies and Music sub-folders, this is your library and what you\u2019d pass to Plex, Emby or JellyFin. These subfolders you need to create your self, you can use krusader or winscp to create them or any other way you prefer. data \u251c\u2500\u2500 torrents \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u251c\u2500\u2500 usenet \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u2514\u2500\u2500 media \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv I'm using lower case on all folder on purpose, being Linux is case sensitive.","title":"Folder Structure"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#setting-up-the-containers","text":"After you created all the needed folders it's time to setup the paths in the docker containers. Go to your dashboard and select your docker container you want to edit or if you're starting fresh add the docker containers you want to use or prefer. Unraid makes it actually pretty clear what's the Host Path and what's the Container Path. Container Path: => The path that will be used inside the container. Host Path: => The path on your Unraid Server (The Host).","title":"Setting up the containers"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#torrent-clients","text":"qBittorrent, Deluge, ruTorrent Container Path: => /data/torrents/ Host Path: => /mnt/user/data/torrents/ Info The reason why we use /data/torrents/ for the torrent client is because it only needs access to the torrent files. In the torrent software settings, you\u2019ll need to reconfigure paths and you can sort into sub-folders like /data/torrents/{tv|movies|music} . data \u2514\u2500\u2500 torrents \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv","title":"Torrent clients"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#usenet-clients","text":"NZBGet or SABnzbd Container Path: => /data/usenet/ Host Path: => /mnt/user/data/usenet/ Info The reason why we use /data/usenet/ for the usenet client is because it only needs access to the usenet files. In the usenet software settings, you\u2019ll need to reconfigure paths and you can sort into sub-folders like /data/usenet/{tv|movies|music} . data \u2514\u2500\u2500 usenet \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv","title":"Usenet clients"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#the-arrs","text":"Sonarr, Radarr and Lidarr Container Path: => /data Host Path: => /mnt/user/data/ Info Sonarr, Radarr and Lidarr gets access to everything because the download folder(s) and media folder will look like and be one file system. Hard links will work and moves will be atomic, instead of copy + delete. data \u251c\u2500\u2500 torrents \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u251c\u2500\u2500 usenet \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u2514\u2500\u2500 media \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv","title":"The arr(s)"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#media-server","text":"Plex, Emby, JellyFin and Bazarr Container Path: => /data/media Host Path: => /mnt/user/data/media/ Info Plex, Emby, JellyFin and Bazarr only needs access to your media library, which can have any number of sub folders like Movies, Kids Movies, TV, Documentary TV and/or Music as sub folders. data \u2514\u2500\u2500 media \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv","title":"Media Server"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#final-result","text":"Don't forget to look at the Examples how to setup the paths inside the containers. Synology","title":"Final Result"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#synology","text":"Note Being I don't have a Synology myself and I kind of hate the Synology GUI for the dockers, I'm doing this with the use of docker-compose. This works like 10x faster then the GUI and after adding it shows up in the GUI. Thnx to faxity for the initial compose that I used to create the Synology Guide. We need to get some information that we need later to setup the docker-compose file.","title":"Synology"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#puid-and-pgid","text":"In order for the Docker container to access the shares on the Synology, we need to give it the same permissions as your main user who has access to those shares. For this we need to figure out the PUID and the PGID of the user having access to your shares. You will need to SSH into your Synology. If you didn't already enable it you need to do that first Then use a program like Putty and SSH to your Synology. Login if you get a popup asking if you want to trust the key, Just press OK or ACCEPT Enter the login information of your main Synology user account. Once logged in type id . This will show your UID (aka PUID). Which in this screenshot is 1026 for the administrator and the GID (aka PGID) which is 100 for the users group. Remember these values for later use. Note Yes we know it's not recommended to use the admin account but if you already know this then you wouldn't need to read this ;)","title":"PUID and PGID"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#folder-structure_2","text":"Attention To get Hardlinks and Atomic-Moves working with your Synology you will need to make use of ONE share with subfolders. For this example we're going to make use of a share called data . On the host (Synology) you will need to add /volume1/ before it. So /volume1/data The data folder has sub-folders for torrents and usenet and each of these have sub-folders for tv , movie and music downloads to keep things neat. The media folder has nicely named TV , Movies and Music sub-folders, this is your library and what you\u2019d pass to Plex, Emby or JellyFin. These subfolders you need to create your self. I'm using lower case on all folder on purpose, being Linux is case sensitive. data \u251c\u2500\u2500 torrents \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u251c\u2500\u2500 usenet \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u2514\u2500\u2500 media \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv Breakdown of the Folder Structure","title":"Folder Structure"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#breakdown-of-the-folder-structure","text":"","title":"Breakdown of the Folder Structure"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#appdata","text":"Your appdata will be stored in /volume1/docker/appdata/{appname} These {appname} sub folders you need to create your self. ( This is a limitation of the Synology ) We're going to do this in Putty or a similar program. sudo mkdir /volume1/docker/appdata cd /volume1/docker/appdata sudo mkdir radarr sonarr bazarr plex tautulli So your appdata folder will look like this. ls -al /volume1/docker/appdata docker \u2514\u2500\u2500 appdata \u251c\u2500\u2500 radarr \u251c\u2500\u2500 sonarr \u251c\u2500\u2500 bazarr \u251c\u2500\u2500 plex \u2514\u2500\u2500 tautulli","title":"Appdata"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#needed-files","text":"First we will download the docker-compose.yml file Download this docker-compose.yml to your /volume1/docker/appdata location so you got your important stuff together. sudo wget https://raw.githubusercontent.com/TRaSH-/Guides-Synology-Templates/main/docker-compose/docker-compose.yml What's included and What's not included This docker-compose file will have the following docker containers included. Radarr Sonarr Bazarr (Subtitle searcher and downloaded) Plex Tautulli Watchtower (automatic docker container updater at 4am) What's not included. I didn't add a downloader to it because it depends on what you prefer usenet/torrents and which client you prefer, so i created a new Repository on Github where I provide and maintain some templates that you can find in the template folder ready to use with the main docker-compose.yml . The only thing you need to do is copy/paste what's inside the .yml file in to the main docker-compose.yml , the template also has the command what you need to use to create the appdata folder that we explained earlier. Second we will download the .env file Download this .env to your /volume1/docker/appdata location so you got your important stuff together. sudo wget https://raw.githubusercontent.com/TRaSH-/Guides-Synology-Templates/main/docker-compose/.env","title":"Needed files"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#changes-you-need-to-do","text":"The .env we downloaded holds the variables/information you need to change so everything works (I added also a description in the .env file) DOCKERCONFDIR (only change this if you know what you're doing and decide to use another path then in this guide used) DOCKERDATADIR (only change this if you know what you're doing and decide to use another path then in this guide used) PUID/PGID (this info you got earlier from HERE ) TZ (Change to your timezone) It holds more variables/information for other containers but they are described in the .env","title":"Changes you need to do"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#permissions","text":"Now we need to make sure that the newly created files and folders have the correct permissions. Note If you're using another user then admin then you need to change it in the commands below !!! sudo chown -R admin:users /volume1/data /volume1/docker sudo chmod -R a = ,a+rX,u+w,g+w /volume1/data /volume1/docker","title":"Permissions"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#run-the-docker-compose","text":"Important make sure you deleted/removed all your existing dockers from the GUI and also remove your native installs of these applications !!! When you did all the above steps you only need to type the following in your /volume1/docker/appdata cd /volume1/docker/appdata sudo docker-compose up -d You will notice that all the images will be downloaded, and after that the containers will be started. If you get a error then look at the error what it says and try to fix it. If you still got issues then put your used docker-compose.yml on pastebin and join the guides-discord here and provide the pastebin link with the error, have patience because of timezone differences. Don't forget to look at the Examples how to setup the paths inside the containers. Attention If you need to do any changes only edit the docker-compose.yml file and activate the changes when you type sudo docker-compose up -d again. Any changes you do/did in the GUI will be reverted when you run the docker-compose. Just don't use the GUI !!! docker-compose commands sudo docker-compose up -d (This Docker-compose command helps builds the image, then creates and starts Docker containers. The containers are from the services specified in the compose file. If the containers are already running and you run docker-compose up, it recreates the container.) sudo docker-compose pull (Pulls an image associated with a service defined in a docker-compose.yml) sudo docker-compose down (The Docker-compose down command also stops Docker containers like the stop command does. But it goes the extra mile. Docker-compose down, doesn\u2019t just stop the containers, it also removes them.) sudo docker system prune -a --volumes --force (Remove all unused containers, networks, images (both dangling and unreferenced), and optionally, volumes.) Docker","title":"Run the Docker Compose"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#docker","text":"Tip If you're new to dockers and want a easy setup I suggest to take a look at DockSTARTer . I've also created a short guide HERE where I explain the settings for the most used applications. The main goal of DockSTARTer is to make it quick and easy to get up and running with Docker. You may choose to rely on DockSTARTer for various changes to your Docker system or use DockSTARTer as a stepping stone and learn to do more advanced configurations. DockSTARTer was actually my first steps in to the world of dockers. Note I'm not going to explain how to get dockers installed and running, I will only explain which folder structure we recommend.","title":"Docker"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#folder-structure_3","text":"Attention It doesn't really matter which path you use for your media and appdata, the only thing you should avoid is /home . Because user folders in /home are expected to have some restrictive permissions. It just could end up creating a permissions mess, so it's better to just avoid entirely. For this example we're going to make use of a share called data . The data folder has sub-folders for torrents and usenet and each of these have sub-folders for tv , movie and music downloads to keep things neat. The media folder has nicely named TV , Movies and Music sub-folders, this is your library and what you\u2019d pass to Plex, Emby or JellyFin. In this examples I'm using lower case on all folder on purpose, being Linux is case sensitive. data \u251c\u2500\u2500 torrents \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u251c\u2500\u2500 usenet \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u2514\u2500\u2500 media \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv Breakdown of the Folder Structure","title":"Folder Structure"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#breakdown-of-the-folder-structure_1","text":"","title":"Breakdown of the Folder Structure"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#native","text":"Note I'm not going to explain how to install all the applications, I will only explain which folder structure we recommend.","title":"Native"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#folder-structure_4","text":"Attention It doesn't really matter which path you use for your media, the only thing you should avoid is /home . Because user folders in /home are expected to have some restrictive permissions. It just could end up creating a permissions mess, so it's better to just avoid entirely. For this example we're going to make use of a share called data . The data folder has sub-folders for torrents and usenet and each of these have sub-folders for tv , movie and music downloads to keep things neat. The media folder has nicely named TV , Movies and Music sub-folders, this is your library and what you\u2019d pass to Plex, Emby or JellyFin. I'm using lower case on all folder on purpose, being Linux is case sensitive. data \u251c\u2500\u2500 torrents \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u251c\u2500\u2500 usenet \u2502 \u251c\u2500\u2500 movies \u2502 \u251c\u2500\u2500 music \u2502 \u2514\u2500\u2500 tv \u2514\u2500\u2500 media \u251c\u2500\u2500 movies \u251c\u2500\u2500 music \u2514\u2500\u2500 tv Breakdown of the Folder Structure","title":"Folder Structure"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#breakdown-of-the-folder-structure_2","text":"","title":"Breakdown of the Folder Structure"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#permissions_1","text":"Recursively chown user and group and Recursively chmod to 775/664 sudo chown -R $USER : $USER /data sudo chmod -R a = ,a+rX,u+w,g+w /data Don't forget to look at the Examples how to setup the paths inside the containers.","title":"Permissions"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#examples","text":"Info Pick one path layout and use it for all of them. It doesn't matter if you prefer to use /data , /shared , /storage or whatever. The screenshots in the examples are using the following root path /data Sonarr Radarr SABnzbd NZBGet qBittorrent Deluge ruTorrent Sonarr Examples","title":"Examples"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#sonarr","text":"Settings => Media Management => Importing Settings => Media Management => Root Folders Series => Add New Radarr Examples","title":"Sonarr"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#radarr","text":"Settings => Media Management => Importing Settings => Media Management => Root Folders Movies => Add New SABnzbd Examples","title":"Radarr"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#sabnzbd","text":"SABnzbd config => Folders SABnzbd config => Categories NZBGet Examples","title":"SABnzbd"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#nzbget","text":"Settings => PATHS Settings => CATEGORIES qBittorrent Examples","title":"NZBGet"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#qbittorrent","text":"Options => Downloads Deluge Example","title":"qBittorrent"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#deluge","text":"Preferences => Downloads ruTorrent Examples","title":"Deluge"},{"location":"Misc/how-to-set-up-hardlinks-and-atomic-moves/#rutorrent","text":"../config/rtorrent/config/rtorrent.rc (path to your appdata) Settings => Downloads Settings => Autotools Big Thnx to fryfrog for his Docker Guide that I used as basis for this guide.","title":"ruTorrent"},{"location":"Misc/x265-4k/","text":"x265-4k \u00b6 x265 \u00b6 Quote x265 is good for for 4k stuff or 1080p if they used the the remuxes as source. If the media isn't source quality/remux, then there will be a loss of quality every time. Also, once you go x265, typically that file is done. It can't be changed to something else without a huge loss of quality. Something like 95% of video files are x264 and have much better direct play support. If you have more than a couple users, you will notice much more transcoding. Just depends on your priorities. So basically if you are storage poor and just need to save space, use x265. The catch is if you want best quality x265, you need source quality files, so you still have huge file sizes. If you want maximum compatibility and the option to change your files to something else later, then x264. It's all really dependent on specific situations for different people Microsized & Wrong Source \u00b6 It's a shame that most x265 groups microsize the releases or use the x264 as source what results in low quality releases. And the few groups that do use the correct source suffer from it. Golden Rule \u00b6 I created my own golden rule. 720/1080p => x264 2160p/4k => x265 How to accomplish the Golden Rule \u00b6 For Sonarr check HERE For Radarr check HERE Some extra info about 4K/X265 \u00b6 4k, transcoding, and you - aka the rules of 4k - a FAQ - Plex.tv Don\u2019t bother transcoding 4k If you cannot direct play 4k, then perhaps you should not even be collecting 4k. If you don\u2019t have the storage space for a copy of both 4k and 1080/720, then perhaps you should not even be collecting 4k. To avoid transcoding for remote and non-4k clients, keep your 4k content in separate plex libraries. This may of course mean that you keep a 4k copy and a 1080/720 copy, but if you are collecting 4k content then you should not be worried about storage space, should you?","title":"x265-4k"},{"location":"Misc/x265-4k/#x265-4k","text":"","title":"x265-4k"},{"location":"Misc/x265-4k/#x265","text":"Quote x265 is good for for 4k stuff or 1080p if they used the the remuxes as source. If the media isn't source quality/remux, then there will be a loss of quality every time. Also, once you go x265, typically that file is done. It can't be changed to something else without a huge loss of quality. Something like 95% of video files are x264 and have much better direct play support. If you have more than a couple users, you will notice much more transcoding. Just depends on your priorities. So basically if you are storage poor and just need to save space, use x265. The catch is if you want best quality x265, you need source quality files, so you still have huge file sizes. If you want maximum compatibility and the option to change your files to something else later, then x264. It's all really dependent on specific situations for different people","title":"x265"},{"location":"Misc/x265-4k/#microsized-wrong-source","text":"It's a shame that most x265 groups microsize the releases or use the x264 as source what results in low quality releases. And the few groups that do use the correct source suffer from it.","title":"Microsized &amp; Wrong Source"},{"location":"Misc/x265-4k/#golden-rule","text":"I created my own golden rule. 720/1080p => x264 2160p/4k => x265","title":"Golden Rule"},{"location":"Misc/x265-4k/#how-to-accomplish-the-golden-rule","text":"For Sonarr check HERE For Radarr check HERE","title":"How to accomplish the Golden Rule"},{"location":"Misc/x265-4k/#some-extra-info-about-4kx265","text":"4k, transcoding, and you - aka the rules of 4k - a FAQ - Plex.tv Don\u2019t bother transcoding 4k If you cannot direct play 4k, then perhaps you should not even be collecting 4k. If you don\u2019t have the storage space for a copy of both 4k and 1080/720, then perhaps you should not even be collecting 4k. To avoid transcoding for remote and non-4k clients, keep your 4k content in separate plex libraries. This may of course mean that you keep a 4k copy and a 1080/720 copy, but if you are collecting 4k content then you should not be worried about storage space, should you?","title":"Some extra info about 4K/X265"},{"location":"NZBGet/","text":"NZBGet \u00b6 Here you will find a basic setup-guide and scripts you can use with NZBGet.","title":"NZBGet"},{"location":"NZBGet/#nzbget","text":"Here you will find a basic setup-guide and scripts you can use with NZBGet.","title":"NZBGet"},{"location":"NZBGet/How-to-setup-NZBGet/","text":"Setup NZBGet to use with Sonarr/Radarr \u00b6 This basic example is based on the use of docker images Keep in mind I've setup my paths so it works with hardlinks and you get instant moves. The default path setup used by Linux|Server.io don't support hardlinks and instant moves, but you're able to change this, by not using the pre-defined paths like /downloads /movies and /tv and use paths like /data/downloads , /data/media/movies and /data/media/tv . Some Basics \u00b6 Name Description ${MainDir} Root directory for all tasks. ${AppDir} Where NZBGet is installed. ${DestDir} Destination directory for downloaded files. PATHS \u00b6 I will only explain the so called most important paths. Name Description MainDir /data/.usenet DestDir ${MainDir}/completed (so it will go in to /data/.usenet/completed ) InterDir Files are downloaded into this directory (before unpack+par2) NzbDir Directory for incoming nzb-files. QueueDir This directory is used to save download queue, history, information statistics, etc. ScriptDir Directory with post-processing and other scripts. LogFile Where your log files will be stored (Please create a log directory in your config) NEWS-SERVERS \u00b6 Name Description Active Use this news server. Name The name is used in UI and for logging. It can be any string. Level Put your major download servers at level 0 and your fill servers at levels 1, 2, etc.. Host Host name of news server. Port Port to connect to. Password Password to use for authentication. Encryption Encrypted server connection (TLS/SSL). (preferred to use this) Connections Use the lowest possible amount of connections +1 to gain your max download speed. Retention How long the articles are stored on the news server. CATEGORIES \u00b6 Name Description Name This should match what you put in Sonarr/Radarr (tv/movies/sonarr/radarr/series/films) DestDir ${DestDir} Destination directory (/data/.usenet/completed/movie) Unpack Unpack downloaded nzb-files. Extensions List of extension scripts for this category. INCOMING NZBS \u00b6 Warning AppendCategoryDir : Create subdirectory with category-name in destination-directory. DOWNLOAD QUEUE \u00b6 Warning WriteBuffer : If you're low on memory don't set this to high. LOGGING \u00b6 CHECK AND REPAIR \u00b6 UNPACK \u00b6 Warning DirectUnpack : This might lower your download speed but the overall time could be faster. (disable on low powered devices) EXTENSION SCRIPTS \u00b6 Depending if you're using some NZBGet script here you can change the order or when it should be used","title":"Setup NZBGet to use with Sonarr/Radarr"},{"location":"NZBGet/How-to-setup-NZBGet/#setup-nzbget-to-use-with-sonarrradarr","text":"This basic example is based on the use of docker images Keep in mind I've setup my paths so it works with hardlinks and you get instant moves. The default path setup used by Linux|Server.io don't support hardlinks and instant moves, but you're able to change this, by not using the pre-defined paths like /downloads /movies and /tv and use paths like /data/downloads , /data/media/movies and /data/media/tv .","title":"Setup NZBGet to use with Sonarr/Radarr"},{"location":"NZBGet/How-to-setup-NZBGet/#some-basics","text":"Name Description ${MainDir} Root directory for all tasks. ${AppDir} Where NZBGet is installed. ${DestDir} Destination directory for downloaded files.","title":"Some Basics"},{"location":"NZBGet/How-to-setup-NZBGet/#paths","text":"I will only explain the so called most important paths. Name Description MainDir /data/.usenet DestDir ${MainDir}/completed (so it will go in to /data/.usenet/completed ) InterDir Files are downloaded into this directory (before unpack+par2) NzbDir Directory for incoming nzb-files. QueueDir This directory is used to save download queue, history, information statistics, etc. ScriptDir Directory with post-processing and other scripts. LogFile Where your log files will be stored (Please create a log directory in your config)","title":"PATHS"},{"location":"NZBGet/How-to-setup-NZBGet/#news-servers","text":"Name Description Active Use this news server. Name The name is used in UI and for logging. It can be any string. Level Put your major download servers at level 0 and your fill servers at levels 1, 2, etc.. Host Host name of news server. Port Port to connect to. Password Password to use for authentication. Encryption Encrypted server connection (TLS/SSL). (preferred to use this) Connections Use the lowest possible amount of connections +1 to gain your max download speed. Retention How long the articles are stored on the news server.","title":"NEWS-SERVERS"},{"location":"NZBGet/How-to-setup-NZBGet/#categories","text":"Name Description Name This should match what you put in Sonarr/Radarr (tv/movies/sonarr/radarr/series/films) DestDir ${DestDir} Destination directory (/data/.usenet/completed/movie) Unpack Unpack downloaded nzb-files. Extensions List of extension scripts for this category.","title":"CATEGORIES"},{"location":"NZBGet/How-to-setup-NZBGet/#incoming-nzbs","text":"Warning AppendCategoryDir : Create subdirectory with category-name in destination-directory.","title":"INCOMING NZBS"},{"location":"NZBGet/How-to-setup-NZBGet/#download-queue","text":"Warning WriteBuffer : If you're low on memory don't set this to high.","title":"DOWNLOAD QUEUE"},{"location":"NZBGet/How-to-setup-NZBGet/#logging","text":"","title":"LOGGING"},{"location":"NZBGet/How-to-setup-NZBGet/#check-and-repair","text":"","title":"CHECK AND REPAIR"},{"location":"NZBGet/How-to-setup-NZBGet/#unpack","text":"Warning DirectUnpack : This might lower your download speed but the overall time could be faster. (disable on low powered devices)","title":"UNPACK"},{"location":"NZBGet/How-to-setup-NZBGet/#extension-scripts","text":"Depending if you're using some NZBGet script here you can change the order or when it should be used","title":"EXTENSION SCRIPTS"},{"location":"NZBGet/scripts/","text":"Scripts you can use with NZBGet \u00b6 Clean \u00b6 Cleans the NZB name by removing the retagged stuff (-Obfuscated, -postbox, etc). Script #!/usr/bin/env python3 # ############################################################################## ### NZBGET SCAN SCRIPT ### # Clean NZB name. # # Removes the following suffixes from NZB name: # NZBgeek / Obfuscated / BUYMORE / Scrambled. # # NOTE: This script requires Python to be installed on your system. ### NZBGET SCAN SCRIPT ### ############################################################################## from __future__ import print_function import os , re , sys # Exit codes used by NZBGet POSTPROCESS_SUCCESS = 93 POSTPROCESS_ERROR = 94 POSTPROCESS_SKIP = 95 # Check if the script is called from NZBGet 13.0 or later if not 'NZBOP_SCRIPTDIR' in os . environ : print ( '*** NZBGet post-processing script ***' ) print ( 'This script is supposed to be called from NZBGet (13.0 or later).' ) sys . exit ( POSTPROCESS_ERROR ) if not 'NZBNP_NZBNAME' in os . environ : print ( '[WARN] Filename not found in environment' ) sys . exit ( POSTPROCESS_ERROR ) fwp = os . environ [ 'NZBNP_NZBNAME' ] fwp = re . sub ( '(?i)-4P\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-4Planet\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-AsRequested\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-AsRequested-xpost\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-BUYMORE\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-Chamele0n\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-GEROV\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-iNC0GNiTO\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-NZBGeek\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-Obfuscated\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-postbot\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-Rakuv\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-Scrambled\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-WhiteRev\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-xpost\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)\\[eztv\\]\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)\\[TGx\\]\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)\\[TGx\\]-xpost\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)\\[ettv\\]\\.nzb$' , '.nzb' , fwp ) if fwp : print ( '[NZB] NZBNAME=' , fwp , sep = '' ) sys . exit ( POSTPROCESS_SUCCESS ) HashRenamer \u00b6 Renames hashed media files to match the source NZB. Script #!/usr/bin/env python3 # ############################################################################## # Title: HashRenamer.py # # Author(s): l3uddz, desimaniac # # URL: https://github.com/l3uddz/nzbgetScripts # # Description: Renames hashed media files to match the source NZB. # # -- # # Part of the Cloudbox project: https://cloudbox.works # ############################################################################## ############################################################################## # Built on top of the NZBGet scripts template created by Clinton Hall # # (https://github.com/clinton-hall). # # Released under GNU General Public License v2.0 # ############################################################################## ############################################################################## ### NZBGET POST-PROCESSING SCRIPT ### # Rename files with hashes for file name # # NOTE: This script requires Python to be installed on your system. # ############################################################################## ### NZBGET POST-PROCESSING SCRIPT ### ############################################################################## import os import re import shutil import sys # NZBGet Exit Codes NZBGET_POSTPROCESS_PARCHECK = 92 NZBGET_POSTPROCESS_SUCCESS = 93 NZBGET_POSTPROCESS_ERROR = 94 NZBGET_POSTPROCESS_NONE = 95 ############################################################ # EXTENSION STUFF ############################################################ def do_check (): if 'NZBOP_SCRIPTDIR' not in os . environ : print ( \"This script can only be called from NZBGet (11.0 or later).\" ) sys . exit ( 0 ) if os . environ [ 'NZBOP_VERSION' ][ 0 : 5 ] < '11.0' : print ( \"[ERROR] NZBGet Version %s is not supported. Please update NZBGet.\" % ( str ( os . environ [ 'NZBOP_VERSION' ]))) sys . exit ( 0 ) print ( \"Script triggered from NZBGet Version %s .\" % ( str ( os . environ [ 'NZBOP_VERSION' ]))) status = 0 if 'NZBPP_TOTALSTATUS' in os . environ : if not os . environ [ 'NZBPP_TOTALSTATUS' ] == 'SUCCESS' : print ( \"[ERROR] Download failed with status %s .\" % ( os . environ [ 'NZBPP_STATUS' ])) status = 1 else : # Check par status if os . environ [ 'NZBPP_PARSTATUS' ] == '1' or os . environ [ 'NZBPP_PARSTATUS' ] == '4' : print ( \"[ERROR] Par-repair failed, setting status \\\" failed \\\" .\" ) status = 1 # Check unpack status if os . environ [ 'NZBPP_UNPACKSTATUS' ] == '1' : print ( \"[ERROR] Unpack failed, setting status \\\" failed \\\" .\" ) status = 1 if os . environ [ 'NZBPP_UNPACKSTATUS' ] == '0' and os . environ [ 'NZBPP_PARSTATUS' ] == '0' : # Unpack was skipped due to nzb-file properties or due to errors during par-check if os . environ [ 'NZBPP_HEALTH' ] < 1000 : print ( \"[ERROR] Download health is compromised and Par-check/repair disabled or no .par2 files found. \" \\ \"Setting status \\\" failed \\\" .\" ) print ( \"[ERROR] Please check your Par-check/repair settings for future downloads.\" ) status = 1 else : print ( \"[ERROR] Par-check/repair disabled or no .par2 files found, and Unpack not required. Health is \" \\ \"ok so handle as though download successful.\" ) print ( \"[WARNING] Please check your Par-check/repair settings for future downloads.\" ) # Check if destination directory exists (important for reprocessing of history items) if not os . path . isdir ( os . environ [ 'NZBPP_DIRECTORY' ]): print ( \"[ERROR] Nothing to post-process: destination directory\" , os . environ [ 'NZBPP_DIRECTORY' ], \"doesn't exist. Setting status \\\" failed \\\" .\" ) status = 1 # All checks done, now launching the script. if status == 1 : sys . exit ( NZBGET_POSTPROCESS_NONE ) def get_file_name ( path ): try : file_name = os . path . basename ( path ) extensions = re . findall ( r '\\.([^.]+)' , file_name ) ext = '.' . join ( extensions ) name = file_name . replace ( \". %s \" % ext , '' ) return name , ext except Exception : pass return None def is_file_hash ( file_name ): hash_regexp = [ r '^[a-fA-F0-9] {40} $' , r '^[a-fA-F0-9] {32} $' , r '^[a-f0-9] {128} $' , r '^[a-zA-Z0-9] {42} $' ] for hash in hash_regexp : if re . match ( hash , file_name ): return True return False def find_files ( folder , extension = None , depth = None ): file_list = [] start_count = folder . count ( os . sep ) for path , subdirs , files in os . walk ( folder , topdown = True ): for name in files : if depth and path . count ( os . sep ) - start_count >= depth : del subdirs [:] continue file = os . path . join ( path , name ) if not extension : file_list . append ( file ) else : if file . lower () . endswith ( extension . lower ()): file_list . append ( file ) return sorted ( file_list , key = lambda x : x . count ( os . path . sep ), reverse = True ) ############################################################ # MAIN ############################################################ # do checks do_check () # retrieve required variables directory = os . path . normpath ( os . environ [ 'NZBPP_DIRECTORY' ]) nzb_name = os . environ [ 'NZBPP_NZBFILENAME' ] if nzb_name is None : print ( \"[ERROR] Unable to retrieve NZBPP_NZBFILENAME\" ) sys . exit ( NZBGET_POSTPROCESS_ERROR ) nzb_name = nzb_name . replace ( '.nzb' , '' ) print (( \"[INFO] Using \\\" %s \\\" for hashed filenames\" % nzb_name )) print (( \"[INFO] Scanning \\\" %s \\\" for hashed filenames\" % directory )) # scan for files found_files = find_files ( directory ) if not found_files : print (( \"[INFO] No files were found in \\\" %s \\\" \" % directory )) sys . exit ( NZBGET_POSTPROCESS_NONE ) else : print (( \"[INFO] Found %d files to check for hashed filenames\" % len ( found_files ))) # loop files checking for file hash moved_files = 0 for found_file_path in found_files : # set variable dir_name = os . path . dirname ( found_file_path ) file_name , file_ext = get_file_name ( found_file_path ) # is this a file hash if is_file_hash ( file_name ): new_file_path = os . path . join ( dir_name , \" %s . %s \" % ( nzb_name , file_ext )) print (( \"[INFO] Moving \\\" %s \\\" to \\\" %s \\\" \" % ( found_file_path , new_file_path ))) try : shutil . move ( found_file_path , new_file_path ) moved_files += 1 except Exception : print (( \"[ERROR] Failed moving \\\" %s \\\" to \\\" %s \\\" \" % ( found_file_path , new_file_path ))) print (( \"[INFO] Finished processing \\\" %s \\\" , moved %d files\" % ( directory , moved_files ))) sys . exit ( NZBGET_POSTPROCESS_SUCCESS ) WtFnZb-Renamer \u00b6 This extensions extracts obfuscated filenames from .nzb files Script #!/usr/bin/env python3 ### NZBGET SCAN SCRIPT # Extract filenames from subjects containing [PRiVATE]-[WtFnZb] # # This extensions extracts obfuscated filenames from .nzb files # created by WtFnZb. # # Supported subject formats: # # - [PRiVATE]-[WtFnZb]-[filename]-[1/5] - \"\" yEnc 0 (1/1)\" # # - [PRiVATE]-[WtFnZb]-[5]-[1/filename] - \"\" yEnc # # # NOTE: Requires Python and lxml (sudo apt install python3-lxml python-lxml) # ### NZBGET SCAN SCRIPT import sys import os import re # Exit codes used by NZBGet POSTPROCESS_SUCCESS = 93 POSTPROCESS_NONE = 95 POSTPROCESS_ERROR = 94 try : from lxml import etree except ImportError : print ( u '[ERROR] Python lxml required. Please install with \"sudo apt install python-lxml\" or \"pip install lxml\".' ) sys . exit ( POSTPROCESS_ERROR ) patterns = ( re . compile ( r '^(?P<prefix>.*\\[PRiVATE\\]-\\[WtFnZb\\]-)' r '\\[(?P<total>\\d+)\\]-\\[(?P<segment>\\d+)\\/(?P<filename>.{3,}?)\\]' r '\\s+-\\s+\"\"\\s+yEnc\\s+' , re . MULTILINE | re . UNICODE ), re . compile ( r '^(?P<prefix>.*\\[PRiVATE\\]-\\[WtFnZb\\]-)' r '\\[(?P<filename>.{3,}?)\\]-\\[(?P<segment>\\d+)/(?P<total>\\d+)\\]' r '\\s+-\\s+\"\"\\s+yEnc\\s+' , re . MULTILINE | re . UNICODE )) nzb_dir = os . getenv ( 'NZBNP_DIRECTORY' ) nzb_filename = os . getenv ( 'NZBNP_FILENAME' ) nzb_name = os . getenv ( 'NZBNP_NZBNAME' ) nzb_file_naming = os . getenv ( 'NZBOP_FILENAMING' ) if nzb_dir is None or nzb_filename is None or nzb_name is None : print ( 'Please run as NZBGet plugin' ) sys . exit ( POSTPROCESS_ERROR ) if nzb_file_naming is not None and nzb_file_naming . lower () != 'nzb' : print ( u '[ERROR] NZBGet setting FileNaming (under Download Queue) ' u 'must be set to \"Nzb\" for this extension to work correctly, exiting.' ) sys . exit ( POSTPROCESS_ERROR ) if not os . path . exists ( nzb_dir ): print ( '[ERROR] NZB directory doesn \\' t exist, exiting' ) sys . exit ( POSTPROCESS_ERROR ) if not nzb_filename . lower () . endswith ( '.nzb' ): print ( u '[ERROR] {} is not a .nzb file.' . format ( nzb_filename )) sys . exit ( POSTPROCESS_ERROR ) nzb = os . path . join ( nzb_dir , nzb_filename ) if not os . path . exists ( nzb ): print ( '[ERROR] {nzb} doesn \\' t exist, exiting' . format ( nzb = nzb )) sys . exit ( POSTPROCESS_ERROR ) with open ( nzb , mode = 'rb' ) as infile : tree = etree . parse ( infile ) changed = False file_count = 0 totals = set () filenames = set () for f in tree . getiterator ( '{http://www.newzbin.com/DTD/2003/nzb}file' ): subject = f . get ( 'subject' ) if subject is None : print ( u '[DETAIL] No subject in <file>, skipping' ) continue file_count += 1 result = [ re . match ( pattern , subject ) for pattern in patterns ] matched = [ m for m in result if m is not None ] if len ( matched ) == 0 : print ( u '[INFO] No pattern matching subject, exiting.' ) sys . exit ( POSTPROCESS_NONE ) elif len ( matched ) > 1 : print ( u '[ERROR] Multiple patterns matched, exiting.' ) sys . exit ( POSTPROCESS_ERROR ) else : match = matched [ 0 ] . groupdict () if match [ 'filename' ] . lower () . endswith ( '.par2' ): print ( u '[INFO] par2 exists, exiting' ) sys . exit ( POSTPROCESS_NONE ) if int ( match [ 'segment' ]) > int ( match [ 'total' ]): print ( u '[DETAIL] Segment index is greater then total, skipping' ) continue # NZBGet subject parsing changes when duplicate filenames are present # prefix duplicates to avoid that if match [ 'filename' ] in filenames : match [ 'filename' ] = u ' {} . {} ' . format ( file_count , match [ 'filename' ]) filenames . add ( match [ 'filename' ]) s = u 'WtFnZb \" {filename} \" yEnc ( {segment} / {total} )' . format ( filename = match [ 'filename' ], segment = match [ 'segment' ], total = match [ 'total' ]) print ( u '[INFO] New subject {subject} ' . format ( subject = s . encode ( 'ascii' , 'ignore' ))) f . set ( 'subject' , s ) changed = True totals . add ( int ( match [ 'total' ])) if not changed : print ( u '[WARNING] No subject changed, exiting.' ) sys . exit ( POSTPROCESS_NONE ) if len ( totals ) != 1 : print ( u '[WARNING] Mixed values for number of total segments, exiting.' ) sys . exit ( POSTPROCESS_NONE ) if totals . pop () != file_count : print ( u '[WARNING] Listed segment count does not match <file> count, exiting.' ) sys . exit ( POSTPROCESS_NONE ) org = u ' {} .wtfnzb.original.processed' . format ( nzb ) exists_counter = 0 while os . path . exists ( org ): exists_counter += 1 org = u ' {} . {} .wtfnzb.original.processed' . format ( nzb , exists_counter ) print ( u '[INFO] Preserving original nzb as {} ' . format ( org )) os . rename ( nzb , org ) print ( u '[INFO] Writing {} ' . format ( nzb )) with open ( nzb , mode = 'wb' ) as outfile : outfile . write ( etree . tostring ( tree , xml_declaration = True , encoding = tree . docinfo . encoding , doctype = tree . docinfo . doctype )) sys . exit ( POSTPROCESS_SUCCESS )","title":"Scripts you can use with NZBGet"},{"location":"NZBGet/scripts/#scripts-you-can-use-with-nzbget","text":"","title":"Scripts you can use with NZBGet"},{"location":"NZBGet/scripts/#clean","text":"Cleans the NZB name by removing the retagged stuff (-Obfuscated, -postbox, etc). Script #!/usr/bin/env python3 # ############################################################################## ### NZBGET SCAN SCRIPT ### # Clean NZB name. # # Removes the following suffixes from NZB name: # NZBgeek / Obfuscated / BUYMORE / Scrambled. # # NOTE: This script requires Python to be installed on your system. ### NZBGET SCAN SCRIPT ### ############################################################################## from __future__ import print_function import os , re , sys # Exit codes used by NZBGet POSTPROCESS_SUCCESS = 93 POSTPROCESS_ERROR = 94 POSTPROCESS_SKIP = 95 # Check if the script is called from NZBGet 13.0 or later if not 'NZBOP_SCRIPTDIR' in os . environ : print ( '*** NZBGet post-processing script ***' ) print ( 'This script is supposed to be called from NZBGet (13.0 or later).' ) sys . exit ( POSTPROCESS_ERROR ) if not 'NZBNP_NZBNAME' in os . environ : print ( '[WARN] Filename not found in environment' ) sys . exit ( POSTPROCESS_ERROR ) fwp = os . environ [ 'NZBNP_NZBNAME' ] fwp = re . sub ( '(?i)-4P\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-4Planet\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-AsRequested\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-AsRequested-xpost\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-BUYMORE\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-Chamele0n\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-GEROV\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-iNC0GNiTO\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-NZBGeek\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-Obfuscated\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-postbot\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-Rakuv\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-Scrambled\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-WhiteRev\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)-xpost\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)\\[eztv\\]\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)\\[TGx\\]\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)\\[TGx\\]-xpost\\.nzb$' , '.nzb' , fwp ) fwp = re . sub ( '(?i)\\[ettv\\]\\.nzb$' , '.nzb' , fwp ) if fwp : print ( '[NZB] NZBNAME=' , fwp , sep = '' ) sys . exit ( POSTPROCESS_SUCCESS )","title":"Clean"},{"location":"NZBGet/scripts/#hashrenamer","text":"Renames hashed media files to match the source NZB. Script #!/usr/bin/env python3 # ############################################################################## # Title: HashRenamer.py # # Author(s): l3uddz, desimaniac # # URL: https://github.com/l3uddz/nzbgetScripts # # Description: Renames hashed media files to match the source NZB. # # -- # # Part of the Cloudbox project: https://cloudbox.works # ############################################################################## ############################################################################## # Built on top of the NZBGet scripts template created by Clinton Hall # # (https://github.com/clinton-hall). # # Released under GNU General Public License v2.0 # ############################################################################## ############################################################################## ### NZBGET POST-PROCESSING SCRIPT ### # Rename files with hashes for file name # # NOTE: This script requires Python to be installed on your system. # ############################################################################## ### NZBGET POST-PROCESSING SCRIPT ### ############################################################################## import os import re import shutil import sys # NZBGet Exit Codes NZBGET_POSTPROCESS_PARCHECK = 92 NZBGET_POSTPROCESS_SUCCESS = 93 NZBGET_POSTPROCESS_ERROR = 94 NZBGET_POSTPROCESS_NONE = 95 ############################################################ # EXTENSION STUFF ############################################################ def do_check (): if 'NZBOP_SCRIPTDIR' not in os . environ : print ( \"This script can only be called from NZBGet (11.0 or later).\" ) sys . exit ( 0 ) if os . environ [ 'NZBOP_VERSION' ][ 0 : 5 ] < '11.0' : print ( \"[ERROR] NZBGet Version %s is not supported. Please update NZBGet.\" % ( str ( os . environ [ 'NZBOP_VERSION' ]))) sys . exit ( 0 ) print ( \"Script triggered from NZBGet Version %s .\" % ( str ( os . environ [ 'NZBOP_VERSION' ]))) status = 0 if 'NZBPP_TOTALSTATUS' in os . environ : if not os . environ [ 'NZBPP_TOTALSTATUS' ] == 'SUCCESS' : print ( \"[ERROR] Download failed with status %s .\" % ( os . environ [ 'NZBPP_STATUS' ])) status = 1 else : # Check par status if os . environ [ 'NZBPP_PARSTATUS' ] == '1' or os . environ [ 'NZBPP_PARSTATUS' ] == '4' : print ( \"[ERROR] Par-repair failed, setting status \\\" failed \\\" .\" ) status = 1 # Check unpack status if os . environ [ 'NZBPP_UNPACKSTATUS' ] == '1' : print ( \"[ERROR] Unpack failed, setting status \\\" failed \\\" .\" ) status = 1 if os . environ [ 'NZBPP_UNPACKSTATUS' ] == '0' and os . environ [ 'NZBPP_PARSTATUS' ] == '0' : # Unpack was skipped due to nzb-file properties or due to errors during par-check if os . environ [ 'NZBPP_HEALTH' ] < 1000 : print ( \"[ERROR] Download health is compromised and Par-check/repair disabled or no .par2 files found. \" \\ \"Setting status \\\" failed \\\" .\" ) print ( \"[ERROR] Please check your Par-check/repair settings for future downloads.\" ) status = 1 else : print ( \"[ERROR] Par-check/repair disabled or no .par2 files found, and Unpack not required. Health is \" \\ \"ok so handle as though download successful.\" ) print ( \"[WARNING] Please check your Par-check/repair settings for future downloads.\" ) # Check if destination directory exists (important for reprocessing of history items) if not os . path . isdir ( os . environ [ 'NZBPP_DIRECTORY' ]): print ( \"[ERROR] Nothing to post-process: destination directory\" , os . environ [ 'NZBPP_DIRECTORY' ], \"doesn't exist. Setting status \\\" failed \\\" .\" ) status = 1 # All checks done, now launching the script. if status == 1 : sys . exit ( NZBGET_POSTPROCESS_NONE ) def get_file_name ( path ): try : file_name = os . path . basename ( path ) extensions = re . findall ( r '\\.([^.]+)' , file_name ) ext = '.' . join ( extensions ) name = file_name . replace ( \". %s \" % ext , '' ) return name , ext except Exception : pass return None def is_file_hash ( file_name ): hash_regexp = [ r '^[a-fA-F0-9] {40} $' , r '^[a-fA-F0-9] {32} $' , r '^[a-f0-9] {128} $' , r '^[a-zA-Z0-9] {42} $' ] for hash in hash_regexp : if re . match ( hash , file_name ): return True return False def find_files ( folder , extension = None , depth = None ): file_list = [] start_count = folder . count ( os . sep ) for path , subdirs , files in os . walk ( folder , topdown = True ): for name in files : if depth and path . count ( os . sep ) - start_count >= depth : del subdirs [:] continue file = os . path . join ( path , name ) if not extension : file_list . append ( file ) else : if file . lower () . endswith ( extension . lower ()): file_list . append ( file ) return sorted ( file_list , key = lambda x : x . count ( os . path . sep ), reverse = True ) ############################################################ # MAIN ############################################################ # do checks do_check () # retrieve required variables directory = os . path . normpath ( os . environ [ 'NZBPP_DIRECTORY' ]) nzb_name = os . environ [ 'NZBPP_NZBFILENAME' ] if nzb_name is None : print ( \"[ERROR] Unable to retrieve NZBPP_NZBFILENAME\" ) sys . exit ( NZBGET_POSTPROCESS_ERROR ) nzb_name = nzb_name . replace ( '.nzb' , '' ) print (( \"[INFO] Using \\\" %s \\\" for hashed filenames\" % nzb_name )) print (( \"[INFO] Scanning \\\" %s \\\" for hashed filenames\" % directory )) # scan for files found_files = find_files ( directory ) if not found_files : print (( \"[INFO] No files were found in \\\" %s \\\" \" % directory )) sys . exit ( NZBGET_POSTPROCESS_NONE ) else : print (( \"[INFO] Found %d files to check for hashed filenames\" % len ( found_files ))) # loop files checking for file hash moved_files = 0 for found_file_path in found_files : # set variable dir_name = os . path . dirname ( found_file_path ) file_name , file_ext = get_file_name ( found_file_path ) # is this a file hash if is_file_hash ( file_name ): new_file_path = os . path . join ( dir_name , \" %s . %s \" % ( nzb_name , file_ext )) print (( \"[INFO] Moving \\\" %s \\\" to \\\" %s \\\" \" % ( found_file_path , new_file_path ))) try : shutil . move ( found_file_path , new_file_path ) moved_files += 1 except Exception : print (( \"[ERROR] Failed moving \\\" %s \\\" to \\\" %s \\\" \" % ( found_file_path , new_file_path ))) print (( \"[INFO] Finished processing \\\" %s \\\" , moved %d files\" % ( directory , moved_files ))) sys . exit ( NZBGET_POSTPROCESS_SUCCESS )","title":"HashRenamer"},{"location":"NZBGet/scripts/#wtfnzb-renamer","text":"This extensions extracts obfuscated filenames from .nzb files Script #!/usr/bin/env python3 ### NZBGET SCAN SCRIPT # Extract filenames from subjects containing [PRiVATE]-[WtFnZb] # # This extensions extracts obfuscated filenames from .nzb files # created by WtFnZb. # # Supported subject formats: # # - [PRiVATE]-[WtFnZb]-[filename]-[1/5] - \"\" yEnc 0 (1/1)\" # # - [PRiVATE]-[WtFnZb]-[5]-[1/filename] - \"\" yEnc # # # NOTE: Requires Python and lxml (sudo apt install python3-lxml python-lxml) # ### NZBGET SCAN SCRIPT import sys import os import re # Exit codes used by NZBGet POSTPROCESS_SUCCESS = 93 POSTPROCESS_NONE = 95 POSTPROCESS_ERROR = 94 try : from lxml import etree except ImportError : print ( u '[ERROR] Python lxml required. Please install with \"sudo apt install python-lxml\" or \"pip install lxml\".' ) sys . exit ( POSTPROCESS_ERROR ) patterns = ( re . compile ( r '^(?P<prefix>.*\\[PRiVATE\\]-\\[WtFnZb\\]-)' r '\\[(?P<total>\\d+)\\]-\\[(?P<segment>\\d+)\\/(?P<filename>.{3,}?)\\]' r '\\s+-\\s+\"\"\\s+yEnc\\s+' , re . MULTILINE | re . UNICODE ), re . compile ( r '^(?P<prefix>.*\\[PRiVATE\\]-\\[WtFnZb\\]-)' r '\\[(?P<filename>.{3,}?)\\]-\\[(?P<segment>\\d+)/(?P<total>\\d+)\\]' r '\\s+-\\s+\"\"\\s+yEnc\\s+' , re . MULTILINE | re . UNICODE )) nzb_dir = os . getenv ( 'NZBNP_DIRECTORY' ) nzb_filename = os . getenv ( 'NZBNP_FILENAME' ) nzb_name = os . getenv ( 'NZBNP_NZBNAME' ) nzb_file_naming = os . getenv ( 'NZBOP_FILENAMING' ) if nzb_dir is None or nzb_filename is None or nzb_name is None : print ( 'Please run as NZBGet plugin' ) sys . exit ( POSTPROCESS_ERROR ) if nzb_file_naming is not None and nzb_file_naming . lower () != 'nzb' : print ( u '[ERROR] NZBGet setting FileNaming (under Download Queue) ' u 'must be set to \"Nzb\" for this extension to work correctly, exiting.' ) sys . exit ( POSTPROCESS_ERROR ) if not os . path . exists ( nzb_dir ): print ( '[ERROR] NZB directory doesn \\' t exist, exiting' ) sys . exit ( POSTPROCESS_ERROR ) if not nzb_filename . lower () . endswith ( '.nzb' ): print ( u '[ERROR] {} is not a .nzb file.' . format ( nzb_filename )) sys . exit ( POSTPROCESS_ERROR ) nzb = os . path . join ( nzb_dir , nzb_filename ) if not os . path . exists ( nzb ): print ( '[ERROR] {nzb} doesn \\' t exist, exiting' . format ( nzb = nzb )) sys . exit ( POSTPROCESS_ERROR ) with open ( nzb , mode = 'rb' ) as infile : tree = etree . parse ( infile ) changed = False file_count = 0 totals = set () filenames = set () for f in tree . getiterator ( '{http://www.newzbin.com/DTD/2003/nzb}file' ): subject = f . get ( 'subject' ) if subject is None : print ( u '[DETAIL] No subject in <file>, skipping' ) continue file_count += 1 result = [ re . match ( pattern , subject ) for pattern in patterns ] matched = [ m for m in result if m is not None ] if len ( matched ) == 0 : print ( u '[INFO] No pattern matching subject, exiting.' ) sys . exit ( POSTPROCESS_NONE ) elif len ( matched ) > 1 : print ( u '[ERROR] Multiple patterns matched, exiting.' ) sys . exit ( POSTPROCESS_ERROR ) else : match = matched [ 0 ] . groupdict () if match [ 'filename' ] . lower () . endswith ( '.par2' ): print ( u '[INFO] par2 exists, exiting' ) sys . exit ( POSTPROCESS_NONE ) if int ( match [ 'segment' ]) > int ( match [ 'total' ]): print ( u '[DETAIL] Segment index is greater then total, skipping' ) continue # NZBGet subject parsing changes when duplicate filenames are present # prefix duplicates to avoid that if match [ 'filename' ] in filenames : match [ 'filename' ] = u ' {} . {} ' . format ( file_count , match [ 'filename' ]) filenames . add ( match [ 'filename' ]) s = u 'WtFnZb \" {filename} \" yEnc ( {segment} / {total} )' . format ( filename = match [ 'filename' ], segment = match [ 'segment' ], total = match [ 'total' ]) print ( u '[INFO] New subject {subject} ' . format ( subject = s . encode ( 'ascii' , 'ignore' ))) f . set ( 'subject' , s ) changed = True totals . add ( int ( match [ 'total' ])) if not changed : print ( u '[WARNING] No subject changed, exiting.' ) sys . exit ( POSTPROCESS_NONE ) if len ( totals ) != 1 : print ( u '[WARNING] Mixed values for number of total segments, exiting.' ) sys . exit ( POSTPROCESS_NONE ) if totals . pop () != file_count : print ( u '[WARNING] Listed segment count does not match <file> count, exiting.' ) sys . exit ( POSTPROCESS_NONE ) org = u ' {} .wtfnzb.original.processed' . format ( nzb ) exists_counter = 0 while os . path . exists ( org ): exists_counter += 1 org = u ' {} . {} .wtfnzb.original.processed' . format ( nzb , exists_counter ) print ( u '[INFO] Preserving original nzb as {} ' . format ( org )) os . rename ( nzb , org ) print ( u '[INFO] Writing {} ' . format ( nzb )) with open ( nzb , mode = 'wb' ) as outfile : outfile . write ( etree . tostring ( tree , xml_declaration = True , encoding = tree . docinfo . encoding , doctype = tree . docinfo . doctype )) sys . exit ( POSTPROCESS_SUCCESS )","title":"WtFnZb-Renamer"},{"location":"NZBGet/scripts/Clean/","text":"Clean \u00b6 Title: Clean.py | Author(s): ??? Description: Clean NZB name \u00b6 Removes the following suffixes from NZB name: NZBgeek / Obfuscated / BUYMORE / Scrambled /etc...","title":"Clean"},{"location":"NZBGet/scripts/Clean/#clean","text":"Title: Clean.py | Author(s): ???","title":"Clean"},{"location":"NZBGet/scripts/Clean/#description-clean-nzb-name","text":"Removes the following suffixes from NZB name: NZBgeek / Obfuscated / BUYMORE / Scrambled /etc...","title":"Description: Clean NZB name"},{"location":"NZBGet/scripts/HashRenamer/","text":"HashRenamer \u00b6 Title: HashRenamer.py | Author(s): l3uddz | URL: github.com/cloudbox/cloudbox Description: Renames hashed media files to match the source NZB \u00b6 Part of the Cloudbox project: https://cloudbox.works Built on top of the NZBGet scripts template created by Clinton Hall . Released under GNU General Public License v2.0","title":"HashRenamer"},{"location":"NZBGet/scripts/HashRenamer/#hashrenamer","text":"Title: HashRenamer.py | Author(s): l3uddz | URL: github.com/cloudbox/cloudbox","title":"HashRenamer"},{"location":"NZBGet/scripts/HashRenamer/#description-renames-hashed-media-files-to-match-the-source-nzb","text":"Part of the Cloudbox project: https://cloudbox.works Built on top of the NZBGet scripts template created by Clinton Hall . Released under GNU General Public License v2.0","title":"Description:   Renames hashed media files to match the source NZB"},{"location":"NZBGet/scripts/WtFnZb-Renamer/","text":"WtFnZb-Renamer \u00b6 Title: WtFnZb-Renamer.py | Author(s): WtFnZb | URL: ?? Renames hashed media files to match the source NZB \u00b6 NZBGET SCAN SCRIPT Extract filenames from subjects containing [PRiVATE]-[WtFnZb] This extensions extracts obfuscated filenames from .nzb files","title":"WtFnZb-Renamer"},{"location":"NZBGet/scripts/WtFnZb-Renamer/#wtfnzb-renamer","text":"Title: WtFnZb-Renamer.py | Author(s): WtFnZb | URL: ??","title":"WtFnZb-Renamer"},{"location":"NZBGet/scripts/WtFnZb-Renamer/#renames-hashed-media-files-to-match-the-source-nzb","text":"NZBGET SCAN SCRIPT Extract filenames from subjects containing [PRiVATE]-[WtFnZb] This extensions extracts obfuscated filenames from .nzb files","title":"Renames hashed media files to match the source NZB"},{"location":"Plex/","text":"Plex \u00b6 Here I will add some scripts/profiles/tips for plex Profiles are used if Plex has issues direct playing your media on your devices, these profiles could help.","title":"Plex"},{"location":"Plex/#plex","text":"Here I will add some scripts/profiles/tips for plex Profiles are used if Plex has issues direct playing your media on your devices, these profiles could help.","title":"Plex"},{"location":"Plex/Profiles/","text":"Here you will find a collection of Profile's for Plex \u00b6 Sometimes Plex will have issues direct playing your media on your devices, these profiles could help. if you got some to share, pls make a PR so we can collect them at one place How to \u00b6 To make use of the profiles you need to add it in your your plex folder Docker \u00b6 Example paths: Hotio's container: /appdata/plex/app/Plex Media Server/Profiles LSIO container: /appdata/plex/will/follow/soon Profiles \u00b6 Device Description Android-SHIELD Profile for the Android-SHIELD Chromecast Profile for the Chromecast","title":"Here you will find a collection of Profile's for Plex"},{"location":"Plex/Profiles/#here-you-will-find-a-collection-of-profiles-for-plex","text":"Sometimes Plex will have issues direct playing your media on your devices, these profiles could help. if you got some to share, pls make a PR so we can collect them at one place","title":"Here you will find a collection of Profile's for Plex"},{"location":"Plex/Profiles/#how-to","text":"To make use of the profiles you need to add it in your your plex folder","title":"How to"},{"location":"Plex/Profiles/#docker","text":"Example paths: Hotio's container: /appdata/plex/app/Plex Media Server/Profiles LSIO container: /appdata/plex/will/follow/soon","title":"Docker"},{"location":"Plex/Profiles/#profiles","text":"Device Description Android-SHIELD Profile for the Android-SHIELD Chromecast Profile for the Chromecast","title":"Profiles"},{"location":"Radarr/","text":"Radarr \u00b6 Here you will find a collection of Radarr Guides I made. v3 Radarr Branch: latest \u00b6 (stable) (v3) Builds Pushed only when intentionally released Github Branch: master Docker: hotio/radarr:latest ghcr.io/hotio/radarr:latest","title":"Home"},{"location":"Radarr/#radarr","text":"Here you will find a collection of Radarr Guides I made.","title":"Radarr"},{"location":"Radarr/#v3-radarr-branch-latest","text":"(stable) (v3) Builds Pushed only when intentionally released Github Branch: master Docker: hotio/radarr:latest ghcr.io/hotio/radarr:latest","title":"v3 Radarr Branch: latest"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/","text":"Collection of Custom Formats \u00b6 Here I will try to collect a collection of the most needed and commonly used Custom Formats. These have been collected from either discussions on discord or that I created with help from others. Special thanks to rg9400 , bakerboy448 and Team Radarr. Important Keep in mind Custom Formats are made to fine tune your Quality Profile Quality Profile trumps Custom Formats With Radarr V3, Custom Formats are much more advanced/powerful than with v0.2, although this also means a Custom Format is much more complicated to setup. After requesting at Team Radarr we now have the options to import/export the Custom Formats in a JSON format that we can use here what makes it easier to share the different kind of Custom Formats. I also made a Guide on how to import/export the Custom Formats and how to truly make use of it. Tip I also suggest to change the Propers and Repacks settings in Radarr Media Management => File Management to Do Not Prefer and use the Repack/Proper Custom Format. This way you make sure the Custom Formats preferences will be used and not ignored. INDEX \u00b6 Audio Audio Advanced #1 Audio Advanced #2 Audio Channels Dolby TrueHD/ATMOS TrueHD ATMOS FLAC 1.0 Mono DTS-HD/DTS:X DTS X PCM 2.0 Stereo Surround Sounds ATMOS (indeterminate) DTS-HD HRA 3.0 Sound DD+ ATMOS (lossy) AAC 4.0 Sound TrueHD (not ATMOS) Basic Dolby Digital 5.1 Surround DTS-HD MA MP3 6.1 Surround Dolby Digital Plus Opus 7.1 Surround DTS-ES 9.1 Surround Basic DTS HDR Metadata Movie Versions Misc (-1000) Misc Dolby Vision Hybrid BR-DISK Repack/Proper Dolby Vision (Single Layer) Remaster EVO except WEB-DL Streaming Services HDR 4K Remaster Low Quality Releases HQ-P2P HDR (indeterminate) Special Editions 720/1080p no x265 x264 10 Bit Criterion Collection 3D x265 Theatrical Cut MPEG2 IMAX FreeLeech Dutch Groups Anime Dual Audio Multi Audio \u00b6 Dolby TrueHD/ATMOS \u00b6 If you prefer TrueHD|Atmos audio tracks. Warning Don't use this Custom Format in combination with the Audio Advanced CF if you want to fine tune your audio formats or else it will add up the scores. json { \"name\" : \"Dolby TrueHD/ATMOS\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"truehd|atmos\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"truehd|atmos\" } }] } TOP DTS-HD/DTS:X \u00b6 If you prefer DTS-HD/DTS:X audio tracks. Warning Don't use this Custom Format in combination with the Audio Advanced CF if you want to fine tune your audio formats or else it will add up the scores. json { \"name\" : \"DTS-HD/DTS:X\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"dts.?(hd|es|x(?!\\\\d))\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"dts.?(hd|es|x(?!\\\\d))\" } }] } TOP Surround Sounds \u00b6 If you prefer all kind of surround sounds Warning Don't use this Custom Format in combination with the Audio Advanced CF if you want to fine tune your audio formats or else it will add up the scores. json { \"name\" : \"Surround Sounds\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"dts\\\\-?(hd|x)|truehd|atmos|dd(\\\\+|p)(5|7)\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"dts\\\\-?(hd|x)|truehd|atmos|dd(\\\\+|p)(5|7)\" } }] } TOP Audio Advanced \u00b6 TrueHD ATMOS \u00b6 json { \"name\" : \"TrueHD ATMOS\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"TrueHD\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD\" } }, { \"name\" : \"ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Dolby Digital Plus \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"Not DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDTS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Basic Dolby Digital\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!e)ac3\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } } ] } TOP DTS X \u00b6 json { \"name\" : \"DTS X\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"DTS X\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"dts[-. ]?x(?!\\\\d)\" } }, { \"name\" : \"Not Basic DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"DTS[ .]?[1-9]\" } }, { \"name\" : \"Not Basic Dolby Digital\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDD(\\\\b|\\\\d)|(?<!e)ac3\" } }, { \"name\" : \"Not Dolby Digital Plus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"Not TrueHD/ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD|\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } } ] } TOP ATMOS (indeterminate) \u00b6 Handles cases where only Atmos is specified in title but not DD+ or TrueHD (Where it is not specified if it is Lossy or Lossless) Give this the same score as Lossy Atmos, and then on import, it will get changed to either lossy or lossless based on mediainfo. json { \"name\" : \"ATMOS (indeterminate)\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Dolby Digital Plus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not TrueHD\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD\" } }, { \"name\" : \"Not DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDTS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Basic Dolby Digital \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!e)ac3\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } } ] } TOP DD+ ATMOS (lossy) \u00b6 json { \"name\" : \"DD+ ATMOS (lossy)\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Dolby Digital Plus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not TrueHD\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD\" } }, { \"name\" : \"Not DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDTS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Basic Dolby Digital \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!e)ac3\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } } ] } TOP TrueHD (not ATMOS) \u00b6 json { \"name\" : \"TrueHD (not ATMOS)\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"TrueHD\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD\" } }, { \"name\" : \"ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Dolby Digital Plus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"Not DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDTS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Basic Dolby Digital\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!e)ac3\" } } ] } TOP DTS-HD MA \u00b6 json { \"name\" : \"DTS-HD MA\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"DTS-HD MA\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"dts.?(ma|hd.?ma)\" } }, { \"name\" : \"Not TrueHD/ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD|\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Dolby Digital Plus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"Not Basic DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"DTS[ .]?[1-9]\" } }, { \"name\" : \"Not Basic Dolby Digital \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDD(\\\\b|\\\\d)|(?<!e)ac3\" } }, { \"name\" : \"Not DTS X\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dts[-. ]?x(?!\\\\d)\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } }, { \"name\" : \"Not DTS-HD HRA/ES\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dts.?(es|(hd.?)?(hr|hi))\" } } ] } TOP FLAC \u00b6 FLAC stands for Free Lossless Audio Codec, an audio format similar to MP3, but lossless, meaning that audio is compressed in FLAC without any loss in quality. This is similar to how Zip works, except with FLAC you will get much better compression because it is designed specifically for audio json { \"name\" : \"FLAC\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDTS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not TrueHD/ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD|\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Basic Dolby Digital\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!e)ac3\" } }, { \"name\" : \"Not Dolby Digital Plus \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } } ] } TOP PCM \u00b6 json { \"name\" : \"PCM\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDTS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not TrueHD/ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD|\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Basic Dolby Digital\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!e)ac3\" } }, { \"name\" : \"Not Dolby Digital Plus \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } } ] } TOP DTS-HD HRA \u00b6 json { \"name\" : \"DTS-HD HRA\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"DTS-HD HRA\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"dts.?(hd.?)?(hr|hi)\" } }, { \"name\" : \"Not TrueHD/ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD|\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Dolby Digital Plus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"Not Basic DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"DTS[ .]?[1-9]\" } }, { \"name\" : \"Not Basic Dolby Digital \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDD(\\\\b|\\\\d)|(?<!e)ac3\" } }, { \"name\" : \"Not DTS X\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dts[-. ]?x(?!\\\\d)\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } }, { \"name\" : \"Not DTS-ES\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dts.?es\" } }, { \"name\" : \"Not 6.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]6\\\\.[0-1]\" } } ] } TOP Dolby Digital Plus \u00b6 json { \"name\" : \"Dolby Digital Plus\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Dolby Digital Plus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"Not TrueHD/ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD|\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDTS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Basic Dolby Digital\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!e)ac3\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } } ] } TOP DTS-ES \u00b6 json { \"name\" : \"DTS-ES\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"DTS-ES\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"dts.?(es|(hd.?)?(hr|hi))\" } }, { \"name\" : \"Not TrueHD/ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD|\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Dolby Digital Plus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"Not Basic DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"DTS[ .]?[1-9]\" } }, { \"name\" : \"Not Basic Dolby Digital \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDD(\\\\b|\\\\d)|(?<!e)ac3\" } }, { \"name\" : \"Not DTS X\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dts[-. ]?x(?!\\\\d)\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } }, { \"name\" : \"6.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]6\\\\.[0-1]\" } } ] } TOP Basic DTS \u00b6 json { \"name\" : \"Basic DTS\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Basic DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDTS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not DTS-HD\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dts.?(hd|ma|es|hi)\" } }, { \"name\" : \"Not Dolby Digital Plus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"Not TrueHD/ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD|\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Basic Dolby Digital\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDD(\\\\b|\\\\d)|(?<!e)ac3\" } }, { \"name\" : \"Not DTS X\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dts[-. ]?x(?!\\\\d)\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } } ] } TOP AAC \u00b6 From Wikipedia, the free encyclopedia Advanced Audio Coding Advanced Audio Coding (AAC) is an audio coding standard for lossy digital audio compression. Designed to be the successor of the MP3 format, AAC generally achieves higher sound quality than MP3 at the same bit rate. json { \"name\" : \"AAC\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDTS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Dolby Digital Plus \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"Not Basic Dolby Digital\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!e)ac3\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not TrueHD/ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD|\\\\bATMOS(\\\\b|\\\\d)\" } } ] } TOP Basic Dolby Digital \u00b6 json { \"name\" : \"Basic Dolby Digital\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Basic Dolby Digital\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDD[^a-z+]|(?<!e)ac3\" } }, { \"name\" : \"Not Dolby Digital Plus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"eac3\" } }, { \"name\" : \"Not TrueHD/ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD|\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDTS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } } ] } TOP MP3 \u00b6 json { \"name\" : \"MP3\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"MP3\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"mp3\" } }] } TOP Opus \u00b6 From Wikipedia, the free encyclopedia Opus is a lossy audio coding format developed by the Xiph.Org Foundation and standardized by the Internet Engineering Task Force, designed to efficiently code speech and general audio in a single format, while remaining low-latency enough for real-time interactive communication and low-complexity enough for low-end embedded processors.Opus replaces both Vorbis and Speex for new applications, and several blind listening tests have ranked it higher-quality than any other standard audio format at any given bitrate until transparency is reached, including MP3, AAC, and HE-AAC json { \"name\" : \"Opus\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Opus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bOPUS(\\\\b|\\\\d)\" } }] } TOP Audio Channels \u00b6 1.0 Mono \u00b6 json { \"name\" : \"1.0 Mono\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Mono\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]1\\\\.0|\\\\bMono\\\\b|\\\\[PCM \\\\]\" } }, { \"name\" : \"Not Stereo\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!repac)[^0-9]2\\\\.0|\\\\bStereo\\\\b\" } }, { \"name\" : \"Not 3.0ch\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]3\\\\.0\" } }, { \"name\" : \"Not 4.0ch\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]4\\\\.0\" } }, { \"name\" : \"Not High Channel Count\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9][5-9]\\\\.[0-1]\" } } ] } TOP 2.0 Stereo \u00b6 json { \"name\" : \"2.0 Stereo\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Stereo\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"(?<!repac)[^0-9]2\\\\.0|\\\\bStereo\\\\b\" } }, { \"name\" : \"Not 3.0ch\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]3\\\\.0\" } }, { \"name\" : \"Not 4.0ch\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]4\\\\.0\" } }, { \"name\" : \"Not High Channel Count\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9][5-9]\\\\.[0-1]\" } }, { \"name\" : \"Not Mono\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]1\\\\.0|\\\\bMono\\\\b|\\\\[PCM \\\\]\" } } ] } TOP 3.0 Sound \u00b6 json { \"name\" : \"3.0 Sound\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"3.0ch\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]3\\\\.0\" } }, { \"name\" : \"Not Mono\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]1\\\\.0|\\\\bMono\\\\b|\\\\[PCM \\\\]\" } }, { \"name\" : \"Not Stereo\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!repac)[^0-9]2\\\\.0|\\\\bStereo\\\\b\" } }, { \"name\" : \"Not 4.0ch\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]4\\\\.0\" } }, { \"name\" : \"Not High Channel Count\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9][5-9]\\\\.[0-1]\" } } ] } TOP 4.0 Sound \u00b6 json { \"name\" : \"4.0 Sound\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"4.0ch\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]4\\\\.0\" } }, { \"name\" : \"Not Mono\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]1\\\\.0|\\\\bMono\\\\b|\\\\[PCM \\\\]\" } }, { \"name\" : \"Not Stereo\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!repac)[^0-9]2\\\\.0|\\\\bStereo\\\\b\" } }, { \"name\" : \"Not 3.0ch\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]3\\\\.0\" } }, { \"name\" : \"Not High Channel Count\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9][5-9]\\\\.[0-1]\" } } ] } TOP 5.1 Surround \u00b6 json { \"name\" : \"5.1 Surround\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"5.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]5\\\\.[0-1]\" } }, { \"name\" : \"Not 7.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9][7-8]\\\\.[0-1]\" } }, { \"name\" : \"Not 9.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]9\\\\.[0-1]\" } }, { \"name\" : \"Not Low Channel Count\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!repac)[^0-9][1-4]\\\\.[0-1]|\\\\b(Stereo|Mono)\\\\b\" } } ] } TOP 6.1 Surround \u00b6 json { \"name\" : \"6.1 Surround\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"6.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]6\\\\.[0-1]\" } }, { \"name\" : \"Not 7.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9][7-8]\\\\.[0-1]\" } }, { \"name\" : \"Not 9.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]9\\\\.[0-1]\" } }, { \"name\" : \"Not Low Channel Count\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!repac)[^0-9][1-4]\\\\.[0-1]|\\\\b(Stereo|Mono)\\\\b\" } }, { \"name\" : \"Not 5.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]5\\\\.[0-1]\" } } ] } TOP 7.1 Surround \u00b6 json { \"name\" : \"7.1 Surround\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"7.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9][7-8]\\\\.[0-1]\" } }, { \"name\" : \"Not 9.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]9\\\\.[0-1]\" } }, { \"name\" : \"Not Low Channel Count\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!repac)[^0-9][1-4]\\\\.[0-1]|\\\\b(Stereo|Mono)\\\\b\" } } ] } TOP 9.1 Surround \u00b6 json { \"name\" : \"9.1 Surround\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"9.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]9\\\\.[0-1]\" } }, { \"name\" : \"Not 7.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9][7-8]\\\\.[0-1]\" } }, { \"name\" : \"Not 5.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9][5-6]\\\\.[0-1]\" } }, { \"name\" : \"Not Low Channel Count\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!repac)[^0-9][1-4]\\\\.[0-1]|\\\\b(Stereo|Mono)\\\\b\" } } ] } TOP HDR metadata \u00b6 Dolby Vision \u00b6 Dolby Vision is a content mastering and delivery format similar to the HDR10 media profile. Dolby Vision is a proprietary, dynamic HDR format developed by Dolby Labs. By adjusting the picture on a scene-by-scene (and even frame-by-frame) basis, it lets you see more detail with better color accuracy. It is constantly making adjustments so that each image on the screen is optimized. json { \"name\" : \"DoVi\" , \"includeCustomFormatWhenRenaming\" : true , \"specifications\" : [{ \"name\" : \"Dolby Vision\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(DV|dovi)\\\\b|dolby.?vision\" } }] } TOP Dolby Vision (Single Layer) \u00b6 Custom Format for Single Layer Dolby Vision releases. Note This used to be the the preferred option for PLeX with a Shield 2019 model that supports DV. But now DV is part of the MKV spec and ExoPlayer added native support. json { \"name\" : \"Dolby Vision (Single Layer)\" , \"includeCustomFormatWhenRenaming\" : true , \"specifications\" : [{ \"name\" : \"Dolby Vision (Single Layer)\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"sl.?dv|single.?layer.?dovi\" } }, { \"name\" : \"Remux\" , \"implementation\" : \"QualityModifierSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : 5 } } ] } TOP HDR \u00b6 From Wikipedia, the free encyclopedia High-dynamic-range video (HDR video) is video having a dynamic range greater than that of standard-dynamic-range video (SDR video).HDR video involves capture, production, content/encoding, and display. HDR capture and displays are capable of brighter whites and deeper blacks. To accommodate this, HDR encoding standards allow for a higher maximum luminance and use at least a 10-bit dynamic range (color depth, compared to 8-bit for non-professional and 10-bit for professional SDR video) in order to maintain precision across this extended range. json { \"name\" : \"HDR\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"HDR\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bHDR(\\\\b|\\\\d)\" } }] } TOP HDR (indeterminate) \u00b6 Some groups don't add HDR to their 4K release name so I suggest to add this Custom Format at the same score as you add one of your HDR Custom Formats. For now it's only FraMeSToR that doesn't add HDR to their release name but in the feature we can add more to it if needed. json { \"name\" : \"HDR (indeterminate)\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [ { \"name\" : \"FraMeSToR\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFraMeSToR\\\\b\" } }, { \"name\" : \"2160p\" , \"implementation\" : \"ResolutionSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : 2160 } }, { \"name\" : \"HDR: HDR\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bHDR(\\\\b|\\\\d)\" } }, { \"name\" : \"DoVi: Dolby Vision\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(DV|dovi)\\\\b|dolby.?vision\" } }, { \"name\" : \"SDR: SDR\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bSDR(\\\\b|\\\\d)\" } } ] } TOP 10 Bit \u00b6 json { \"name\" : \"10 Bit\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"10 Bit\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b10bit(\\\\b|\\\\d)\" } }] } TOP Movie Versions \u00b6 Hybrid \u00b6 A hybrid release means any combination of sources (video + audio) and not a direct encode of a single source. Generally you can be sure that any hybrid that has been put together is the best quality release of a particular title. json { \"name\" : \"Hybrid\" , \"includeCustomFormatWhenRenaming\" : true , \"specifications\" : [{ \"name\" : \"Hybrid\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bhybrid(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Hybrid Release Group\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"-HYBRID\" } } ] } TOP Remaster \u00b6 From Wikipedia, the free encyclopedia For the software term, see Software remastering. Remaster (also digital remastering and digitally remastered) refers to changing the quality of the sound or of the image, or both, of previously created recordings, either audiophonic, cinematic, or videographic. json { \"name\" : \"Remaster\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Remaster\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"Remaster\" } }, { \"name\" : \"Not 4K Remaster\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"4K\" } } ] } TOP 4K Remaster \u00b6 A remastered or mastered in 4K should give you usually the best picture and audio currently for the movie. Both are just names to describe the best possible currently for the movie. To be clear, the final digital films on the Mastered in 4K Blu-rays still only have the same 1920 x 1080 pixels of actual resolution as normal Blu-rays. But the argument goes that because these full HD files were derived from higher-resolution masters, their images will be more precise, with better colours, less noise, and enhanced sharpness and detail. Not least because the higher-resolution mastering process will provide more detail from the original print for the Blu-ray masters to draw on when going through their (hopefully\u2026) frame-by-frame compression process. Another important element of the Mastered in 4K discs is that they\u2019re all mastered with \u2018x.v.YCC\u2019 colour specification. This delivers an expanded colour range closer to that contained in original source material. json { \"name\" : \"4K Remaster\" , \"includeCustomFormatWhenRenaming\" : true , \"specifications\" : [{ \"name\" : \"Remaster\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"Remaster\" } }, { \"name\" : \"4K\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"4k\" } }, { \"name\" : \"Not 4K Resolution\" , \"implementation\" : \"ResolutionSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : 2160 } } ] } TOP Criterion Collection \u00b6 The Criterion Collection, Inc. (or simply Criterion) is an American home video distribution company which focuses on licensing \"important classic and contemporary films\" and selling them to film aficionados.Criterion has helped to standardize characteristics of home video such as film restoration, using the letterbox format for widescreen films, and adding bonus features and commentary tracks. json { \"name\" : \"Criterion Collection\" , \"includeCustomFormatWhenRenaming\" : true , \"specifications\" : [{ \"name\" : \"Criterion\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"criterion\" } }, { \"name\" : \"CC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"\\\\bCC\\\\b\" } } ] } TOP Theatrical Cut \u00b6 The Theatrical Cut is the version of the film that was shown at cinemas. json { \"name\" : \"Theatrical Cut\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Theatrical\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"Theatrical\" } }] } TOP Special Edition \u00b6 Custom format for several Special Editions The Director's Cut is the version edited by the Director, usually for additional home media releases. An Extended Cut is usually any version of the film which is longer than the theatrical cut (though in very rare cases, its shorter). json { \"name\" : \"Special Edition\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Special Edition \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"(?<!^)\\\\b(extended|uncut|director|special|unrated|uncensored|cut|version|edition)(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Theatrical \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"Theatrical\" } } ] } TOP IMAX \u00b6 json { \"name\" : \"IMAX\" , \"includeCustomFormatWhenRenaming\" : true , \"specifications\" : [ { \"name\" : \"IMAX\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bIMAX\\\\b\" } } ] } TOP Misc (-1000) \u00b6 BR-DISK \u00b6 This is a custom format to help Radarr recognize & ignore BR-DISK (ISO's and Blu-ray folder structure) in addition to the standard BR-DISK quality. You will need to add the following to your new Custom Format when created in your Quality Profile ( Setting => Profiles ) and then set the score to -1000 Note Depending on your renaming scheme it could happen that Radarr will match renamed files after they are downloaded and imported as BR-DISK , This is a cosmetic annoyance till I come up for another way to solve this, being that this Custom Format is used to not download BR-DISK it does its purpose as intended. Several reasons why this is happening: Blame the often wrongly used naming of x265 encodes. Radarr v3 uses dynamic custom formats. json { \"name\" : \"BR-DISK\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"avc|vc-1|hevc\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"avc|vc-1|hevc\" } }, { \"name\" : \"Remux\" , \"implementation\" : \"QualityModifierSpecification\" , \"negate\" : true , \"required\" : false , \"fields\" : { \"value\" : 5 } }, { \"name\" : \"WEBDL\" , \"implementation\" : \"SourceSpecification\" , \"negate\" : true , \"required\" : false , \"fields\" : { \"value\" : 7 } }, { \"name\" : \"^((?!x265).)*$\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"^((?!x265).)*$\" } } ] } TOP EVO except WEB-DL \u00b6 This group is often banned for the low quality Blu-ray releases, but their WEB-DL are okay. You will need to add the following to your new Custom Format when created in your Quality Profile ( Setting => Profiles ) and then set the score to -1000 json { \"name\" : \"EVO (except WEB-DL)\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"EVO\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"\\\\bEVO\\\\b\" } }, { \"name\" : \"WEBDL\" , \"implementation\" : \"SourceSpecification\" , \"negate\" : true , \"required\" : false , \"fields\" : { \"value\" : 7 } } ] } TOP Low Quality Releases \u00b6 A collection of known Low Quality groups that are often banned from the the top trackers because the lack of quality. Note You might want to add the following also EVO except WEB-DL BLOCK1 = Low-Quality Releases (often banned groups) BLOCK2 = Another Small list of often banned groups. BLOCK3 = And Another list. BLOCK4 = Rips from Scene and quick-to-release P2P groups while adequate, are not considered high quality. json { \"name\" : \"Low Quality Releases\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"[BLOCK1]\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"-aXXo|-CrEwSaDe|-DEViSE|-FaNGDiNG0|-FLAWL3SS|-FZHD|-FRDS|-HDTime|-IMAGINE|-iPlanet|-KingBen|-KiNGDOM|-KLAXXON|-Leffe|-LTRG|-mHD|-mSD|-NhaNc3|-nHD|-nikt0|-nSD|-PrisM|-PRODJi|-Rx|-RDN|-SANTi|-ViSION|-WAF|-WHiiZz|-x0r|\\\\bYIFY\\\\b|\\\\bYTS\\\\b|-STUTTERSHIT\" } }, { \"name\" : \"[BLOCK2]\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"-CDDHD|-EuReKA|-DDR|-DNL|-BARC0DE\" } }, { \"name\" : \"[BLOCK3]\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"\\\\bRARBG\\\\b|-FGT|-BReWeRS|-Grym|-LiGaS|-Zeus|-Tigole\" } }, { \"name\" : \"[BLOCK4]\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"-beAst|-CHD|-HDWinG|-MTeam|-MySiLU|-WiKi\" } } ] } TOP 720/1080p no x265 \u00b6 This blocks/ignores 720/1080p releases that are encoded in x265 You will need to add the following to your new Custom Format when created in your Quality Profile ( Setting => Profiles ) and then set the score to -1000 Quote x265 is good for for 4k stuff or 1080p if they used the the remuxes as source. If the media isn't source quality/remux, then there will be a loss of quality every time. Also, once you go x265, typically that file is done. It can't be changed to something else without a huge loss of quality. Something like 95% of video files are x264 and have much better direct play support. If you have more than a couple users, you will notice much more transcoding. Just depends on your priorities. So basically if you are storage poor and just need to save space, use x265. The catch is if you want best quality x265, you need source quality files, so you still have huge file sizes. If you want maximum compatibility and the option to change your files to something else later, then x264. It's all really dependent on specific situations for different people It's a shame that most x265 groups microsize the releases or use the x264 as source what results in low quality releases. And the few groups that do use the correct source suffer from it. So I created my own golden rule. 720/1080p => x264 2160p/4k => x265 json { \"name\" : \"720/1080p != x265\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [ { \"name\" : \"720p\" , \"implementation\" : \"ResolutionSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : 720 } }, { \"name\" : \"1080p\" , \"implementation\" : \"ResolutionSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : 1080 } }, { \"name\" : \"x265/HEVC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[xh]\\\\.?265|\\\\bHEVC(\\\\b|\\\\d)\" } } ] } TOP 3D \u00b6 If you prefer or not prefer 3D. You can use Custom Format or use Restrictions ( Settings => Indexers => Restrictions ) what ever you prefer. json { \"name\" : \"3D\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"3d|sbs|half-ou\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"3d|sbs|half.?ou\" } }] } TOP Misc \u00b6 HQ-P2P \u00b6 A collection of P2P groups that are known for their high quality releases json { \"name\" : \"HQ-P2P\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"[BLOCK1]\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"-BMF|-decibeL|\\\\bD-Z0N3\\\\b|\\\\bFTW-HD\\\\b|-HiFi|-NCmt|-OISTiLe|-TDD|\\\\bZQ\\\\b\" } }, { \"name\" : \"[BLOCK2]\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"-HiSD|-NTb|-ift|-geek|-tnp|-ncmt|-pter|-bbq\" } }, { \"name\" : \"[BLOCK3]\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"-CRiSC|-CtrlHD|-DON|\\\\b-EA\\\\b|-EbP|-LolHD|-SbR|-TayTo|-VietHD\" } }, { \"name\" : \"[Remux Groups]\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"-FraMeSToR|-EPSiLON|\\\\bKRaLiMaRKo\\\\b\" } } ] } TOP Repack Proper \u00b6 json { \"name\" : \"Repack/Proper\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Repack\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"Repack\" } }, { \"name\" : \"Proper\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"Proper\" } }, { \"name\" : \"Rerip\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"Rerip\" } } ] } TOP Streaming Services \u00b6 Collection of Streaming Services Attention This CF only prefers the known streaming services and doesn't work the same way like the release profile that can be used in Sonarr to include the streaming service name in your renaming scheme when using {[Custom Formats]} !!! If you want to have this option then you need to add them all separate. json { \"name\" : \"Streaming Services\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Amazon\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(amzn|amazon).?web.?(dl|rip)\" } }, { \"name\" : \"Netflix\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(nf|netflix).?web.?(dl|rip)\" } }, { \"name\" : \"AppleTV+\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(atvp).?web.?(dl|rip)\" } }, { \"name\" : \"Disney+\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(dsnp|dsny|disney).?web.?(dl|rip)\" } }, { \"name\" : \"DCU\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(dcu).?web.?(dl|rip)\" } }, { \"name\" : \"HBO Max\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(hmax).?web.?(dl|rip)\" } }, { \"name\" : \"HBO\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(hbo).?web.?(dl|rip)\" } }, { \"name\" : \"Youtube Red\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(red).?web.?(dl|rip)\" } }, { \"name\" : \"Quibi\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(qibi).?web.?(dl|rip)\" } }, { \"name\" : \"iTunes\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(it).?web.?(dl|rip)\" } }, { \"name\" : \"Hulu\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(hulu).?web.?(dl|rip)\" } } ] } TOP x264 \u00b6 x264 is a free software library and application for encoding video streams into the H.264/MPEG-4 AVC compression format, and is released under the terms of the GNU GPL . If you want maximum compatibility and have much better direct play support then use x264 for 720p/1080p json { \"name\" : \"x264\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"x264\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[xh]\\\\.?264|\\\\bAVC(\\\\b|\\\\d)\" } }, { \"name\" : \"Remux\" , \"implementation\" : \"QualityModifierSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : 5 } } ] } TOP x265 \u00b6 x265 is a free software library and application for encoding video streams into the H.265/MPEG-H HEVC compression format, and is released under the terms of the GNU GPL . Quote x265 is good for for 4k stuff or 1080p if they used the the remuxes as source. If the media isn't source quality/remux, then there will be a loss of quality every time. Something like 95% of video files are x264 and have much better direct play support. If you have more than a couple users, you will notice much more transcoding. Just depends on your priorities. So basically if you are storage poor and just need to save space, use x265. The catch is if you want best quality x265, you need source quality files, so you still have huge file sizes. If you want maximum compatibility and the option to change your files to something else later, then x264. It's all really dependent on specific situations for different people It's a shame that most x265 groups microsize the releases or use the x264 as source what results in low quality releases. And the few groups that do use the correct source suffer from it. So I created my own golden rule. 720/1080p => x264 2160p/4k => x265 If you want to make use of the Golden Rule you could make use of the following Custom Format 720/1080p no x265 Some extra info about 4K/X265 4k, transcoding, and you - aka the rules of 4k - a FAQ - Plex.tv Don\u2019t bother transcoding 4k If you cannot direct play 4k, then perhaps you should not even be collecting 4k. If you don\u2019t have the storage space for a copy of both 4k and 1080/720, then perhaps you should not even be collecting 4k. To avoid transcoding for remote and non-4k clients, keep your 4k content in separate plex libraries. json { \"name\" : \"x265\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"x265\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[xh]\\\\.?265|\\\\bHEVC(\\\\b|\\\\d)\" } }, { \"name\" : \"Remux\" , \"implementation\" : \"QualityModifierSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : 5 } } ] } TOP FreeLeech \u00b6 Sometimes, torrent sites set a torrent to be freeleech. This means, that the download of this torrent will not count towards your download quota or ratio. This is really useful, if you do not have the best ratio yet. Attention Keep in mind not all trackers support this option. json { \"name\" : \"FreeLeech\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"FreeLeech\" , \"implementation\" : \"IndexerFlagSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : 1 } }] } TOP Dutch Groups \u00b6 If you prefer movies with also a Dutch audio track. json { \"name\" : \"Dutch Groups\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Dutch Groups\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"-CyTSuNee|-SHiTSoNy|-QoQ\" } }] } TOP Anime Dual Audio \u00b6 json { \"name\" : \"Anime Dual Audio\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [ { \"name\" : \"Dual Audio\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"dual.?audio\" } }, { \"name\" : \"BluDragon\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"bludragon\" } }, { \"name\" : \"EN+JA\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"EN\\\\+JA|JA\\\\+EN\" } }, { \"name\" : \"ZR\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"\\\\bZR\\\\b\" } }, { \"name\" : \"Japanese Language\" , \"implementation\" : \"LanguageSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : 8 } } ] } TOP MPEG2 \u00b6 json { \"name\" : \"MPEG2\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"MPEG2\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"MPEG-?2\" } }] } TOP Multi \u00b6 json { \"name\" : \"Multi\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Multi\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bMulti(\\\\b|\\\\d)\" } }] } TOP","title":"Collection of Custom Formats"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#collection-of-custom-formats","text":"Here I will try to collect a collection of the most needed and commonly used Custom Formats. These have been collected from either discussions on discord or that I created with help from others. Special thanks to rg9400 , bakerboy448 and Team Radarr. Important Keep in mind Custom Formats are made to fine tune your Quality Profile Quality Profile trumps Custom Formats With Radarr V3, Custom Formats are much more advanced/powerful than with v0.2, although this also means a Custom Format is much more complicated to setup. After requesting at Team Radarr we now have the options to import/export the Custom Formats in a JSON format that we can use here what makes it easier to share the different kind of Custom Formats. I also made a Guide on how to import/export the Custom Formats and how to truly make use of it. Tip I also suggest to change the Propers and Repacks settings in Radarr Media Management => File Management to Do Not Prefer and use the Repack/Proper Custom Format. This way you make sure the Custom Formats preferences will be used and not ignored.","title":"Collection of Custom Formats"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#index","text":"Audio Audio Advanced #1 Audio Advanced #2 Audio Channels Dolby TrueHD/ATMOS TrueHD ATMOS FLAC 1.0 Mono DTS-HD/DTS:X DTS X PCM 2.0 Stereo Surround Sounds ATMOS (indeterminate) DTS-HD HRA 3.0 Sound DD+ ATMOS (lossy) AAC 4.0 Sound TrueHD (not ATMOS) Basic Dolby Digital 5.1 Surround DTS-HD MA MP3 6.1 Surround Dolby Digital Plus Opus 7.1 Surround DTS-ES 9.1 Surround Basic DTS HDR Metadata Movie Versions Misc (-1000) Misc Dolby Vision Hybrid BR-DISK Repack/Proper Dolby Vision (Single Layer) Remaster EVO except WEB-DL Streaming Services HDR 4K Remaster Low Quality Releases HQ-P2P HDR (indeterminate) Special Editions 720/1080p no x265 x264 10 Bit Criterion Collection 3D x265 Theatrical Cut MPEG2 IMAX FreeLeech Dutch Groups Anime Dual Audio Multi","title":"INDEX"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#audio","text":"","title":"Audio"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#dolby-truehdatmos","text":"If you prefer TrueHD|Atmos audio tracks. Warning Don't use this Custom Format in combination with the Audio Advanced CF if you want to fine tune your audio formats or else it will add up the scores. json { \"name\" : \"Dolby TrueHD/ATMOS\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"truehd|atmos\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"truehd|atmos\" } }] } TOP","title":"Dolby TrueHD/ATMOS"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#dts-hddtsx","text":"If you prefer DTS-HD/DTS:X audio tracks. Warning Don't use this Custom Format in combination with the Audio Advanced CF if you want to fine tune your audio formats or else it will add up the scores. json { \"name\" : \"DTS-HD/DTS:X\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"dts.?(hd|es|x(?!\\\\d))\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"dts.?(hd|es|x(?!\\\\d))\" } }] } TOP","title":"DTS-HD/DTS:X"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#surround-sounds","text":"If you prefer all kind of surround sounds Warning Don't use this Custom Format in combination with the Audio Advanced CF if you want to fine tune your audio formats or else it will add up the scores. json { \"name\" : \"Surround Sounds\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"dts\\\\-?(hd|x)|truehd|atmos|dd(\\\\+|p)(5|7)\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"dts\\\\-?(hd|x)|truehd|atmos|dd(\\\\+|p)(5|7)\" } }] } TOP","title":"Surround Sounds"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#audio-advanced","text":"","title":"Audio Advanced"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#truehd-atmos","text":"json { \"name\" : \"TrueHD ATMOS\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"TrueHD\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD\" } }, { \"name\" : \"ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Dolby Digital Plus \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"Not DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDTS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Basic Dolby Digital\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!e)ac3\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } } ] } TOP","title":"TrueHD ATMOS"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#dts-x","text":"json { \"name\" : \"DTS X\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"DTS X\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"dts[-. ]?x(?!\\\\d)\" } }, { \"name\" : \"Not Basic DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"DTS[ .]?[1-9]\" } }, { \"name\" : \"Not Basic Dolby Digital\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDD(\\\\b|\\\\d)|(?<!e)ac3\" } }, { \"name\" : \"Not Dolby Digital Plus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"Not TrueHD/ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD|\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } } ] } TOP","title":"DTS X"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#atmos-indeterminate","text":"Handles cases where only Atmos is specified in title but not DD+ or TrueHD (Where it is not specified if it is Lossy or Lossless) Give this the same score as Lossy Atmos, and then on import, it will get changed to either lossy or lossless based on mediainfo. json { \"name\" : \"ATMOS (indeterminate)\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Dolby Digital Plus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not TrueHD\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD\" } }, { \"name\" : \"Not DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDTS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Basic Dolby Digital \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!e)ac3\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } } ] } TOP","title":"ATMOS (indeterminate)"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#dd-atmos-lossy","text":"json { \"name\" : \"DD+ ATMOS (lossy)\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Dolby Digital Plus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not TrueHD\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD\" } }, { \"name\" : \"Not DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDTS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Basic Dolby Digital \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!e)ac3\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } } ] } TOP","title":"DD+ ATMOS (lossy)"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#truehd-not-atmos","text":"json { \"name\" : \"TrueHD (not ATMOS)\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"TrueHD\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD\" } }, { \"name\" : \"ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Dolby Digital Plus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"Not DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDTS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Basic Dolby Digital\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!e)ac3\" } } ] } TOP","title":"TrueHD (not ATMOS)"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#dts-hd-ma","text":"json { \"name\" : \"DTS-HD MA\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"DTS-HD MA\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"dts.?(ma|hd.?ma)\" } }, { \"name\" : \"Not TrueHD/ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD|\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Dolby Digital Plus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"Not Basic DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"DTS[ .]?[1-9]\" } }, { \"name\" : \"Not Basic Dolby Digital \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDD(\\\\b|\\\\d)|(?<!e)ac3\" } }, { \"name\" : \"Not DTS X\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dts[-. ]?x(?!\\\\d)\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } }, { \"name\" : \"Not DTS-HD HRA/ES\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dts.?(es|(hd.?)?(hr|hi))\" } } ] } TOP","title":"DTS-HD MA"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#flac","text":"FLAC stands for Free Lossless Audio Codec, an audio format similar to MP3, but lossless, meaning that audio is compressed in FLAC without any loss in quality. This is similar to how Zip works, except with FLAC you will get much better compression because it is designed specifically for audio json { \"name\" : \"FLAC\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDTS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not TrueHD/ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD|\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Basic Dolby Digital\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!e)ac3\" } }, { \"name\" : \"Not Dolby Digital Plus \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } } ] } TOP","title":"FLAC"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#pcm","text":"json { \"name\" : \"PCM\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDTS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not TrueHD/ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD|\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Basic Dolby Digital\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!e)ac3\" } }, { \"name\" : \"Not Dolby Digital Plus \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } } ] } TOP","title":"PCM"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#dts-hd-hra","text":"json { \"name\" : \"DTS-HD HRA\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"DTS-HD HRA\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"dts.?(hd.?)?(hr|hi)\" } }, { \"name\" : \"Not TrueHD/ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD|\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Dolby Digital Plus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"Not Basic DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"DTS[ .]?[1-9]\" } }, { \"name\" : \"Not Basic Dolby Digital \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDD(\\\\b|\\\\d)|(?<!e)ac3\" } }, { \"name\" : \"Not DTS X\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dts[-. ]?x(?!\\\\d)\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } }, { \"name\" : \"Not DTS-ES\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dts.?es\" } }, { \"name\" : \"Not 6.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]6\\\\.[0-1]\" } } ] } TOP","title":"DTS-HD HRA"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#dolby-digital-plus","text":"json { \"name\" : \"Dolby Digital Plus\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Dolby Digital Plus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"Not TrueHD/ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD|\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDTS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Basic Dolby Digital\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!e)ac3\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } } ] } TOP","title":"Dolby Digital Plus"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#dts-es","text":"json { \"name\" : \"DTS-ES\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"DTS-ES\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"dts.?(es|(hd.?)?(hr|hi))\" } }, { \"name\" : \"Not TrueHD/ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD|\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Dolby Digital Plus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"Not Basic DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"DTS[ .]?[1-9]\" } }, { \"name\" : \"Not Basic Dolby Digital \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDD(\\\\b|\\\\d)|(?<!e)ac3\" } }, { \"name\" : \"Not DTS X\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dts[-. ]?x(?!\\\\d)\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } }, { \"name\" : \"6.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]6\\\\.[0-1]\" } } ] } TOP","title":"DTS-ES"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#basic-dts","text":"json { \"name\" : \"Basic DTS\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Basic DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDTS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not DTS-HD\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dts.?(hd|ma|es|hi)\" } }, { \"name\" : \"Not Dolby Digital Plus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"Not TrueHD/ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD|\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Basic Dolby Digital\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDD(\\\\b|\\\\d)|(?<!e)ac3\" } }, { \"name\" : \"Not DTS X\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dts[-. ]?x(?!\\\\d)\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } } ] } TOP","title":"Basic DTS"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#aac","text":"From Wikipedia, the free encyclopedia Advanced Audio Coding Advanced Audio Coding (AAC) is an audio coding standard for lossy digital audio compression. Designed to be the successor of the MP3 format, AAC generally achieves higher sound quality than MP3 at the same bit rate. json { \"name\" : \"AAC\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDTS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Dolby Digital Plus \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"dd[p+]|eac3\" } }, { \"name\" : \"Not Basic Dolby Digital\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!e)ac3\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not TrueHD/ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD|\\\\bATMOS(\\\\b|\\\\d)\" } } ] } TOP","title":"AAC"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#basic-dolby-digital","text":"json { \"name\" : \"Basic Dolby Digital\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Basic Dolby Digital\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDD[^a-z+]|(?<!e)ac3\" } }, { \"name\" : \"Not Dolby Digital Plus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"eac3\" } }, { \"name\" : \"Not TrueHD/ATMOS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"TrueHD|\\\\bATMOS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not DTS\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bDTS(\\\\b|\\\\d)\" } }, { \"name\" : \"Not FLAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFLAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not AAC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bAAC(\\\\b|\\\\d)\" } }, { \"name\" : \"Not PCM\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(l?)PCM(\\\\b|\\\\d)\" } } ] } TOP","title":"Basic Dolby Digital"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#mp3","text":"json { \"name\" : \"MP3\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"MP3\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"mp3\" } }] } TOP","title":"MP3"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#opus","text":"From Wikipedia, the free encyclopedia Opus is a lossy audio coding format developed by the Xiph.Org Foundation and standardized by the Internet Engineering Task Force, designed to efficiently code speech and general audio in a single format, while remaining low-latency enough for real-time interactive communication and low-complexity enough for low-end embedded processors.Opus replaces both Vorbis and Speex for new applications, and several blind listening tests have ranked it higher-quality than any other standard audio format at any given bitrate until transparency is reached, including MP3, AAC, and HE-AAC json { \"name\" : \"Opus\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Opus\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bOPUS(\\\\b|\\\\d)\" } }] } TOP","title":"Opus"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#audio-channels","text":"","title":"Audio Channels"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#10-mono","text":"json { \"name\" : \"1.0 Mono\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Mono\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]1\\\\.0|\\\\bMono\\\\b|\\\\[PCM \\\\]\" } }, { \"name\" : \"Not Stereo\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!repac)[^0-9]2\\\\.0|\\\\bStereo\\\\b\" } }, { \"name\" : \"Not 3.0ch\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]3\\\\.0\" } }, { \"name\" : \"Not 4.0ch\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]4\\\\.0\" } }, { \"name\" : \"Not High Channel Count\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9][5-9]\\\\.[0-1]\" } } ] } TOP","title":"1.0 Mono"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#20-stereo","text":"json { \"name\" : \"2.0 Stereo\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Stereo\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"(?<!repac)[^0-9]2\\\\.0|\\\\bStereo\\\\b\" } }, { \"name\" : \"Not 3.0ch\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]3\\\\.0\" } }, { \"name\" : \"Not 4.0ch\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]4\\\\.0\" } }, { \"name\" : \"Not High Channel Count\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9][5-9]\\\\.[0-1]\" } }, { \"name\" : \"Not Mono\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]1\\\\.0|\\\\bMono\\\\b|\\\\[PCM \\\\]\" } } ] } TOP","title":"2.0 Stereo"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#30-sound","text":"json { \"name\" : \"3.0 Sound\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"3.0ch\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]3\\\\.0\" } }, { \"name\" : \"Not Mono\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]1\\\\.0|\\\\bMono\\\\b|\\\\[PCM \\\\]\" } }, { \"name\" : \"Not Stereo\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!repac)[^0-9]2\\\\.0|\\\\bStereo\\\\b\" } }, { \"name\" : \"Not 4.0ch\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]4\\\\.0\" } }, { \"name\" : \"Not High Channel Count\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9][5-9]\\\\.[0-1]\" } } ] } TOP","title":"3.0 Sound"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#40-sound","text":"json { \"name\" : \"4.0 Sound\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"4.0ch\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]4\\\\.0\" } }, { \"name\" : \"Not Mono\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]1\\\\.0|\\\\bMono\\\\b|\\\\[PCM \\\\]\" } }, { \"name\" : \"Not Stereo\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!repac)[^0-9]2\\\\.0|\\\\bStereo\\\\b\" } }, { \"name\" : \"Not 3.0ch\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]3\\\\.0\" } }, { \"name\" : \"Not High Channel Count\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9][5-9]\\\\.[0-1]\" } } ] } TOP","title":"4.0 Sound"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#51-surround","text":"json { \"name\" : \"5.1 Surround\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"5.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]5\\\\.[0-1]\" } }, { \"name\" : \"Not 7.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9][7-8]\\\\.[0-1]\" } }, { \"name\" : \"Not 9.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]9\\\\.[0-1]\" } }, { \"name\" : \"Not Low Channel Count\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!repac)[^0-9][1-4]\\\\.[0-1]|\\\\b(Stereo|Mono)\\\\b\" } } ] } TOP","title":"5.1 Surround"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#61-surround","text":"json { \"name\" : \"6.1 Surround\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"6.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]6\\\\.[0-1]\" } }, { \"name\" : \"Not 7.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9][7-8]\\\\.[0-1]\" } }, { \"name\" : \"Not 9.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]9\\\\.[0-1]\" } }, { \"name\" : \"Not Low Channel Count\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!repac)[^0-9][1-4]\\\\.[0-1]|\\\\b(Stereo|Mono)\\\\b\" } }, { \"name\" : \"Not 5.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]5\\\\.[0-1]\" } } ] } TOP","title":"6.1 Surround"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#71-surround","text":"json { \"name\" : \"7.1 Surround\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"7.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9][7-8]\\\\.[0-1]\" } }, { \"name\" : \"Not 9.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]9\\\\.[0-1]\" } }, { \"name\" : \"Not Low Channel Count\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!repac)[^0-9][1-4]\\\\.[0-1]|\\\\b(Stereo|Mono)\\\\b\" } } ] } TOP","title":"7.1 Surround"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#91-surround","text":"json { \"name\" : \"9.1 Surround\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"9.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9]9\\\\.[0-1]\" } }, { \"name\" : \"Not 7.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9][7-8]\\\\.[0-1]\" } }, { \"name\" : \"Not 5.1 Surround\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"[^0-9][5-6]\\\\.[0-1]\" } }, { \"name\" : \"Not Low Channel Count\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"(?<!repac)[^0-9][1-4]\\\\.[0-1]|\\\\b(Stereo|Mono)\\\\b\" } } ] } TOP","title":"9.1 Surround"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#hdr-metadata","text":"","title":"HDR metadata"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#dolby-vision","text":"Dolby Vision is a content mastering and delivery format similar to the HDR10 media profile. Dolby Vision is a proprietary, dynamic HDR format developed by Dolby Labs. By adjusting the picture on a scene-by-scene (and even frame-by-frame) basis, it lets you see more detail with better color accuracy. It is constantly making adjustments so that each image on the screen is optimized. json { \"name\" : \"DoVi\" , \"includeCustomFormatWhenRenaming\" : true , \"specifications\" : [{ \"name\" : \"Dolby Vision\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(DV|dovi)\\\\b|dolby.?vision\" } }] } TOP","title":"Dolby Vision"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#dolby-vision-single-layer","text":"Custom Format for Single Layer Dolby Vision releases. Note This used to be the the preferred option for PLeX with a Shield 2019 model that supports DV. But now DV is part of the MKV spec and ExoPlayer added native support. json { \"name\" : \"Dolby Vision (Single Layer)\" , \"includeCustomFormatWhenRenaming\" : true , \"specifications\" : [{ \"name\" : \"Dolby Vision (Single Layer)\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"sl.?dv|single.?layer.?dovi\" } }, { \"name\" : \"Remux\" , \"implementation\" : \"QualityModifierSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : 5 } } ] } TOP","title":"Dolby Vision (Single Layer)"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#hdr","text":"From Wikipedia, the free encyclopedia High-dynamic-range video (HDR video) is video having a dynamic range greater than that of standard-dynamic-range video (SDR video).HDR video involves capture, production, content/encoding, and display. HDR capture and displays are capable of brighter whites and deeper blacks. To accommodate this, HDR encoding standards allow for a higher maximum luminance and use at least a 10-bit dynamic range (color depth, compared to 8-bit for non-professional and 10-bit for professional SDR video) in order to maintain precision across this extended range. json { \"name\" : \"HDR\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"HDR\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bHDR(\\\\b|\\\\d)\" } }] } TOP","title":"HDR"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#hdr-indeterminate","text":"Some groups don't add HDR to their 4K release name so I suggest to add this Custom Format at the same score as you add one of your HDR Custom Formats. For now it's only FraMeSToR that doesn't add HDR to their release name but in the feature we can add more to it if needed. json { \"name\" : \"HDR (indeterminate)\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [ { \"name\" : \"FraMeSToR\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bFraMeSToR\\\\b\" } }, { \"name\" : \"2160p\" , \"implementation\" : \"ResolutionSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : 2160 } }, { \"name\" : \"HDR: HDR\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bHDR(\\\\b|\\\\d)\" } }, { \"name\" : \"DoVi: Dolby Vision\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b(DV|dovi)\\\\b|dolby.?vision\" } }, { \"name\" : \"SDR: SDR\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bSDR(\\\\b|\\\\d)\" } } ] } TOP","title":"HDR (indeterminate)"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#10-bit","text":"json { \"name\" : \"10 Bit\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"10 Bit\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\b10bit(\\\\b|\\\\d)\" } }] } TOP","title":"10 Bit"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#movie-versions","text":"","title":"Movie Versions"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#hybrid","text":"A hybrid release means any combination of sources (video + audio) and not a direct encode of a single source. Generally you can be sure that any hybrid that has been put together is the best quality release of a particular title. json { \"name\" : \"Hybrid\" , \"includeCustomFormatWhenRenaming\" : true , \"specifications\" : [{ \"name\" : \"Hybrid\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bhybrid(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Hybrid Release Group\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"-HYBRID\" } } ] } TOP","title":"Hybrid"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#remaster","text":"From Wikipedia, the free encyclopedia For the software term, see Software remastering. Remaster (also digital remastering and digitally remastered) refers to changing the quality of the sound or of the image, or both, of previously created recordings, either audiophonic, cinematic, or videographic. json { \"name\" : \"Remaster\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Remaster\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"Remaster\" } }, { \"name\" : \"Not 4K Remaster\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"4K\" } } ] } TOP","title":"Remaster"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#4k-remaster","text":"A remastered or mastered in 4K should give you usually the best picture and audio currently for the movie. Both are just names to describe the best possible currently for the movie. To be clear, the final digital films on the Mastered in 4K Blu-rays still only have the same 1920 x 1080 pixels of actual resolution as normal Blu-rays. But the argument goes that because these full HD files were derived from higher-resolution masters, their images will be more precise, with better colours, less noise, and enhanced sharpness and detail. Not least because the higher-resolution mastering process will provide more detail from the original print for the Blu-ray masters to draw on when going through their (hopefully\u2026) frame-by-frame compression process. Another important element of the Mastered in 4K discs is that they\u2019re all mastered with \u2018x.v.YCC\u2019 colour specification. This delivers an expanded colour range closer to that contained in original source material. json { \"name\" : \"4K Remaster\" , \"includeCustomFormatWhenRenaming\" : true , \"specifications\" : [{ \"name\" : \"Remaster\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"Remaster\" } }, { \"name\" : \"4K\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"4k\" } }, { \"name\" : \"Not 4K Resolution\" , \"implementation\" : \"ResolutionSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : 2160 } } ] } TOP","title":"4K Remaster"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#criterion-collection","text":"The Criterion Collection, Inc. (or simply Criterion) is an American home video distribution company which focuses on licensing \"important classic and contemporary films\" and selling them to film aficionados.Criterion has helped to standardize characteristics of home video such as film restoration, using the letterbox format for widescreen films, and adding bonus features and commentary tracks. json { \"name\" : \"Criterion Collection\" , \"includeCustomFormatWhenRenaming\" : true , \"specifications\" : [{ \"name\" : \"Criterion\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"criterion\" } }, { \"name\" : \"CC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"\\\\bCC\\\\b\" } } ] } TOP","title":"Criterion Collection"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#theatrical-cut","text":"The Theatrical Cut is the version of the film that was shown at cinemas. json { \"name\" : \"Theatrical Cut\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Theatrical\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"Theatrical\" } }] } TOP","title":"Theatrical Cut"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#special-edition","text":"Custom format for several Special Editions The Director's Cut is the version edited by the Director, usually for additional home media releases. An Extended Cut is usually any version of the film which is longer than the theatrical cut (though in very rare cases, its shorter). json { \"name\" : \"Special Edition\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Special Edition \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"(?<!^)\\\\b(extended|uncut|director|special|unrated|uncensored|cut|version|edition)(\\\\b|\\\\d)\" } }, { \"name\" : \"Not Theatrical \" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : \"Theatrical\" } } ] } TOP","title":"Special Edition"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#imax","text":"json { \"name\" : \"IMAX\" , \"includeCustomFormatWhenRenaming\" : true , \"specifications\" : [ { \"name\" : \"IMAX\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bIMAX\\\\b\" } } ] } TOP","title":"IMAX"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#misc-1000","text":"","title":"Misc (-1000)"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#br-disk","text":"This is a custom format to help Radarr recognize & ignore BR-DISK (ISO's and Blu-ray folder structure) in addition to the standard BR-DISK quality. You will need to add the following to your new Custom Format when created in your Quality Profile ( Setting => Profiles ) and then set the score to -1000 Note Depending on your renaming scheme it could happen that Radarr will match renamed files after they are downloaded and imported as BR-DISK , This is a cosmetic annoyance till I come up for another way to solve this, being that this Custom Format is used to not download BR-DISK it does its purpose as intended. Several reasons why this is happening: Blame the often wrongly used naming of x265 encodes. Radarr v3 uses dynamic custom formats. json { \"name\" : \"BR-DISK\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"avc|vc-1|hevc\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"avc|vc-1|hevc\" } }, { \"name\" : \"Remux\" , \"implementation\" : \"QualityModifierSpecification\" , \"negate\" : true , \"required\" : false , \"fields\" : { \"value\" : 5 } }, { \"name\" : \"WEBDL\" , \"implementation\" : \"SourceSpecification\" , \"negate\" : true , \"required\" : false , \"fields\" : { \"value\" : 7 } }, { \"name\" : \"^((?!x265).)*$\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"^((?!x265).)*$\" } } ] } TOP","title":"BR-DISK"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#evo-except-web-dl","text":"This group is often banned for the low quality Blu-ray releases, but their WEB-DL are okay. You will need to add the following to your new Custom Format when created in your Quality Profile ( Setting => Profiles ) and then set the score to -1000 json { \"name\" : \"EVO (except WEB-DL)\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"EVO\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"\\\\bEVO\\\\b\" } }, { \"name\" : \"WEBDL\" , \"implementation\" : \"SourceSpecification\" , \"negate\" : true , \"required\" : false , \"fields\" : { \"value\" : 7 } } ] } TOP","title":"EVO except WEB-DL"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#low-quality-releases","text":"A collection of known Low Quality groups that are often banned from the the top trackers because the lack of quality. Note You might want to add the following also EVO except WEB-DL BLOCK1 = Low-Quality Releases (often banned groups) BLOCK2 = Another Small list of often banned groups. BLOCK3 = And Another list. BLOCK4 = Rips from Scene and quick-to-release P2P groups while adequate, are not considered high quality. json { \"name\" : \"Low Quality Releases\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"[BLOCK1]\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"-aXXo|-CrEwSaDe|-DEViSE|-FaNGDiNG0|-FLAWL3SS|-FZHD|-FRDS|-HDTime|-IMAGINE|-iPlanet|-KingBen|-KiNGDOM|-KLAXXON|-Leffe|-LTRG|-mHD|-mSD|-NhaNc3|-nHD|-nikt0|-nSD|-PrisM|-PRODJi|-Rx|-RDN|-SANTi|-ViSION|-WAF|-WHiiZz|-x0r|\\\\bYIFY\\\\b|\\\\bYTS\\\\b|-STUTTERSHIT\" } }, { \"name\" : \"[BLOCK2]\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"-CDDHD|-EuReKA|-DDR|-DNL|-BARC0DE\" } }, { \"name\" : \"[BLOCK3]\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"\\\\bRARBG\\\\b|-FGT|-BReWeRS|-Grym|-LiGaS|-Zeus|-Tigole\" } }, { \"name\" : \"[BLOCK4]\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"-beAst|-CHD|-HDWinG|-MTeam|-MySiLU|-WiKi\" } } ] } TOP","title":"Low Quality Releases"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#7201080p-no-x265","text":"This blocks/ignores 720/1080p releases that are encoded in x265 You will need to add the following to your new Custom Format when created in your Quality Profile ( Setting => Profiles ) and then set the score to -1000 Quote x265 is good for for 4k stuff or 1080p if they used the the remuxes as source. If the media isn't source quality/remux, then there will be a loss of quality every time. Also, once you go x265, typically that file is done. It can't be changed to something else without a huge loss of quality. Something like 95% of video files are x264 and have much better direct play support. If you have more than a couple users, you will notice much more transcoding. Just depends on your priorities. So basically if you are storage poor and just need to save space, use x265. The catch is if you want best quality x265, you need source quality files, so you still have huge file sizes. If you want maximum compatibility and the option to change your files to something else later, then x264. It's all really dependent on specific situations for different people It's a shame that most x265 groups microsize the releases or use the x264 as source what results in low quality releases. And the few groups that do use the correct source suffer from it. So I created my own golden rule. 720/1080p => x264 2160p/4k => x265 json { \"name\" : \"720/1080p != x265\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [ { \"name\" : \"720p\" , \"implementation\" : \"ResolutionSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : 720 } }, { \"name\" : \"1080p\" , \"implementation\" : \"ResolutionSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : 1080 } }, { \"name\" : \"x265/HEVC\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[xh]\\\\.?265|\\\\bHEVC(\\\\b|\\\\d)\" } } ] } TOP","title":"720/1080p no x265"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#3d","text":"If you prefer or not prefer 3D. You can use Custom Format or use Restrictions ( Settings => Indexers => Restrictions ) what ever you prefer. json { \"name\" : \"3D\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"3d|sbs|half-ou\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"3d|sbs|half.?ou\" } }] } TOP","title":"3D"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#misc","text":"","title":"Misc"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#hq-p2p","text":"A collection of P2P groups that are known for their high quality releases json { \"name\" : \"HQ-P2P\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"[BLOCK1]\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"-BMF|-decibeL|\\\\bD-Z0N3\\\\b|\\\\bFTW-HD\\\\b|-HiFi|-NCmt|-OISTiLe|-TDD|\\\\bZQ\\\\b\" } }, { \"name\" : \"[BLOCK2]\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"-HiSD|-NTb|-ift|-geek|-tnp|-ncmt|-pter|-bbq\" } }, { \"name\" : \"[BLOCK3]\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"-CRiSC|-CtrlHD|-DON|\\\\b-EA\\\\b|-EbP|-LolHD|-SbR|-TayTo|-VietHD\" } }, { \"name\" : \"[Remux Groups]\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"-FraMeSToR|-EPSiLON|\\\\bKRaLiMaRKo\\\\b\" } } ] } TOP","title":"HQ-P2P"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#repack-proper","text":"json { \"name\" : \"Repack/Proper\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Repack\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"Repack\" } }, { \"name\" : \"Proper\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"Proper\" } }, { \"name\" : \"Rerip\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"Rerip\" } } ] } TOP","title":"Repack Proper"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#streaming-services","text":"Collection of Streaming Services Attention This CF only prefers the known streaming services and doesn't work the same way like the release profile that can be used in Sonarr to include the streaming service name in your renaming scheme when using {[Custom Formats]} !!! If you want to have this option then you need to add them all separate. json { \"name\" : \"Streaming Services\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Amazon\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(amzn|amazon).?web.?(dl|rip)\" } }, { \"name\" : \"Netflix\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(nf|netflix).?web.?(dl|rip)\" } }, { \"name\" : \"AppleTV+\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(atvp).?web.?(dl|rip)\" } }, { \"name\" : \"Disney+\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(dsnp|dsny|disney).?web.?(dl|rip)\" } }, { \"name\" : \"DCU\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(dcu).?web.?(dl|rip)\" } }, { \"name\" : \"HBO Max\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(hmax).?web.?(dl|rip)\" } }, { \"name\" : \"HBO\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(hbo).?web.?(dl|rip)\" } }, { \"name\" : \"Youtube Red\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(red).?web.?(dl|rip)\" } }, { \"name\" : \"Quibi\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(qibi).?web.?(dl|rip)\" } }, { \"name\" : \"iTunes\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(it).?web.?(dl|rip)\" } }, { \"name\" : \"Hulu\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"(hulu).?web.?(dl|rip)\" } } ] } TOP","title":"Streaming Services"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#x264","text":"x264 is a free software library and application for encoding video streams into the H.264/MPEG-4 AVC compression format, and is released under the terms of the GNU GPL . If you want maximum compatibility and have much better direct play support then use x264 for 720p/1080p json { \"name\" : \"x264\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"x264\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[xh]\\\\.?264|\\\\bAVC(\\\\b|\\\\d)\" } }, { \"name\" : \"Remux\" , \"implementation\" : \"QualityModifierSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : 5 } } ] } TOP","title":"x264"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#x265","text":"x265 is a free software library and application for encoding video streams into the H.265/MPEG-H HEVC compression format, and is released under the terms of the GNU GPL . Quote x265 is good for for 4k stuff or 1080p if they used the the remuxes as source. If the media isn't source quality/remux, then there will be a loss of quality every time. Something like 95% of video files are x264 and have much better direct play support. If you have more than a couple users, you will notice much more transcoding. Just depends on your priorities. So basically if you are storage poor and just need to save space, use x265. The catch is if you want best quality x265, you need source quality files, so you still have huge file sizes. If you want maximum compatibility and the option to change your files to something else later, then x264. It's all really dependent on specific situations for different people It's a shame that most x265 groups microsize the releases or use the x264 as source what results in low quality releases. And the few groups that do use the correct source suffer from it. So I created my own golden rule. 720/1080p => x264 2160p/4k => x265 If you want to make use of the Golden Rule you could make use of the following Custom Format 720/1080p no x265 Some extra info about 4K/X265 4k, transcoding, and you - aka the rules of 4k - a FAQ - Plex.tv Don\u2019t bother transcoding 4k If you cannot direct play 4k, then perhaps you should not even be collecting 4k. If you don\u2019t have the storage space for a copy of both 4k and 1080/720, then perhaps you should not even be collecting 4k. To avoid transcoding for remote and non-4k clients, keep your 4k content in separate plex libraries. json { \"name\" : \"x265\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"x265\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"[xh]\\\\.?265|\\\\bHEVC(\\\\b|\\\\d)\" } }, { \"name\" : \"Remux\" , \"implementation\" : \"QualityModifierSpecification\" , \"negate\" : true , \"required\" : true , \"fields\" : { \"value\" : 5 } } ] } TOP","title":"x265"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#freeleech","text":"Sometimes, torrent sites set a torrent to be freeleech. This means, that the download of this torrent will not count towards your download quota or ratio. This is really useful, if you do not have the best ratio yet. Attention Keep in mind not all trackers support this option. json { \"name\" : \"FreeLeech\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"FreeLeech\" , \"implementation\" : \"IndexerFlagSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : 1 } }] } TOP","title":"FreeLeech"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#dutch-groups","text":"If you prefer movies with also a Dutch audio track. json { \"name\" : \"Dutch Groups\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Dutch Groups\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"-CyTSuNee|-SHiTSoNy|-QoQ\" } }] } TOP","title":"Dutch Groups"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#anime-dual-audio","text":"json { \"name\" : \"Anime Dual Audio\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [ { \"name\" : \"Dual Audio\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"dual.?audio\" } }, { \"name\" : \"BluDragon\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"bludragon\" } }, { \"name\" : \"EN+JA\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"EN\\\\+JA|JA\\\\+EN\" } }, { \"name\" : \"ZR\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : false , \"fields\" : { \"value\" : \"\\\\bZR\\\\b\" } }, { \"name\" : \"Japanese Language\" , \"implementation\" : \"LanguageSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : 8 } } ] } TOP","title":"Anime Dual Audio"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#mpeg2","text":"json { \"name\" : \"MPEG2\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"MPEG2\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"MPEG-?2\" } }] } TOP","title":"MPEG2"},{"location":"Radarr/V3/Collection-of-Custom-Formats-for-RadarrV3/#multi","text":"json { \"name\" : \"Multi\" , \"includeCustomFormatWhenRenaming\" : false , \"specifications\" : [{ \"name\" : \"Multi\" , \"implementation\" : \"ReleaseTitleSpecification\" , \"negate\" : false , \"required\" : true , \"fields\" : { \"value\" : \"\\\\bMulti(\\\\b|\\\\d)\" } }] } TOP","title":"Multi"},{"location":"Radarr/V3/How-to-importexport-Custom-Formats-and-truly-make-use-of-it/","text":"How to import/export Custom Formats and make use of it \u00b6 Here I will try to explain how you can import Custom Formats for Radarr v3 and make the most use of it. Attention Keep in mind Custom Formats are made to fine tune your Quality Profile Quality Profile trumps Custom Formats How to import/export Custom Formats and make use of it How to import a JSON Custom Format How to make use of the Custom Formats in your profiles Tips how to setup the scores + examples How to import a JSON Custom Format \u00b6 In this example i will use the BR-DISK Custom Format the one most people don't want to download anyway and if you do then you probably don't use Radarr, Plex being both don't support it. Settings => Custom Formats Then click on the to add a new Custom Format. Followed by the Import in the lower left. In the empty Custom Format JSON box (1) you just paste the JSON what you got from the Custom Format Collection followed by the Import button (2). What you see in the red box is a example txt that you don't and can't remove! After selecting the Import button you will get a screen that has all the Custom Formats variables filled in correctly, all you need to do now is click on the Save button and you're done. How to make use of the Custom Formats in your profiles \u00b6 Now we need to make use of the Custom Formats we've added. Settings => Profiles Then select the profile that you use/prefer. The Custom Formats in the profiles needs editing on 2 spots. First we're going to set the scores for the Custom Formats and for this we scroll all the way down. And then we're going to set a score of -1000 to the BR-DISK to make sure it will be ignored for ever and never going to go over the Minimum Custom Format Score . After this we scroll all the way back up Profile name If you want that Radarr will upgrade till the quality set in (3.) Upgrade till the selected Quality The Minimum Custom Format Score allowed to download Keep upgrading Custom Format till this score is reached Your preferred language profile for your Releases Being we set BR-DISK to -1000 the chance that it will reach the Minimum Custom Format Score set in (4.) is really small. Info For Custom Formats you really don't want, set it to something really low like -1000 and not something like -10 being when you add a Custom Format what you prefer and you set it to something like +10 it could happen that the BR-DISK will be downloaded (-10)+(+10)=0 and your Minimum Custom Format Score is set at 0 . regarding option 4 I do know some people suggest not to use minus score for your Custom Formats and set option 4 to a higher score then 0. The reason why i don't prefer/use this is because you could limit your self when some new groups or what ever will be released. Also it makes it much more clear what you want and what you don't want Tip I also suggest to change the Propers and Repacks settings in Radarr Media Management => File Management to Do Not Prefer and use the Repack/Proper Custom Format. This way you make sure the Custom Formats preferences will be used and not ignored. Tips how to setup the scores \u00b6 Personally I would only add the Custom Formats you really are interested in especially in the beginning. So now the question what's the best score setup ? There isn't a best scores setup being that everyone has its own personal preference what they prefer Audio or Video or perhaps both. My suggestion is to create tiers of scores based on what things matter to you. examples \u00b6 Prefer Audio \u00b6 Lets say you prefer HD audio (with object metadata) Basic Dolby Digital < AAC < Basic DTS < DTS-ES < Dolby Digital Plus < DTS-HD HRA < PCM = FLAC < DTS-HD MA < TrueHD (not ATMOS) < DD+ ATMOS (lossy) = ATMOS (indeterminate) < DTS X < TrueHD ATMOS In this example above I have lossy Atmos over lossless DTS because the object metadata matters more to me over lossy vs lossless Separate all your audio codecs by 100 Separate special editions/hybrid/4k remaster, etc by 10 Separate channel count by 5 keep in mind some scores could add up so keep that in mind (depending which Custom Formats you've added and use). So it's important to keep this in mind when setting up your scores. Prefer HQ Encodes \u00b6 If you prefer HQ Encodes (Bluray-720/1080/2160p) I suggest to first follow the Quality Settings (File Size) If you think the sizes are to big to your preference then stop reading First I suggest to add the stuff you don't want with a minus score. Tip I personally suggest to use these minus scores for all your profiles. For this example we're going to add the following Custom Formats with a -1000 score. (Why ? read the description with the Custom Formats) Then the Custom Formats we're going to add to get the HQ releases. And you use the following main settings in your profile. Info Make sure you don't check the BR-DISK, The reason why I didn't select the WEB-DL 720p is because you will find hardly any releases that aren't done as 1080p WEB-DL The following workflow will be applied: It will download WEB-DL 1080p for the streaming movies you see more often. It will upgrade till Bluray-1080p. The downloaded media will be upgraded to any of the added Custom Formats till a score of 150. Info If you prefer 2160/4K encodes you might consider to enable HDR and set the Upgrade Until Quality to Bluray-2160p THNX \u00b6 A big thnx to rg9400 for providing me with info needed to create the Tips section.","title":"How to import/export Custom Formats and make use of it"},{"location":"Radarr/V3/How-to-importexport-Custom-Formats-and-truly-make-use-of-it/#how-to-importexport-custom-formats-and-make-use-of-it","text":"Here I will try to explain how you can import Custom Formats for Radarr v3 and make the most use of it. Attention Keep in mind Custom Formats are made to fine tune your Quality Profile Quality Profile trumps Custom Formats How to import/export Custom Formats and make use of it How to import a JSON Custom Format How to make use of the Custom Formats in your profiles Tips how to setup the scores + examples","title":"How to import/export Custom Formats and make use of it"},{"location":"Radarr/V3/How-to-importexport-Custom-Formats-and-truly-make-use-of-it/#how-to-import-a-json-custom-format","text":"In this example i will use the BR-DISK Custom Format the one most people don't want to download anyway and if you do then you probably don't use Radarr, Plex being both don't support it. Settings => Custom Formats Then click on the to add a new Custom Format. Followed by the Import in the lower left. In the empty Custom Format JSON box (1) you just paste the JSON what you got from the Custom Format Collection followed by the Import button (2). What you see in the red box is a example txt that you don't and can't remove! After selecting the Import button you will get a screen that has all the Custom Formats variables filled in correctly, all you need to do now is click on the Save button and you're done.","title":"How to import a JSON Custom Format"},{"location":"Radarr/V3/How-to-importexport-Custom-Formats-and-truly-make-use-of-it/#how-to-make-use-of-the-custom-formats-in-your-profiles","text":"Now we need to make use of the Custom Formats we've added. Settings => Profiles Then select the profile that you use/prefer. The Custom Formats in the profiles needs editing on 2 spots. First we're going to set the scores for the Custom Formats and for this we scroll all the way down. And then we're going to set a score of -1000 to the BR-DISK to make sure it will be ignored for ever and never going to go over the Minimum Custom Format Score . After this we scroll all the way back up Profile name If you want that Radarr will upgrade till the quality set in (3.) Upgrade till the selected Quality The Minimum Custom Format Score allowed to download Keep upgrading Custom Format till this score is reached Your preferred language profile for your Releases Being we set BR-DISK to -1000 the chance that it will reach the Minimum Custom Format Score set in (4.) is really small. Info For Custom Formats you really don't want, set it to something really low like -1000 and not something like -10 being when you add a Custom Format what you prefer and you set it to something like +10 it could happen that the BR-DISK will be downloaded (-10)+(+10)=0 and your Minimum Custom Format Score is set at 0 . regarding option 4 I do know some people suggest not to use minus score for your Custom Formats and set option 4 to a higher score then 0. The reason why i don't prefer/use this is because you could limit your self when some new groups or what ever will be released. Also it makes it much more clear what you want and what you don't want Tip I also suggest to change the Propers and Repacks settings in Radarr Media Management => File Management to Do Not Prefer and use the Repack/Proper Custom Format. This way you make sure the Custom Formats preferences will be used and not ignored.","title":"How to make use of the Custom Formats in your profiles"},{"location":"Radarr/V3/How-to-importexport-Custom-Formats-and-truly-make-use-of-it/#tips-how-to-setup-the-scores","text":"Personally I would only add the Custom Formats you really are interested in especially in the beginning. So now the question what's the best score setup ? There isn't a best scores setup being that everyone has its own personal preference what they prefer Audio or Video or perhaps both. My suggestion is to create tiers of scores based on what things matter to you.","title":"Tips how to setup the scores"},{"location":"Radarr/V3/How-to-importexport-Custom-Formats-and-truly-make-use-of-it/#examples","text":"","title":"examples"},{"location":"Radarr/V3/How-to-importexport-Custom-Formats-and-truly-make-use-of-it/#prefer-audio","text":"Lets say you prefer HD audio (with object metadata) Basic Dolby Digital < AAC < Basic DTS < DTS-ES < Dolby Digital Plus < DTS-HD HRA < PCM = FLAC < DTS-HD MA < TrueHD (not ATMOS) < DD+ ATMOS (lossy) = ATMOS (indeterminate) < DTS X < TrueHD ATMOS In this example above I have lossy Atmos over lossless DTS because the object metadata matters more to me over lossy vs lossless Separate all your audio codecs by 100 Separate special editions/hybrid/4k remaster, etc by 10 Separate channel count by 5 keep in mind some scores could add up so keep that in mind (depending which Custom Formats you've added and use). So it's important to keep this in mind when setting up your scores.","title":"Prefer Audio"},{"location":"Radarr/V3/How-to-importexport-Custom-Formats-and-truly-make-use-of-it/#prefer-hq-encodes","text":"If you prefer HQ Encodes (Bluray-720/1080/2160p) I suggest to first follow the Quality Settings (File Size) If you think the sizes are to big to your preference then stop reading First I suggest to add the stuff you don't want with a minus score. Tip I personally suggest to use these minus scores for all your profiles. For this example we're going to add the following Custom Formats with a -1000 score. (Why ? read the description with the Custom Formats) Then the Custom Formats we're going to add to get the HQ releases. And you use the following main settings in your profile. Info Make sure you don't check the BR-DISK, The reason why I didn't select the WEB-DL 720p is because you will find hardly any releases that aren't done as 1080p WEB-DL The following workflow will be applied: It will download WEB-DL 1080p for the streaming movies you see more often. It will upgrade till Bluray-1080p. The downloaded media will be upgraded to any of the added Custom Formats till a score of 150. Info If you prefer 2160/4K encodes you might consider to enable HDR and set the Upgrade Until Quality to Bluray-2160p","title":"Prefer HQ Encodes"},{"location":"Radarr/V3/How-to-importexport-Custom-Formats-and-truly-make-use-of-it/#thnx","text":"A big thnx to rg9400 for providing me with info needed to create the Tips section.","title":"THNX"},{"location":"Radarr/V3/Radarr-Quality-Settings-File-Size/","text":"Quality Settings (File Size) \u00b6 I often get the question what's the best Quality Settings to use, Well it's actually personal preference so I will show you a recommended Quality Settings. But before you continue to read, as with all my guides: If you don't care about quality then stop reading and see if the other tutorials are helpful for you. This Quality Settings has been created and tested with info I got from others, and release comparisons from different sources. FAQ FAQ \u00b6 Q: Why do you only show starting from HDTV720p? A: With the big screens these days anything lower doesn't look watchable Q: Why do you have some sized set to max? A: You probably didn't read the bold text above Q: When I set Bluray to MAX size I get often ISO's/ Bluray folder structure. A: You probable have configured your Quality Profiles wrong and enabled BR-DISK and didn't add the recommended Custom Profile to help Radarr to block/ignore it. BR-DISK Q: Some movies won't be grabbed because of these settings. A: If you notice that some movies won't be grabbed because of these size settings you can provide me a proof with a screenshot and the error it shows you when you do a interactive search (non redacted except the indexer/tracker if you want to). I will only accept changes that are International releases no multi, or dubbed language releases. I won't accept mislabeled source releases like from MeGusta, etc (they should learn to name their stuff decent first). I won't accept changes for micro sized releases. Documentaries and cartoons are often much smaller so I probably won't edit those either. Radarr Quality Definitions \u00b6","title":"Quality Settings (File Size)"},{"location":"Radarr/V3/Radarr-Quality-Settings-File-Size/#quality-settings-file-size","text":"I often get the question what's the best Quality Settings to use, Well it's actually personal preference so I will show you a recommended Quality Settings. But before you continue to read, as with all my guides: If you don't care about quality then stop reading and see if the other tutorials are helpful for you. This Quality Settings has been created and tested with info I got from others, and release comparisons from different sources. FAQ","title":"Quality Settings (File Size)"},{"location":"Radarr/V3/Radarr-Quality-Settings-File-Size/#faq","text":"Q: Why do you only show starting from HDTV720p? A: With the big screens these days anything lower doesn't look watchable Q: Why do you have some sized set to max? A: You probably didn't read the bold text above Q: When I set Bluray to MAX size I get often ISO's/ Bluray folder structure. A: You probable have configured your Quality Profiles wrong and enabled BR-DISK and didn't add the recommended Custom Profile to help Radarr to block/ignore it. BR-DISK Q: Some movies won't be grabbed because of these settings. A: If you notice that some movies won't be grabbed because of these size settings you can provide me a proof with a screenshot and the error it shows you when you do a interactive search (non redacted except the indexer/tracker if you want to). I will only accept changes that are International releases no multi, or dubbed language releases. I won't accept mislabeled source releases like from MeGusta, etc (they should learn to name their stuff decent first). I won't accept changes for micro sized releases. Documentaries and cartoons are often much smaller so I probably won't edit those either.","title":"FAQ"},{"location":"Radarr/V3/Radarr-Quality-Settings-File-Size/#radarr-quality-definitions","text":"","title":"Radarr Quality Definitions"},{"location":"Radarr/V3/Radarr-recommended-naming-scheme/","text":"Recommended naming scheme \u00b6 Often on the Radarr Discord people ask what's the recommended/best way to name your files. First off it's personal preference, but it's often recommended to add non-recoverable info. Why? If, for what ever reason, you ever need to do a re-install or re-import in Radarr or Plex/Emby/JellyFin it's nice to have all that info in the filename so it gets imported correctly and isn't incorrectly matched as HDTV or WEB-DL etc. The Tokens not available in the release won't be used/shown. Standard Movie Format \u00b6 All the details \u00b6 This naming scheme is made to be compatible with the New Plex Agent that now support IMDB and TMDB IDs in file names, if you don't need it or want it just remove [imdb-{ImdbId}] { Movie CleanTitle } {( Release Year )} { Edition Tags } [ imdb- { ImdbId }]{[ Custom Formats ]}{[ Quality Full ]}{[ MediaInfo 3D ]}{[ MediaInfo VideoDynamicRange ]}[{ Mediainfo VideoBitDepth } bit ][{ Mediainfo VideoCodec }]{[ Mediainfo AudioCodec }{ Mediainfo AudioChannels }]{ -Release Group } RESULT: The Movie Title (2010) Ultimate Extended Edition [imdb-tt0066921][Surround Sound x264][Bluray-1080p Proper][3D][HDR][10bit][x264][DTS 5.1]-EVOLVE If you do Anime If you do Anime you might consider to add the {MediaInfo AudioLanguages} token to your naming scheme. { Movie CleanTitle } {( Release Year )} { Edition Tags } [ imdb- { ImdbId }]{[ Custom Formats ]}{[ Quality Full ]}{[ MediaInfo 3D ]}{[ MediaInfo VideoDynamicRange ]}[{ Mediainfo VideoBitDepth } bit ][{ Mediainfo VideoCodec }]{[ Mediainfo AudioCodec }{ Mediainfo AudioChannels }]{ MediaInfo AudioLanguages }{ -Release Group } Minimal details + the irreplaceable data \u00b6 This naming scheme is made to be compatible with the New Plex Agent that now support IMDB and TMDB IDs in file names, if you don't need it or want it just remove [imdb-{ImdbId}] { Movie CleanTitle } {( Release Year )} [ imdb- { ImdbId }]{[ Quality Title ]}{[ MediaInfo AudioCodec }{ MediaInfo AudioChannels ]}{[ MediaInfo VideoCodec ]}{ -Release Group } RESULT: The Movie Title (2010) [imdb-tt0066921][Bluray-1080p][DTS 5.1][x264]-EVOLVE Note The officially supported format is {imdb-{ImdbId}} but plex also support (imdb-{ImdbId}) or [imdb-{ImdbId}] what you can read here , though the above should work for now. IMDb IDs are going to be very accurate and rarely change, but they may be missing for some movies added to Radarr. TMDB IDs, on the other hand, do change or are removed more frequently, but Radarr will always have this ID for each movie. Original Title vs Original Filename \u00b6 Want to keep the original release name that holds like all the info of the file then I suggest to use {Original Title} over {Original Filename} Why? The filename can be Obscured where the Release naming isn't especially when you use Usenet. {Original Title} => The.Movie.Title.2010.REMASTERED.1080p.BluRay.x264-GROUP {Original Filename} => group-karatekid-1080p or lchd-tkk1080p or t1i0p3s7i8yuti Movie Folder Format \u00b6 Minimal needed \u00b6 { Movie CleanTitle } ({ Release Year }) RESULT: The Movie Title (2010) Note Keep in mind adding anything more after the release year could give issues during a fresh import in to Radarr, but in this examples it helps for movies that have the same release name and year. Hint Radarr now supports iMDb ID and TMDb ID in the folder name. Quote From the a developer TMDb is usually better as it guarantees a match, imdb only gets matched if the TMDb entry has the correct imdb Id association. We don't actually talk to imdb Warning Please note that this pins the IMDb ID whenever the movie is added to Radarr, and it may be missing or incorrect at that time. If you instead add it in the filename, the IMDb ID will be freshly pulled for any download or upgrade. Another potential negative of using it in the folder is that folder renames are complex, lengthy, and potentially destructive in Radarr compared to file renames. { Movie CleanTitle } {( Release Year )} [ imdb- { ImdbId }] RESULT: The Movie Title (2010) [imdb-tt0066921] THNX: A big thnx to fryfrog and rg9400 for the suggestions.","title":"Recommended naming scheme"},{"location":"Radarr/V3/Radarr-recommended-naming-scheme/#recommended-naming-scheme","text":"Often on the Radarr Discord people ask what's the recommended/best way to name your files. First off it's personal preference, but it's often recommended to add non-recoverable info. Why? If, for what ever reason, you ever need to do a re-install or re-import in Radarr or Plex/Emby/JellyFin it's nice to have all that info in the filename so it gets imported correctly and isn't incorrectly matched as HDTV or WEB-DL etc. The Tokens not available in the release won't be used/shown.","title":"Recommended naming scheme"},{"location":"Radarr/V3/Radarr-recommended-naming-scheme/#standard-movie-format","text":"","title":"Standard Movie Format"},{"location":"Radarr/V3/Radarr-recommended-naming-scheme/#all-the-details","text":"This naming scheme is made to be compatible with the New Plex Agent that now support IMDB and TMDB IDs in file names, if you don't need it or want it just remove [imdb-{ImdbId}] { Movie CleanTitle } {( Release Year )} { Edition Tags } [ imdb- { ImdbId }]{[ Custom Formats ]}{[ Quality Full ]}{[ MediaInfo 3D ]}{[ MediaInfo VideoDynamicRange ]}[{ Mediainfo VideoBitDepth } bit ][{ Mediainfo VideoCodec }]{[ Mediainfo AudioCodec }{ Mediainfo AudioChannels }]{ -Release Group } RESULT: The Movie Title (2010) Ultimate Extended Edition [imdb-tt0066921][Surround Sound x264][Bluray-1080p Proper][3D][HDR][10bit][x264][DTS 5.1]-EVOLVE If you do Anime If you do Anime you might consider to add the {MediaInfo AudioLanguages} token to your naming scheme. { Movie CleanTitle } {( Release Year )} { Edition Tags } [ imdb- { ImdbId }]{[ Custom Formats ]}{[ Quality Full ]}{[ MediaInfo 3D ]}{[ MediaInfo VideoDynamicRange ]}[{ Mediainfo VideoBitDepth } bit ][{ Mediainfo VideoCodec }]{[ Mediainfo AudioCodec }{ Mediainfo AudioChannels }]{ MediaInfo AudioLanguages }{ -Release Group }","title":"All the details"},{"location":"Radarr/V3/Radarr-recommended-naming-scheme/#minimal-details-the-irreplaceable-data","text":"This naming scheme is made to be compatible with the New Plex Agent that now support IMDB and TMDB IDs in file names, if you don't need it or want it just remove [imdb-{ImdbId}] { Movie CleanTitle } {( Release Year )} [ imdb- { ImdbId }]{[ Quality Title ]}{[ MediaInfo AudioCodec }{ MediaInfo AudioChannels ]}{[ MediaInfo VideoCodec ]}{ -Release Group } RESULT: The Movie Title (2010) [imdb-tt0066921][Bluray-1080p][DTS 5.1][x264]-EVOLVE Note The officially supported format is {imdb-{ImdbId}} but plex also support (imdb-{ImdbId}) or [imdb-{ImdbId}] what you can read here , though the above should work for now. IMDb IDs are going to be very accurate and rarely change, but they may be missing for some movies added to Radarr. TMDB IDs, on the other hand, do change or are removed more frequently, but Radarr will always have this ID for each movie.","title":"Minimal details + the irreplaceable data"},{"location":"Radarr/V3/Radarr-recommended-naming-scheme/#original-title-vs-original-filename","text":"Want to keep the original release name that holds like all the info of the file then I suggest to use {Original Title} over {Original Filename} Why? The filename can be Obscured where the Release naming isn't especially when you use Usenet. {Original Title} => The.Movie.Title.2010.REMASTERED.1080p.BluRay.x264-GROUP {Original Filename} => group-karatekid-1080p or lchd-tkk1080p or t1i0p3s7i8yuti","title":"Original Title vs  Original Filename"},{"location":"Radarr/V3/Radarr-recommended-naming-scheme/#movie-folder-format","text":"","title":"Movie Folder Format"},{"location":"Radarr/V3/Radarr-recommended-naming-scheme/#minimal-needed","text":"{ Movie CleanTitle } ({ Release Year }) RESULT: The Movie Title (2010) Note Keep in mind adding anything more after the release year could give issues during a fresh import in to Radarr, but in this examples it helps for movies that have the same release name and year. Hint Radarr now supports iMDb ID and TMDb ID in the folder name. Quote From the a developer TMDb is usually better as it guarantees a match, imdb only gets matched if the TMDb entry has the correct imdb Id association. We don't actually talk to imdb Warning Please note that this pins the IMDb ID whenever the movie is added to Radarr, and it may be missing or incorrect at that time. If you instead add it in the filename, the IMDb ID will be freshly pulled for any download or upgrade. Another potential negative of using it in the folder is that folder renames are complex, lengthy, and potentially destructive in Radarr compared to file renames. { Movie CleanTitle } {( Release Year )} [ imdb- { ImdbId }] RESULT: The Movie Title (2010) [imdb-tt0066921] THNX: A big thnx to fryfrog and rg9400 for the suggestions.","title":"Minimal needed"},{"location":"Radarr/V3/Radarr-remote-path-mapping/","text":"Remote Path Mappings \u00b6 Seems that allot of people don't understand how the remote path mapping works for Radarr. I will try to explain it with some screenshots and a short description. Remote Path Mapping acts as a dumb find Remote Path and replace with Local Path Do I need Remote Path Mappings \u00b6 If Radarr and your download client are not on the same server/system. If you use either merged local/remote setups using mergerfs or similar You run dockers and DON'T have Consistent and well planned paths. Note If you run dockers it would be smarter to fix the problem at the source what's causing the actual issue. Radarr Wiki Servarr - Docker Guide TRaSH Guides How do I recognize that I need remote path mappings \u00b6 Your download stays in your download client and Radarr doesn't want to import it. Go to Activity => Queue You will see a orange download icon, hover with your mouse over it and you will get a error that looks a bit like this. Go to System => Events You will see somewhere a error that looks a bit like this. The following error could also mean that you need remote path mapping So looking at these screenshot it seems you need to make use of Remote Path Mappings. How do I setup remote path mappings \u00b6 Go to Settings => Download Clients Scroll all the way down where you see Remote Path Mappings and click on the right on the plus sign. A screen will popup with the following options. Host => This is the hostname or IP you set in your download client settings. Remote Path => The download path that you've set in your download client. Local Path => The path Radarr needs to access the same path. Host \u00b6 To find what you need to put in your host Go to Settings => Download Clients There you open up the download client for this example I will be using SABnzbd \u200b This is what you put in your Host in Remote Path Mapping. This could be a hostname , container name or a IP Address Example what to add in Add Remote Path Mapping Remote Path \u00b6 To find what you need to put in your remote path you need to open up your download client and look what you've used there as download location. In SABnzbd go to settings => Folders Example what to add in Add Remote Path Mapping Local Path \u00b6 To find what you need to put in in your local path you need to know how Radarr is able to access the files your download client downloaded. And this can be done in different ways. Mounting/Network share what ever but Radarr needs to have local access to it so you need to figure this one out your self what's the best way for Radarr to access the download clients downloaded files. Click on the browse button and browse to the location where the files are accessible for Radarr. Example what to add in Add Remote Path Mapping The final result will look something like this. After these changes the file should be able to be imported by Radarr.","title":"Remote Path Mappings"},{"location":"Radarr/V3/Radarr-remote-path-mapping/#remote-path-mappings","text":"Seems that allot of people don't understand how the remote path mapping works for Radarr. I will try to explain it with some screenshots and a short description. Remote Path Mapping acts as a dumb find Remote Path and replace with Local Path","title":"Remote Path Mappings"},{"location":"Radarr/V3/Radarr-remote-path-mapping/#do-i-need-remote-path-mappings","text":"If Radarr and your download client are not on the same server/system. If you use either merged local/remote setups using mergerfs or similar You run dockers and DON'T have Consistent and well planned paths. Note If you run dockers it would be smarter to fix the problem at the source what's causing the actual issue. Radarr Wiki Servarr - Docker Guide TRaSH Guides","title":"Do I need Remote Path Mappings"},{"location":"Radarr/V3/Radarr-remote-path-mapping/#how-do-i-recognize-that-i-need-remote-path-mappings","text":"Your download stays in your download client and Radarr doesn't want to import it. Go to Activity => Queue You will see a orange download icon, hover with your mouse over it and you will get a error that looks a bit like this. Go to System => Events You will see somewhere a error that looks a bit like this. The following error could also mean that you need remote path mapping So looking at these screenshot it seems you need to make use of Remote Path Mappings.","title":"How do I recognize that I need remote path mappings"},{"location":"Radarr/V3/Radarr-remote-path-mapping/#how-do-i-setup-remote-path-mappings","text":"Go to Settings => Download Clients Scroll all the way down where you see Remote Path Mappings and click on the right on the plus sign. A screen will popup with the following options. Host => This is the hostname or IP you set in your download client settings. Remote Path => The download path that you've set in your download client. Local Path => The path Radarr needs to access the same path.","title":"How do I setup remote path mappings"},{"location":"Radarr/V3/Radarr-remote-path-mapping/#host","text":"To find what you need to put in your host Go to Settings => Download Clients There you open up the download client for this example I will be using SABnzbd \u200b This is what you put in your Host in Remote Path Mapping. This could be a hostname , container name or a IP Address Example what to add in Add Remote Path Mapping","title":"Host"},{"location":"Radarr/V3/Radarr-remote-path-mapping/#remote-path","text":"To find what you need to put in your remote path you need to open up your download client and look what you've used there as download location. In SABnzbd go to settings => Folders Example what to add in Add Remote Path Mapping","title":"Remote Path"},{"location":"Radarr/V3/Radarr-remote-path-mapping/#local-path","text":"To find what you need to put in in your local path you need to know how Radarr is able to access the files your download client downloaded. And this can be done in different ways. Mounting/Network share what ever but Radarr needs to have local access to it so you need to figure this one out your self what's the best way for Radarr to access the download clients downloaded files. Click on the browse button and browse to the location where the files are accessible for Radarr. Example what to add in Add Remote Path Mapping The final result will look something like this. After these changes the file should be able to be imported by Radarr.","title":"Local Path"},{"location":"Sonarr/","text":"Sonarr \u00b6 Here you will find a collection of Sonarr Guides I made. v2 Sonarr Branch: master \u00b6 (stable) (v2) Builds Pushed only when intentionally released Github Branch: master Docker: hotio/sonarr:latest ghcr.io/hotio/sonarr:latest v3 Sonarr Branch: phantom-develop \u00b6 (Stable Beta) (v3) Builds pushed when complete Github Branch: phantom-develop Docker: hotio/sonarr:nightly ghcr.io/hotio/sonarr:nightly","title":"Home"},{"location":"Sonarr/#sonarr","text":"Here you will find a collection of Sonarr Guides I made.","title":"Sonarr"},{"location":"Sonarr/#v2-sonarr-branch-master","text":"(stable) (v2) Builds Pushed only when intentionally released Github Branch: master Docker: hotio/sonarr:latest ghcr.io/hotio/sonarr:latest","title":"v2 Sonarr Branch: master"},{"location":"Sonarr/#v3-sonarr-branch-phantom-develop","text":"(Stable Beta) (v3) Builds pushed when complete Github Branch: phantom-develop Docker: hotio/sonarr:nightly ghcr.io/hotio/sonarr:nightly","title":"v3 Sonarr Branch: phantom-develop"},{"location":"Sonarr/V2/How-To-Seperate-Different-WEB-DL-Releases/","text":"How To Seperate Different WEB-DL Releases \u00b6 Sonarr How To Seperate Different WEB-DL Releases (iTunes.WEB-DL, AMZN.WEB-DL, NF.WEB-DL) This will show you How To Seperate Different WEB-DL Releases (iTunes.WEB-DL, AMZN.WEB-DL, NF.WEB-DL) in Sonarr. How To \u00b6 Add the following to your Settings => Indexers => \"Add new restriction\". Keep a eye on the tags you're using because you need to add them also to your shows when you want them as a certain release. Note The reason why i've added \"RARBG\" as \"Must not contain\" is because I dislike retagged releases, AMZN.WEB-DL \u00b6 Must contain: AMZN.WEB-DL Must not contain: RARBG, -BAMBOOZLE Tags: amzn-webdl NF.WEB-DL \u00b6 Must contain: NF.WEB-DL Must not contain: RARBG, -BAMBOOZLE Tags: nf-webdl WEB-DL \u00b6 Must contain: WEB-DL Must not contain: WEBRip, -focus, x264, AMZN, -CTL, -PLAYREADY, Amazon.WEB DL, Amazon, -QoQ, -TBS, -STRiFE Tags: web-dl Note The \"Must not contain\" names/groups are there because they don't release iTunes WEB-DL or the ones you find are mislabeld or stripped/re-encoded like the -TBS releases.","title":"How To Seperate Different WEB-DL Releases"},{"location":"Sonarr/V2/How-To-Seperate-Different-WEB-DL-Releases/#how-to-seperate-different-web-dl-releases","text":"Sonarr How To Seperate Different WEB-DL Releases (iTunes.WEB-DL, AMZN.WEB-DL, NF.WEB-DL) This will show you How To Seperate Different WEB-DL Releases (iTunes.WEB-DL, AMZN.WEB-DL, NF.WEB-DL) in Sonarr.","title":"How To Seperate Different WEB-DL Releases"},{"location":"Sonarr/V2/How-To-Seperate-Different-WEB-DL-Releases/#how-to","text":"Add the following to your Settings => Indexers => \"Add new restriction\". Keep a eye on the tags you're using because you need to add them also to your shows when you want them as a certain release. Note The reason why i've added \"RARBG\" as \"Must not contain\" is because I dislike retagged releases,","title":"How To"},{"location":"Sonarr/V2/How-To-Seperate-Different-WEB-DL-Releases/#amznweb-dl","text":"Must contain: AMZN.WEB-DL Must not contain: RARBG, -BAMBOOZLE Tags: amzn-webdl","title":"AMZN.WEB-DL"},{"location":"Sonarr/V2/How-To-Seperate-Different-WEB-DL-Releases/#nfweb-dl","text":"Must contain: NF.WEB-DL Must not contain: RARBG, -BAMBOOZLE Tags: nf-webdl","title":"NF.WEB-DL"},{"location":"Sonarr/V2/How-To-Seperate-Different-WEB-DL-Releases/#web-dl","text":"Must contain: WEB-DL Must not contain: WEBRip, -focus, x264, AMZN, -CTL, -PLAYREADY, Amazon.WEB DL, Amazon, -QoQ, -TBS, -STRiFE Tags: web-dl Note The \"Must not contain\" names/groups are there because they don't release iTunes WEB-DL or the ones you find are mislabeld or stripped/re-encoded like the -TBS releases.","title":"WEB-DL"},{"location":"Sonarr/V2/Restrictions-For-Better-Quality-Releases/","text":"Restrictions For Better Quality Releases \u00b6 Sonarr Restrictions For Better Quality Releases (Bad Quality (Video or Audio wise), Wrongly Tagged or Re-Tagged) This is a list of groups and words you can add to Sonarr Restrictions For Better Quality Releases (Bad Quality (Video or Audio wise), Wrongly Tagged or Re-Tagged). The info has been collected from different major sites/trackers (mostly banned on them also) Must Not Contain \u00b6 Add the following to your Settings => Indexers => \"Must Not Contain\" General \u00b6 (small file), AVIGUY, BDSCR, BRrip, CAM, CAMRIP, ChameE, COMPULSION, core2hd, DDC, divx, DVDSCR, DVDSCREENER, GiuseppeTnT, HD2DVD, HDCAM, -HDChina, HDTS, Micromkv, MrLss, -NOHATE, PDVD, QWR, reenc, REenCO, SCR, SCREENER, sneaky, TELECINE, TELESYNC, vain, VOSTFR, WEB&Cap, WEBCAP, WEB-Cap, WORKPRINT, WP, XviD, Xvid Re-encodes \u00b6 -[Oj], -3LTON, -AFG, -ELiTE, -FUM, -iFT, -LOAD, -playXD, -ViSiON, -ZKBL, -ZmN, Mislabeled, YouTube sourced, altered, or re-encoded \u00b6 -4yEo, -eSc, -FGT, -JIVE, -NhaNc3, -RAPiDCOWS, -TM, -XS, Same resolution re-encodes \u00b6 -AnimeRG, -DeadFish, Hi10, -xRed, x264 re-encodes if a scene release exists in any resolution \u00b6 -FUM, -mSD, -REsuRRecTioN, -RMTeam, -SPASM, (Bad Quality (Video or Audio wise), Wrongly Tagged, Re-Tagged) \u00b6 [G2G], [rartv], [TRP], -aXXo, -CrEwSaDe, -FLEET, -IMMERSE, -LiGaS, -LOL, m2TV, -maximersk, -mHD, NhaNc3, nHD, nSD, PRODJi, SANTi, -tbs, -TOPTEK, -ViSiON, -W4F, -WARENiK, -YFN, -ZKBL, -ZmN, Don't Want Dubs or often HardSubs \u00b6 danish, dksubs, dubbed, FRENCH, GERMAN, ITALIAN, korean, korsub, SPANISH, swedish, swesub, truefrench, turkish, HebSubs, Unwanted Codecs or Containers \u00b6 .mp4, h.265, HEVC, x265,","title":"Restrictions For Better Quality Releases"},{"location":"Sonarr/V2/Restrictions-For-Better-Quality-Releases/#restrictions-for-better-quality-releases","text":"Sonarr Restrictions For Better Quality Releases (Bad Quality (Video or Audio wise), Wrongly Tagged or Re-Tagged) This is a list of groups and words you can add to Sonarr Restrictions For Better Quality Releases (Bad Quality (Video or Audio wise), Wrongly Tagged or Re-Tagged). The info has been collected from different major sites/trackers (mostly banned on them also)","title":"Restrictions For Better Quality Releases"},{"location":"Sonarr/V2/Restrictions-For-Better-Quality-Releases/#must-not-contain","text":"Add the following to your Settings => Indexers => \"Must Not Contain\"","title":"Must Not Contain"},{"location":"Sonarr/V2/Restrictions-For-Better-Quality-Releases/#general","text":"(small file), AVIGUY, BDSCR, BRrip, CAM, CAMRIP, ChameE, COMPULSION, core2hd, DDC, divx, DVDSCR, DVDSCREENER, GiuseppeTnT, HD2DVD, HDCAM, -HDChina, HDTS, Micromkv, MrLss, -NOHATE, PDVD, QWR, reenc, REenCO, SCR, SCREENER, sneaky, TELECINE, TELESYNC, vain, VOSTFR, WEB&Cap, WEBCAP, WEB-Cap, WORKPRINT, WP, XviD,","title":"General"},{"location":"Sonarr/V2/Restrictions-For-Better-Quality-Releases/#xvid-re-encodes","text":"-[Oj], -3LTON, -AFG, -ELiTE, -FUM, -iFT, -LOAD, -playXD, -ViSiON, -ZKBL, -ZmN,","title":"Xvid Re-encodes"},{"location":"Sonarr/V2/Restrictions-For-Better-Quality-Releases/#mislabeled-youtube-sourced-altered-or-re-encoded","text":"-4yEo, -eSc, -FGT, -JIVE, -NhaNc3, -RAPiDCOWS, -TM, -XS,","title":"Mislabeled, YouTube sourced, altered, or re-encoded"},{"location":"Sonarr/V2/Restrictions-For-Better-Quality-Releases/#same-resolution-re-encodes","text":"-AnimeRG, -DeadFish, Hi10, -xRed,","title":"Same resolution re-encodes"},{"location":"Sonarr/V2/Restrictions-For-Better-Quality-Releases/#x264-re-encodes-if-a-scene-release-exists-in-any-resolution","text":"-FUM, -mSD, -REsuRRecTioN, -RMTeam, -SPASM,","title":"x264 re-encodes if a scene release exists in any resolution"},{"location":"Sonarr/V2/Restrictions-For-Better-Quality-Releases/#bad-quality-video-or-audio-wise-wrongly-tagged-re-tagged","text":"[G2G], [rartv], [TRP], -aXXo, -CrEwSaDe, -FLEET, -IMMERSE, -LiGaS, -LOL, m2TV, -maximersk, -mHD, NhaNc3, nHD, nSD, PRODJi, SANTi, -tbs, -TOPTEK, -ViSiON, -W4F, -WARENiK, -YFN, -ZKBL, -ZmN,","title":"(Bad Quality (Video or Audio wise), Wrongly Tagged, Re-Tagged)"},{"location":"Sonarr/V2/Restrictions-For-Better-Quality-Releases/#dont-want-dubs-or-often-hardsubs","text":"danish, dksubs, dubbed, FRENCH, GERMAN, ITALIAN, korean, korsub, SPANISH, swedish, swesub, truefrench, turkish, HebSubs,","title":"Don't Want Dubs or often HardSubs"},{"location":"Sonarr/V2/Restrictions-For-Better-Quality-Releases/#unwanted-codecs-or-containers","text":".mp4, h.265, HEVC, x265,","title":"Unwanted Codecs or Containers"},{"location":"Sonarr/V3/Remote-Path-Mappings-explained-for-Sonarr/","text":"Remote Path Mappings explained \u00b6 Remote Path Mappings explained for Sonarr Seems that allot of people don't understand how the remote path mapping works for Sonarr. I will try to explain it with some screenshots and a short description. Do I need Remote Path Mappings \u00b6 If your download client is on another system then Sonarr then you probably need to make use of Remote Path Mappings. You will get a error that looks a little bit like the following screenshot. So looking at this screenshot it seems we need to make use of Remote Path Mappings How \u00b6 First we navigate in Sonarr to the Settings => Download Clients Tab. At the bottom you choose Add new mapping A screen will popup with the following options. Host => This is the hostname or IP you set in your download client settings. Remote Path => The download path that you've set in your download client. Local Path => The path Sonarr needs to access the same path. Examples QBittorrent Host \u00b6 To find what you need to put in your host you navigate in Sonarr to the Settings => Download Clients Tab. There you open up the download client for this example I will be using QBittorrent This is what you put in your Host in Remote Path Mapping. Remote Path \u00b6 To find what you need to put in your remote path you need to open up your download client and look what you've used there as download location. In QBittorrent navigate to Tools => Options (or ALT+O) and navigate to the Download settings. This is what you add in your Remote Path in Remote Path Mapping. Local Path \u00b6 To find what you need to put in in your local path you need to know how Sonarr is able to access the files your download client downloaded. And this can be done in different ways. Mounting/Network share what ever but Sonarr needs to have local access to it so you need to figure this one out your self what's the best way for Sonarr to access the download clients downloaded files. The final result will look something like this.","title":"Remote Path Mappings explained"},{"location":"Sonarr/V3/Remote-Path-Mappings-explained-for-Sonarr/#remote-path-mappings-explained","text":"Remote Path Mappings explained for Sonarr Seems that allot of people don't understand how the remote path mapping works for Sonarr. I will try to explain it with some screenshots and a short description.","title":"Remote Path Mappings explained"},{"location":"Sonarr/V3/Remote-Path-Mappings-explained-for-Sonarr/#do-i-need-remote-path-mappings","text":"If your download client is on another system then Sonarr then you probably need to make use of Remote Path Mappings. You will get a error that looks a little bit like the following screenshot. So looking at this screenshot it seems we need to make use of Remote Path Mappings","title":"Do I need Remote Path Mappings"},{"location":"Sonarr/V3/Remote-Path-Mappings-explained-for-Sonarr/#how","text":"First we navigate in Sonarr to the Settings => Download Clients Tab. At the bottom you choose Add new mapping A screen will popup with the following options. Host => This is the hostname or IP you set in your download client settings. Remote Path => The download path that you've set in your download client. Local Path => The path Sonarr needs to access the same path. Examples QBittorrent","title":"How"},{"location":"Sonarr/V3/Remote-Path-Mappings-explained-for-Sonarr/#host","text":"To find what you need to put in your host you navigate in Sonarr to the Settings => Download Clients Tab. There you open up the download client for this example I will be using QBittorrent This is what you put in your Host in Remote Path Mapping.","title":"Host"},{"location":"Sonarr/V3/Remote-Path-Mappings-explained-for-Sonarr/#remote-path","text":"To find what you need to put in your remote path you need to open up your download client and look what you've used there as download location. In QBittorrent navigate to Tools => Options (or ALT+O) and navigate to the Download settings. This is what you add in your Remote Path in Remote Path Mapping.","title":"Remote Path"},{"location":"Sonarr/V3/Remote-Path-Mappings-explained-for-Sonarr/#local-path","text":"To find what you need to put in in your local path you need to know how Sonarr is able to access the files your download client downloaded. And this can be done in different ways. Mounting/Network share what ever but Sonarr needs to have local access to it so you need to figure this one out your self what's the best way for Sonarr to access the download clients downloaded files. The final result will look something like this.","title":"Local Path"},{"location":"Sonarr/V3/Sonarr-Quality-Settings-File-Size/","text":"Quality Settings (File Size) \u00b6 I often get the question what's the best Quality Settings to use, Well it's actually personal preference so I will show you a recommended Quality Settings. But before you continue to read, as with all my guides: If you don't care about quality then stop reading and see if the other tutorials are helpful for you. This Quality Settings has been created and tested with info I got from others, and release comparisons from different sources. I only do WEB-DL my self for TV shows because in my opinion WEB-DL is the sweet spot between Quality and Size and you often don't see big difference anyway for TV shows. (Except for shows like GOT, Vikings, etc) FAQ FAQ \u00b6 Q: Why do you only show starting from HDTV720p? A: With the big screens these days anything lower doesn't look watchable Q: Why do you have some sized set so high? A: You probably didn't read the bold text above, I also need to keep in mind usenet releases that are often bigger then torrent releases. Q: You noticed that some episodes don't grab because of these settings. A: If you notice that some episodes won't be grabbed because of these size settings you can provide me a proof with a screenshot and the error it shows you when you do a interactive search (non redacted except the indexer/tracker if you want to). I will only accept changes that are International releases no multi, or dubbed language releases. I won't accept mislabeled source releases like from MeGusta, etc (they should learn to name their stuff decent first). I won't accept changes for micro sized releases. Documentaries and cartoons are often much smaller so I probably won't edit those either. Sonarr Quality Definitions \u00b6","title":"Quality Settings (File Size)"},{"location":"Sonarr/V3/Sonarr-Quality-Settings-File-Size/#quality-settings-file-size","text":"I often get the question what's the best Quality Settings to use, Well it's actually personal preference so I will show you a recommended Quality Settings. But before you continue to read, as with all my guides: If you don't care about quality then stop reading and see if the other tutorials are helpful for you. This Quality Settings has been created and tested with info I got from others, and release comparisons from different sources. I only do WEB-DL my self for TV shows because in my opinion WEB-DL is the sweet spot between Quality and Size and you often don't see big difference anyway for TV shows. (Except for shows like GOT, Vikings, etc) FAQ","title":"Quality Settings (File Size)"},{"location":"Sonarr/V3/Sonarr-Quality-Settings-File-Size/#faq","text":"Q: Why do you only show starting from HDTV720p? A: With the big screens these days anything lower doesn't look watchable Q: Why do you have some sized set so high? A: You probably didn't read the bold text above, I also need to keep in mind usenet releases that are often bigger then torrent releases. Q: You noticed that some episodes don't grab because of these settings. A: If you notice that some episodes won't be grabbed because of these size settings you can provide me a proof with a screenshot and the error it shows you when you do a interactive search (non redacted except the indexer/tracker if you want to). I will only accept changes that are International releases no multi, or dubbed language releases. I won't accept mislabeled source releases like from MeGusta, etc (they should learn to name their stuff decent first). I won't accept changes for micro sized releases. Documentaries and cartoons are often much smaller so I probably won't edit those either.","title":"FAQ"},{"location":"Sonarr/V3/Sonarr-Quality-Settings-File-Size/#sonarr-quality-definitions","text":"","title":"Sonarr Quality Definitions"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/","text":"Release Profile RegEx (Anime) \u00b6 Note This Guide is Created and Maintained by Visorask/Visorak It's recommended to run 2 Sonarr's 1 for Anime and 1 for normal tv shows, or you can make use of tags. Being that release profiles are global without the use of a tag. Dual-Audio Regex \u00b6 Having tested most of these settings, they work pretty well but Anime is a fickle beast to toy with so be warned. Anime Delete \u00b6 If you have issues with extra files being download like NCED or NCOP If you have issues with sonarr picking up a bunch of: NCED NCOP Music Videos OP's Then this script (linux based only) will delete these files and get rid of them and you don't have to worry about them cluttering up your Auto or Manual import process. #!/usr/bin/env bash # Set the following location to your completed download location for Anime. # Usually one of the following paths: # Dockers => /data/{usenet|torrents}/anime # Cloudbox => /mnt/local/downloads/nzbs/nzbget/completed/sonarranime location = \"/your/download/path/here\" find $location -type f \\( -iname \"*op[0-9]*\" -o -iname \"*nced*\" -o -iname \"*ncop*\" -o -iname \"*music video*\" \\) -exec rm -rf {} \\; This script will be called through a custom connection in sonarr. Copy the contents of the script into whatever filepath sonarr has access to ( /config/app/ or /appdata/sonarr/scripts ) Edit the location=\"/your/download/path/here\" and make sure it's in quotes. Then save it and chmod +x the script. In Sonarr go to Settings => Connect => Click on the + Symbol => and select Custom Script Change Name to whatever you like. Select On Grab and On Import . Click the Folder icon or type in the path to the script you chose earlier. Now when you download or import any files the script will run and clear out those files that you most likely won't use and if you want them well this script isn't for you. Media Management \u00b6 Note There a few settings which make life a lot easier when tracking down and keeping certain information for your Anime and with tweaks to make it work better with HamaAgent for plex. Suggested naming scheme \u00b6 For this I used the Sonarr Recommended naming scheme for Sonarr with only a small change for a formatting error to be fixed and the Series Folder Format for easier matching. Anime Episode Format \u00b6 Has all necessary information and a little extra if you needed to rebuild. { Series TitleYear } - S { season:00 } E { episode:00 } - { absolute:000 } - { Episode CleanTitle } [{ Preferred Words }{ Quality Full }]{[ MediaInfo VideoDynamicRange ]}[{ MediaInfo VideoBitDepth } bit ]{[ MediaInfo VideoCodec ]}[{ Mediainfo AudioCodec } { Mediainfo AudioChannels }]{ MediaInfo AudioLanguages }{ -Release Group } RESULTS: Single Episode: The Series Title! (2010) - S01E01 - 001 - Episode Title 1 [AMZN WEBDL-1080p v2][HDR][10bit][x264][DTS 5.1][FLAC][JA]-RlsGrp Multi Episode: The Series Title! (2010) - S01E01-E02-E03 - 001-002-003 - Episode Title [AMZN WEBDL-1080p v2][HDR][10bit][x264][DTS 5.1][FLAC][JA]-RlsGrp Series Folder Format \u00b6 Adding year back in with tvdb id allows matching to be correct. Thanks salty. { Series TitleTheYear } [ tvdb- { TvdbId }] RESULT: The Series Title! (2010) [tvdb-12345] Season Folder Format \u00b6 The only one real option to use in my opinion. Season { season:00 } RESULT: Season 01 Multi-Episode Style \u00b6 Scene RESULTS: Example Quality Profile \u00b6 We need to add HDTV-1080p and Bluray-1080p into the same group as WEBDL-1080p and WEBRip-1080p so that it will download correctly and not upgrade past HDTV-1080P if Preferred Words does not allow it. Indexers \u00b6 We need to add the Anime Categories to our indexers otherwise this all won't work very well. Example We need to open Settings -> Indexers Select the Indexer(s) you would like to use for Anime Select the dropdown for Anime Categories . Select the Anime category. Click outside the pop-up modal but inside the Add Indexer modal. Note Check mark Include Preferred when Renaming where applicable and add {Preferred Words} to your renaming scheme else you could get a download loop issues!!! Release Profiles \u00b6 Note We're going to make use of 2 separate release profiles. First Release Profile \u00b6 Important DO Check mark Include Preferred when Renaming on this release profile. Multi-Audio \u00b6 Add this to your Preferred with a score of [500] / ( multi [ ._- ] ?audio ) /i Dual-Audio \u00b6 Add this to your Preferred with a score of [0] . This is for renames only and why it is at 0 . It is also added in the second profile. This one is to ensure that the preferred words get added. / ( dual [ ._- ] ?audio ) /i Optional (uncut|unrated|uncensored) \u00b6 Add this to your Preferred with a score of [100]/[-10000] If you would like it to be priority then set to 100 . If you do not want uncensored set it to -10000 . If you don't care either way just leave it out. The reasoning behind only 100 is so that it doesn't trump other release further up in the chain, this way it will trump maybe a couple release but not more. And -10000 to hopefully put it at the bottom of any tier list if you don't want it. / ( uncut | unrated | uncensored | \\b ( AT [ -_. ] ?X ) \\b ) /i Note When done it should look something like this: Second Release Profile \u00b6 Warning DO NOT Check mark Include Preferred when Renaming Must Not Contain \u00b6 The reason most of these are added is due to their shitty quality or just in general are not as good as other stuff that is out there. This can be tweaked as needed. Let me know if you run into any issues here. You should be able to just copy paste these in one go. If there is a reason something shouldn't be here let me know and your logic and I will be open to adjusting. Important If you would like dub releases then remove the last 2 lines and do not add them. / ( \\[ EMBER \\] | -EMBER \\b ) /i, / ( CuaP | PnPSubs | ICEBLUE | SLAX | U3-Web ) /i, / ( Raws-Maji | \\b KRP \\b | M@nI | Kanjouteki | PuyaSubs ) /i, / \\b ( Beatrice | ohys | Kawaiika | neko | daddy )[ ._- ] ? ( raws ) \\b /i, / \\b ( LowPower | Scryous )[ ._- ] ? ( raws ) \\b /i, / \\b ( NS | AREY | BDMV | BDVD | BJX | DKB | DP | TnF ) \\b /i, / ( Amb3r | DsunS | ExREN | \\$ tore-Chill ) /i, / ( \\[ Hatsuyuki \\] | -Hatsuyuki \\b | \\[ Hitoku \\] | -Hitoki \\b ) /i, / ( \\[ Foxtrot \\] | -Foxtrot \\b | HollowRoxas | \\b MGD \\b ) /i, / ( JacobSwaggedUp | KEKMASTERS | \\[ Mites \\] | -Mites \\b ) /i, / ( neoHEVC | Pantsu | \\[ Pao \\] | -Pao \\b | Plex Friendly ) /i, / ( Rando235 | RandomRemux | Reaktor | RightShiftBy2 ) /i, / ( \\b SHFS \\b | StrayGods | \\b UQW \\b | Yabai_Desu_Ne ) /i, / ( YakuboEncodes | \\b ( WtF [ ._- ] ?Anime ) \\b ) /i, / (( funi | eng ( lish ) ? ) _?dub | \\b dub ( bed ) ? \\b ) /i, / ( Golumpa | torenter69 | KamiFS | KaiDubs ) /i Preferred \u00b6 Note 2 lines in one grouping is just there for readability purposes but achieves the same result and score. Add this to your Preferred with a score of [501] Note This is set to 501 so that it may jump 1 tier if need be but not more. /dual [ ._- ] ?audio | EN \\+ JA | JA \\+ EN/i Important These next few are optional but they are here to move releases up over lower tiers of 1080/720p or WEB-DL/Blu-Ray . Will add another note like this to end the optional section. Add this to your Preferred with a score of [100] Note We are adding this as 100 so that any unknown Blu-Ray can jump tiers inside the Subs categories but not interfere with any tiers above. / \\b ( ?: ( BluRay | Blu-Ray | BDMux | BD ( ?!$ )) | ( BDRip ) | ( BRRip ))( ?: \\b | $ | [ . ]) /ix Add this to your Preferred with a score of [15] / \\b ( WEB [ -_. ] DL | WEBDL | WebHD | [ . ] WEB [ . ]( ?: [ xh ] 26 [ 45 ] | DDP?5 [ . ] 1 ) | [ . ]( ?-i:WEB ) $ | \\d +0p ( ?:WEB-DLMux | \\b\\s\\/\\s WEB \\s\\/\\s\\b )) /ix Add this to your Preferred with a score of [10] / ( WebRip | Web-Rip | WEBMux ) /ix Add this to your Preferred with a score of [5] / \\b ( ?: ( 1080p | 1920x1080 | 1440p | FHD | 1080i | 4kto1080p )) \\b /i Important This is the end of the optional section. Add this to your Preferred with a score of [4000] BluRay-Remux / Dual-Audio / 1st Tier / ( deanzel | \\b ZR \\b | \\b CTR \\b | \\b SCY \\b | \\b MK \\b | TTGA ) /i / ( \\b Shir \\b | LostYears | BluDragon | KAWAiREMUX ) /i / ( \\b AC \\b | ShadyCrab | Rasetsu | Raizel | Dragon-Releases ) /i / ( \\[ Spark \\] | -Spark \\b | \\b REVO \\b | \\b SRLS \\b | ANThELIa ) /i / ( \\[ Vanilla \\] | -Vanilla \\b | \\b AP \\b ) /i Add this to your Preferred with a score of [3750] BluRay / Dual-Audio / Special (Releases they have are in between below releases and remuxes above.) / ( E [ .- ] N [ .- ] D ) /i Add this to your Preferred with a score of [3500] BluRay / Dual-Audio / 1st Tier / ( \\b HAiKU \\b | Exiled-Destiny | \\b ( E-D ) \\b | Koten [ ._- ] Gars ) /i / ( \\[ GHOST \\] | -GHOST \\b | \\[ NPC \\] | -NPC \\b | \\b CBM \\b ) /i / ( \\b KH \\b | \\b CBT \\b | naiyas | ShowY | Kametsu | \\b Pn8 \\b | Hark0N ) /i Add this to your Preferred with a score of [3000] BluRay / Dual-Audio / Scene|P2P Groups / ( \\b DHD \\b | RedBlade | TENEIGHTY | WaLMaRT ) /i / ( \\b BMF \\b | \\[ STRiFE \\] | -STRiFE \\b ) /i / ( MKVULTRA | iAHD | ANiHLS ) /i Add this to your Preferred with a score of [2500] BluRay / Dual-Audio / 2ndd Tier / ( \\[ YURASUKA \\] | -YURASUKA \\b | karios | Arukoru ) /i / ( \\b RH \\b | \\[ Prof \\] | -Prof \\b ) /i Add this to your Preferred with a score of [2000] WebSource / Dual|Multi-Audio / ( DragsterPS ) /i Add this to your Preferred with a score of [1500] WebSource / Dual-Audio / ( xPearse | \\b MCR \\b | \\b KS \\b | KiyoshiStar ) /i Add this to your Preferred with a score of [1000] DVD / Dual-Audio / ( \\b ( A-L ) \\b ) /i Add this to your Preferred with a score of [300] Subs with multi such as German, French , Spanish, Italian, Russian, Arabic, Portuguese and English / ( Erai-raws | KAN3D2M ) /i Add this to your Preferred with a score of [250] Subs / ( HorribleSubs | SubsPlease | SallySubs ) /i Add this to your Preferred with a score of [200] Subs 2nd Tier / ( \\[ Mysteria \\] | -Mysteria \\b | Asenshi | AkihitoSubs | \\b ASW \\b ) /i / ( \\[ meta \\] | -meta \\b | BlueLobster ) /i Add this to your Preferred with a score of [150] Subs 3rd Tier / ( Commie | \\b GJM \\b | kBaraka ) /i Add this to your Preferred with a score of [100] FanSubs 1st Tier / ( \\b CH \\b | \\b FFF \\b | Licca | Soldado | SNSbu ) /i / ( Coalgirls | BlurayDesuYo | DameDesuYo ) /i Add this to your Preferred with a score of [50] FanSubs 2nd Tier / ( \\[ Orphan \\] | -Orphan \\b | \\[ Yabai \\] | -Yabai \\b | \\b Nii-sama \\b ) /i / ( \\[ Doki \\] | -Doki \\b | \\[ Chihiro \\] | -Chihiro \\b | Final8 ) /i Note These are extra parameters that can help and are not needed but are nice to have. They are set low mainly to supercede themselves and not interfere with other releases. Add this to your Preferred with a score of [1] Adds Hi10|Hi10p into a match. Prefers this over some erroneous matches. / ( 10 .?bit | hi10p ) /i Add this to your Preferred with a score of [1] Adds version due to anime groups sometimes fixing issues with their releases. / \\d ( v2 ) \\b /i Add this to your Preferred with a score of [2] / \\d ( v3 ) \\b /i Add this to your Preferred with a score of [3] / \\d ( v4 ) \\b /i Note This section can be controversial but most of these releases are micro/mini encodes or crappy quality. I personally add them into the do not want section but I will leave them here with negative values so you can still grab them if all else fails. Add this to your Preferred with a score of [-10000] Sub-Par Releases 1st Tier (Re-encoded to crap or really small filesizes) (Little less worse than the rest) / ( \\[ Judas \\] | -Judas | \\[ Cleo \\] | -Cleo ) /i / ( AnimeRG | bonkai77 | URANiME ) /i Add this to your Preferred with a score of [-15000] Sub-Par Releases 2nd Tier (Re-encoded to crap or really small filesizes) (Seperated onto separate lines for readability) / ( \\[ Pixel \\] | -Pixel \\b\\[ EDGE \\] | -EDGE \\b | \\[ Ranger \\] | -Ranger \\b ) /i / ( SpaceFish | DeadFish | \\b DB \\b | Man \\. K | \\b HR \\b ) /i / ( BakedFish | N [ eo ][ wo ] b [ ._- ] ?Subs | \\b Anime Time \\b ) /i / ( AnimeKaizoku | Kaizoku | \\b CBB \\b | phazer11 ) /i / ( iPUNISHER | MiniTheatre | MiniFreeza | Mr \\. Deadpool ) /i / ( NemDiggers | Project-gxs | youshikibi ) /i / ( \\b MD \\b | Pog42 | mdcx | \\b PAS \\b | SHiN-gx ) /i / ( A-Destiny | TOPKEK | \\b UwU \\b | DARKFLiX ) /i / ( \\[ Maximus \\] | -Maximus \\b | \\[ 224 \\] | -224 \\b ) /i / ( \\[ Harunatsu \\] | -Harunatsu \\b ) /i / ( \\[ tenshi \\] | -tenshi \\b ) /i / ( \\[ Davinci \\] | -Davinci \\b ) /i If you would like the above to be in DO NOT WANT in an easy format here it is. / ( \\[ Pixel \\] | -Pixel \\b\\[ EDGE \\] | -EDGE \\b | \\[ Ranger \\] | -Ranger \\b ) /i, / ( SpaceFish | DeadFish | \\b DB \\b | Man \\. K | \\b HR \\b ) /i, / ( BakedFish | N [ eo ][ wo ] b [ ._- ] ?Subs | \\b Anime Time \\b ) /i, / ( AnimeKaizoku | Kaizoku | \\b CBB \\b | phazer11 ) /i, / ( iPUNISHER | MiniTheatre | MiniFreeza | Mr \\. Deadpool ) /i, / ( NemDiggers | Project-gxs | youshikibi ) /i, / ( \\b MD \\b | Pog42 | mdcx | \\b PAS \\b | SHiN-gx ) /i, / ( A-Destiny | TOPKEK | \\b UwU \\b | DARKFLiX ) /i, / ( \\[ Maximus \\] | -Maximus \\b | \\[ 224 \\] | -224 \\b ) /i, / ( \\[ Harunatsu \\] | -Harunatsu \\b ) /i, / ( \\[ tenshi \\] | -tenshi \\b ) /i, / ( \\[ Davinci \\] | -Davinci \\b ) /i Note When done it should look something like this: Completed \u00b6 When completed your Release Profiles should look like this: Acknowledgements \u00b6 Most of my information and knowledge came from: Kaiser (Guidance on anime groups) rg9400 (Guidance on regex fixes, anime groups and general knowledge share.) Drazzilb (Guidance on regex fixes, anime groups and general knowledge share.) TRaSH (For allowing me to utilize his website for my guide and general knowledge share.) Thanks a bunch!!","title":"Release Profile RegEx (Anime)"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#release-profile-regex-anime","text":"Note This Guide is Created and Maintained by Visorask/Visorak It's recommended to run 2 Sonarr's 1 for Anime and 1 for normal tv shows, or you can make use of tags. Being that release profiles are global without the use of a tag.","title":"Release Profile RegEx (Anime)"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#dual-audio-regex","text":"Having tested most of these settings, they work pretty well but Anime is a fickle beast to toy with so be warned.","title":"Dual-Audio Regex"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#anime-delete","text":"If you have issues with extra files being download like NCED or NCOP If you have issues with sonarr picking up a bunch of: NCED NCOP Music Videos OP's Then this script (linux based only) will delete these files and get rid of them and you don't have to worry about them cluttering up your Auto or Manual import process. #!/usr/bin/env bash # Set the following location to your completed download location for Anime. # Usually one of the following paths: # Dockers => /data/{usenet|torrents}/anime # Cloudbox => /mnt/local/downloads/nzbs/nzbget/completed/sonarranime location = \"/your/download/path/here\" find $location -type f \\( -iname \"*op[0-9]*\" -o -iname \"*nced*\" -o -iname \"*ncop*\" -o -iname \"*music video*\" \\) -exec rm -rf {} \\; This script will be called through a custom connection in sonarr. Copy the contents of the script into whatever filepath sonarr has access to ( /config/app/ or /appdata/sonarr/scripts ) Edit the location=\"/your/download/path/here\" and make sure it's in quotes. Then save it and chmod +x the script. In Sonarr go to Settings => Connect => Click on the + Symbol => and select Custom Script Change Name to whatever you like. Select On Grab and On Import . Click the Folder icon or type in the path to the script you chose earlier. Now when you download or import any files the script will run and clear out those files that you most likely won't use and if you want them well this script isn't for you.","title":"Anime Delete"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#media-management","text":"Note There a few settings which make life a lot easier when tracking down and keeping certain information for your Anime and with tweaks to make it work better with HamaAgent for plex.","title":"Media Management"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#suggested-naming-scheme","text":"For this I used the Sonarr Recommended naming scheme for Sonarr with only a small change for a formatting error to be fixed and the Series Folder Format for easier matching.","title":"Suggested naming scheme"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#anime-episode-format","text":"Has all necessary information and a little extra if you needed to rebuild. { Series TitleYear } - S { season:00 } E { episode:00 } - { absolute:000 } - { Episode CleanTitle } [{ Preferred Words }{ Quality Full }]{[ MediaInfo VideoDynamicRange ]}[{ MediaInfo VideoBitDepth } bit ]{[ MediaInfo VideoCodec ]}[{ Mediainfo AudioCodec } { Mediainfo AudioChannels }]{ MediaInfo AudioLanguages }{ -Release Group } RESULTS: Single Episode: The Series Title! (2010) - S01E01 - 001 - Episode Title 1 [AMZN WEBDL-1080p v2][HDR][10bit][x264][DTS 5.1][FLAC][JA]-RlsGrp Multi Episode: The Series Title! (2010) - S01E01-E02-E03 - 001-002-003 - Episode Title [AMZN WEBDL-1080p v2][HDR][10bit][x264][DTS 5.1][FLAC][JA]-RlsGrp","title":"Anime Episode Format"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#series-folder-format","text":"Adding year back in with tvdb id allows matching to be correct. Thanks salty. { Series TitleTheYear } [ tvdb- { TvdbId }] RESULT: The Series Title! (2010) [tvdb-12345]","title":"Series Folder Format"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#season-folder-format","text":"The only one real option to use in my opinion. Season { season:00 } RESULT: Season 01","title":"Season Folder Format"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#multi-episode-style","text":"Scene RESULTS: Example","title":"Multi-Episode Style"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#quality-profile","text":"We need to add HDTV-1080p and Bluray-1080p into the same group as WEBDL-1080p and WEBRip-1080p so that it will download correctly and not upgrade past HDTV-1080P if Preferred Words does not allow it.","title":"Quality Profile"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#indexers","text":"We need to add the Anime Categories to our indexers otherwise this all won't work very well. Example We need to open Settings -> Indexers Select the Indexer(s) you would like to use for Anime Select the dropdown for Anime Categories . Select the Anime category. Click outside the pop-up modal but inside the Add Indexer modal. Note Check mark Include Preferred when Renaming where applicable and add {Preferred Words} to your renaming scheme else you could get a download loop issues!!!","title":"Indexers"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#release-profiles","text":"Note We're going to make use of 2 separate release profiles.","title":"Release Profiles"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#first-release-profile","text":"Important DO Check mark Include Preferred when Renaming on this release profile.","title":"First Release Profile"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#multi-audio","text":"Add this to your Preferred with a score of [500] / ( multi [ ._- ] ?audio ) /i","title":"Multi-Audio"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#dual-audio","text":"Add this to your Preferred with a score of [0] . This is for renames only and why it is at 0 . It is also added in the second profile. This one is to ensure that the preferred words get added. / ( dual [ ._- ] ?audio ) /i","title":"Dual-Audio"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#optional-uncutunrateduncensored","text":"Add this to your Preferred with a score of [100]/[-10000] If you would like it to be priority then set to 100 . If you do not want uncensored set it to -10000 . If you don't care either way just leave it out. The reasoning behind only 100 is so that it doesn't trump other release further up in the chain, this way it will trump maybe a couple release but not more. And -10000 to hopefully put it at the bottom of any tier list if you don't want it. / ( uncut | unrated | uncensored | \\b ( AT [ -_. ] ?X ) \\b ) /i Note When done it should look something like this:","title":"Optional (uncut|unrated|uncensored)"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#second-release-profile","text":"Warning DO NOT Check mark Include Preferred when Renaming","title":"Second Release Profile"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#must-not-contain","text":"The reason most of these are added is due to their shitty quality or just in general are not as good as other stuff that is out there. This can be tweaked as needed. Let me know if you run into any issues here. You should be able to just copy paste these in one go. If there is a reason something shouldn't be here let me know and your logic and I will be open to adjusting. Important If you would like dub releases then remove the last 2 lines and do not add them. / ( \\[ EMBER \\] | -EMBER \\b ) /i, / ( CuaP | PnPSubs | ICEBLUE | SLAX | U3-Web ) /i, / ( Raws-Maji | \\b KRP \\b | M@nI | Kanjouteki | PuyaSubs ) /i, / \\b ( Beatrice | ohys | Kawaiika | neko | daddy )[ ._- ] ? ( raws ) \\b /i, / \\b ( LowPower | Scryous )[ ._- ] ? ( raws ) \\b /i, / \\b ( NS | AREY | BDMV | BDVD | BJX | DKB | DP | TnF ) \\b /i, / ( Amb3r | DsunS | ExREN | \\$ tore-Chill ) /i, / ( \\[ Hatsuyuki \\] | -Hatsuyuki \\b | \\[ Hitoku \\] | -Hitoki \\b ) /i, / ( \\[ Foxtrot \\] | -Foxtrot \\b | HollowRoxas | \\b MGD \\b ) /i, / ( JacobSwaggedUp | KEKMASTERS | \\[ Mites \\] | -Mites \\b ) /i, / ( neoHEVC | Pantsu | \\[ Pao \\] | -Pao \\b | Plex Friendly ) /i, / ( Rando235 | RandomRemux | Reaktor | RightShiftBy2 ) /i, / ( \\b SHFS \\b | StrayGods | \\b UQW \\b | Yabai_Desu_Ne ) /i, / ( YakuboEncodes | \\b ( WtF [ ._- ] ?Anime ) \\b ) /i, / (( funi | eng ( lish ) ? ) _?dub | \\b dub ( bed ) ? \\b ) /i, / ( Golumpa | torenter69 | KamiFS | KaiDubs ) /i","title":"Must Not Contain"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#preferred","text":"Note 2 lines in one grouping is just there for readability purposes but achieves the same result and score. Add this to your Preferred with a score of [501] Note This is set to 501 so that it may jump 1 tier if need be but not more. /dual [ ._- ] ?audio | EN \\+ JA | JA \\+ EN/i Important These next few are optional but they are here to move releases up over lower tiers of 1080/720p or WEB-DL/Blu-Ray . Will add another note like this to end the optional section. Add this to your Preferred with a score of [100] Note We are adding this as 100 so that any unknown Blu-Ray can jump tiers inside the Subs categories but not interfere with any tiers above. / \\b ( ?: ( BluRay | Blu-Ray | BDMux | BD ( ?!$ )) | ( BDRip ) | ( BRRip ))( ?: \\b | $ | [ . ]) /ix Add this to your Preferred with a score of [15] / \\b ( WEB [ -_. ] DL | WEBDL | WebHD | [ . ] WEB [ . ]( ?: [ xh ] 26 [ 45 ] | DDP?5 [ . ] 1 ) | [ . ]( ?-i:WEB ) $ | \\d +0p ( ?:WEB-DLMux | \\b\\s\\/\\s WEB \\s\\/\\s\\b )) /ix Add this to your Preferred with a score of [10] / ( WebRip | Web-Rip | WEBMux ) /ix Add this to your Preferred with a score of [5] / \\b ( ?: ( 1080p | 1920x1080 | 1440p | FHD | 1080i | 4kto1080p )) \\b /i Important This is the end of the optional section. Add this to your Preferred with a score of [4000] BluRay-Remux / Dual-Audio / 1st Tier / ( deanzel | \\b ZR \\b | \\b CTR \\b | \\b SCY \\b | \\b MK \\b | TTGA ) /i / ( \\b Shir \\b | LostYears | BluDragon | KAWAiREMUX ) /i / ( \\b AC \\b | ShadyCrab | Rasetsu | Raizel | Dragon-Releases ) /i / ( \\[ Spark \\] | -Spark \\b | \\b REVO \\b | \\b SRLS \\b | ANThELIa ) /i / ( \\[ Vanilla \\] | -Vanilla \\b | \\b AP \\b ) /i Add this to your Preferred with a score of [3750] BluRay / Dual-Audio / Special (Releases they have are in between below releases and remuxes above.) / ( E [ .- ] N [ .- ] D ) /i Add this to your Preferred with a score of [3500] BluRay / Dual-Audio / 1st Tier / ( \\b HAiKU \\b | Exiled-Destiny | \\b ( E-D ) \\b | Koten [ ._- ] Gars ) /i / ( \\[ GHOST \\] | -GHOST \\b | \\[ NPC \\] | -NPC \\b | \\b CBM \\b ) /i / ( \\b KH \\b | \\b CBT \\b | naiyas | ShowY | Kametsu | \\b Pn8 \\b | Hark0N ) /i Add this to your Preferred with a score of [3000] BluRay / Dual-Audio / Scene|P2P Groups / ( \\b DHD \\b | RedBlade | TENEIGHTY | WaLMaRT ) /i / ( \\b BMF \\b | \\[ STRiFE \\] | -STRiFE \\b ) /i / ( MKVULTRA | iAHD | ANiHLS ) /i Add this to your Preferred with a score of [2500] BluRay / Dual-Audio / 2ndd Tier / ( \\[ YURASUKA \\] | -YURASUKA \\b | karios | Arukoru ) /i / ( \\b RH \\b | \\[ Prof \\] | -Prof \\b ) /i Add this to your Preferred with a score of [2000] WebSource / Dual|Multi-Audio / ( DragsterPS ) /i Add this to your Preferred with a score of [1500] WebSource / Dual-Audio / ( xPearse | \\b MCR \\b | \\b KS \\b | KiyoshiStar ) /i Add this to your Preferred with a score of [1000] DVD / Dual-Audio / ( \\b ( A-L ) \\b ) /i Add this to your Preferred with a score of [300] Subs with multi such as German, French , Spanish, Italian, Russian, Arabic, Portuguese and English / ( Erai-raws | KAN3D2M ) /i Add this to your Preferred with a score of [250] Subs / ( HorribleSubs | SubsPlease | SallySubs ) /i Add this to your Preferred with a score of [200] Subs 2nd Tier / ( \\[ Mysteria \\] | -Mysteria \\b | Asenshi | AkihitoSubs | \\b ASW \\b ) /i / ( \\[ meta \\] | -meta \\b | BlueLobster ) /i Add this to your Preferred with a score of [150] Subs 3rd Tier / ( Commie | \\b GJM \\b | kBaraka ) /i Add this to your Preferred with a score of [100] FanSubs 1st Tier / ( \\b CH \\b | \\b FFF \\b | Licca | Soldado | SNSbu ) /i / ( Coalgirls | BlurayDesuYo | DameDesuYo ) /i Add this to your Preferred with a score of [50] FanSubs 2nd Tier / ( \\[ Orphan \\] | -Orphan \\b | \\[ Yabai \\] | -Yabai \\b | \\b Nii-sama \\b ) /i / ( \\[ Doki \\] | -Doki \\b | \\[ Chihiro \\] | -Chihiro \\b | Final8 ) /i Note These are extra parameters that can help and are not needed but are nice to have. They are set low mainly to supercede themselves and not interfere with other releases. Add this to your Preferred with a score of [1] Adds Hi10|Hi10p into a match. Prefers this over some erroneous matches. / ( 10 .?bit | hi10p ) /i Add this to your Preferred with a score of [1] Adds version due to anime groups sometimes fixing issues with their releases. / \\d ( v2 ) \\b /i Add this to your Preferred with a score of [2] / \\d ( v3 ) \\b /i Add this to your Preferred with a score of [3] / \\d ( v4 ) \\b /i Note This section can be controversial but most of these releases are micro/mini encodes or crappy quality. I personally add them into the do not want section but I will leave them here with negative values so you can still grab them if all else fails. Add this to your Preferred with a score of [-10000] Sub-Par Releases 1st Tier (Re-encoded to crap or really small filesizes) (Little less worse than the rest) / ( \\[ Judas \\] | -Judas | \\[ Cleo \\] | -Cleo ) /i / ( AnimeRG | bonkai77 | URANiME ) /i Add this to your Preferred with a score of [-15000] Sub-Par Releases 2nd Tier (Re-encoded to crap or really small filesizes) (Seperated onto separate lines for readability) / ( \\[ Pixel \\] | -Pixel \\b\\[ EDGE \\] | -EDGE \\b | \\[ Ranger \\] | -Ranger \\b ) /i / ( SpaceFish | DeadFish | \\b DB \\b | Man \\. K | \\b HR \\b ) /i / ( BakedFish | N [ eo ][ wo ] b [ ._- ] ?Subs | \\b Anime Time \\b ) /i / ( AnimeKaizoku | Kaizoku | \\b CBB \\b | phazer11 ) /i / ( iPUNISHER | MiniTheatre | MiniFreeza | Mr \\. Deadpool ) /i / ( NemDiggers | Project-gxs | youshikibi ) /i / ( \\b MD \\b | Pog42 | mdcx | \\b PAS \\b | SHiN-gx ) /i / ( A-Destiny | TOPKEK | \\b UwU \\b | DARKFLiX ) /i / ( \\[ Maximus \\] | -Maximus \\b | \\[ 224 \\] | -224 \\b ) /i / ( \\[ Harunatsu \\] | -Harunatsu \\b ) /i / ( \\[ tenshi \\] | -tenshi \\b ) /i / ( \\[ Davinci \\] | -Davinci \\b ) /i If you would like the above to be in DO NOT WANT in an easy format here it is. / ( \\[ Pixel \\] | -Pixel \\b\\[ EDGE \\] | -EDGE \\b | \\[ Ranger \\] | -Ranger \\b ) /i, / ( SpaceFish | DeadFish | \\b DB \\b | Man \\. K | \\b HR \\b ) /i, / ( BakedFish | N [ eo ][ wo ] b [ ._- ] ?Subs | \\b Anime Time \\b ) /i, / ( AnimeKaizoku | Kaizoku | \\b CBB \\b | phazer11 ) /i, / ( iPUNISHER | MiniTheatre | MiniFreeza | Mr \\. Deadpool ) /i, / ( NemDiggers | Project-gxs | youshikibi ) /i, / ( \\b MD \\b | Pog42 | mdcx | \\b PAS \\b | SHiN-gx ) /i, / ( A-Destiny | TOPKEK | \\b UwU \\b | DARKFLiX ) /i, / ( \\[ Maximus \\] | -Maximus \\b | \\[ 224 \\] | -224 \\b ) /i, / ( \\[ Harunatsu \\] | -Harunatsu \\b ) /i, / ( \\[ tenshi \\] | -tenshi \\b ) /i, / ( \\[ Davinci \\] | -Davinci \\b ) /i Note When done it should look something like this:","title":"Preferred"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#completed","text":"When completed your Release Profiles should look like this:","title":"Completed"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx-Anime/#acknowledgements","text":"Most of my information and knowledge came from: Kaiser (Guidance on anime groups) rg9400 (Guidance on regex fixes, anime groups and general knowledge share.) Drazzilb (Guidance on regex fixes, anime groups and general knowledge share.) TRaSH (For allowing me to utilize his website for my guide and general knowledge share.) Thanks a bunch!!","title":"Acknowledgements"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx/","text":"Release Profile RegEx (WEB-DL) \u00b6 Advanced feature The regex isn't mentioned anywhere, it's a hidden advanced feature Sonarr V3 has a great feature called Release Profile. With this option you can fine tune your preference. The Release profile that we're going to use for this example is mainly to prefer P2P releases over Scene releases, (Scene releases are still being downloaded but upgraded). If you don't care about quality then stop reading and see if the other tutorials are helpful for you. FAQ FAQ \u00b6 Q: Why do you only have a release profile for WEB-DL? A: I only do WEB-DL my self for TV shows because in my opinion WEB-DL is the sweet spot between Quality and Size and you often don't see big difference anyway for TV shows. (Except for shows like GOT, Vikings, etc) Q: Why do you prefer P2P groups over scene releases? A: Scene release always release in a rush to bring it out as fast as possible. So I noticed often that I got Repacks/Proper releases from them or from different groups and quality. P2P releases are a bit smarter and work sort of together by not doing the same release. Also I noticed that with some Scene releases the 5.1 audio was stripped out or converted to AAC audio. And in my opinion the P2P are of better quality. Theirs 1 Scene releaser that do bring out quality releases -deflate/-inflate . Q: Why do I see that many Amazon WEB-DL's repacks/proper lately? A: A large portion of Amazon WEB-DLs in the last week have only had 192Kbps DD+5.1, because that's all Amazon made available initially. The proper 640Kbps DD+5.1 audio might appear a few hours later or a few months, but when they get updated the episodes will be REPACKED. Q: Why did you remove all the scene groups? A: I decided to redo the Release Profile to make it easier for me and the end user to update/manage the Release Profile, I decided not to add the scene groups anymore (and also removing the current ones). Why ? Lately I noticed a lot of popup scene releases meaning we need to update often. With this it also means all scene and (yet) unknown groups will be getting a score of 0 and not -50 . I will still keep a eye on them and add the Low Quality Groups to the -100 score and when I find a new P2P group I will add them, resulting in less updates and a more accurate upgrade. Propers and Repacks \u00b6 First we're need to make sure a P2P release isn't being replaced by a Scene Repack/Proper release ! Settings => Media Management Where we going to set it to Do not Prefer Then we navigate in Sonarr to the Settings => Profiles Then you will get a popup screen that will look like this: Must Contain => add words that the release name MUST HAVE! Must Not Contain => add words that the release name MUST NOT HAVE AND SO TO BE IGNORE! Preferred => add words you prefer with a certain score what you prefer more or upgrade. Include Preferred when Renaming => When you add {Preferred Words} to your renaming scheme it will add this info. Indexers => Specify what indexer the profile applies to. Tags => create a tag so this is only used by shows that you give this tag or else it's global. The Number between the [ brackets ] are the scores the release name will get during a automatic and manual search and with the use of the scores some releases will be preferred over others and even upgraded. First Release Profile \u00b6 Important We're going to make use of 2 separate release profiles. Release Sources (Streaming Service) \u00b6 Note Also check mark Include Preferred when Renaming and add {Preferred Words} to your renaming scheme when you get download loop issues!!! What it does: When enabled the block with the Release Source (Streaming Service) in it are then added to the file name which fixes any loops due to Sonarr seeing a new NF rip when an AMZN rip is found. Probably doesn\u2019t happen if cutoff is met, but for anything that is unmet or any forced searches it results in a loop because NF is not in Sonarr\u2019s copy so it upgrades, and loops. Enabling the include in preferred words for AMZN and adding that to the file name fixes that. Example of a naming scheme for series: Can be found HERE Add this to your Preferred (3) with a score of [100] / \\b ( amzn | amazon ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i / \\b ( atvp | aptv ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i / \\b ( hmax ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i Add this to your Preferred (3) with a score of [95] / \\b ( sho ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i Add this to your Preferred (3) with a score of [90] / \\b ( dsnp | dsny | disney ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i / \\b ( nf | netflix ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i / \\b ( qibi ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i Add this to your Preferred (3) with a score of [85] / \\b ( hulu ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i Add this to your Preferred (3) with a score of [75] / \\b ( dcu ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i / \\b ( hbo ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i / \\b ( red ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i / \\b ( it ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i example Second Release Profile \u00b6 Warning DO NOT Check mark Include Preferred when Renaming Golden rule \u00b6 Add this to your Must not contain (2) / ( ? =( 1080 | 720 )) .* (( x | h )[ ._- ] ?265 | hevc ) /i example Why the Must Not Contain entry So why did I put /(?=(1080|720)).*((x|h)[ ._-]?265|hevc)/i as Must Not Contain and what does it do ? It blocks/ignores 720/1080p releases that are encoded in x265, why ? Quote x265 is good for for 4k stuff or 1080p if they used the the remuxes as source. If the media isn't source quality/remux, then there will be a loss of quality every time. Also, once you go x265, typically that file is done. It can't be changed to something else without a huge loss of quality. Something like 95% of video files are x264 and have much better direct play support. If you have more than a couple users, you will notice much more transcoding. Just depends on your priorities. So basically if you are storage poor and just need to save space, use x265. The catch is if you want best quality x265, you need source quality files, so you still have huge file sizes. If you want maximum compatibility and the option to change your files to something else later, then x264. It's all really dependent on specific situations for different people It's a shame that most x265 groups microsize the releases or use the x264 as source what results in low quality releases. And the few groups that do use the correct source suffer from it. So I created my own golden rule. 720/1080p => x264 2160p/4k => x265 P2P Groups + Repack/Proper \u00b6 Add this to your Preferred (3) with a score of [180] The reason why this one get's such a high score is because it's the only quality scene group that exist (till now) and scene groups don't add the Release Sources (Streaming Service) to their release name so they don't get the extra point of the release source regex. / ( -deflate | -inflate ) \\b /i Add this to your Preferred (3) with a score of [150] / ( -AJP69 | -BTN | -CasStudio | -CtrlHD | -KiNGS ) \\b /i / ( -monkee | -NTb | -NTG | -QOQ | -RTN ) \\b /i / ( -TOMMY | -ViSUM | -T6D ) \\b /i Add this to your Preferred (3) with a score of [125] / ( -BTW | -Chotab | -CiT | -DEEP | -iJP | -iT00NZ ) \\b /i / ( -LAZY | -NYH | -SA89 | -SIGMA | -TEPES | -TVSmash ) \\b /i / ( -SDCC | -iKA | -iJP | -Cinefeel | -SPiRiT | -FC ) \\b /i / ( -JETIX | -Coo7 | -WELP | -KiMCHI | -BLUTONiUM ) \\b /i / ( -orbitron | -ETHiCS | -RTFM | -PSiG | -MZABI ) \\b /i Add this to your Preferred (3) with a score of [12] / ( repack3 ) /i Add this to your Preferred (3) with a score of [11] / ( repack2 ) /i Add this to your Preferred (3) with a score of [10] / \\b ( repack | proper ) \\b /i example Low Quality Groups \u00b6 Add this to your Preferred (3) with a score of [-100] / ( TBS | -BRiNK | -CHX | -XLF | -worldmkv | -GHOSTS ) \\b /i / ( -VIDEOHOLE ) \\b /i example Optional preferred preferences \u00b6 Note These options are optional and only needed if you got a certain use case for it, Or when you're on the top indexers/trackers !!! Optional (use these only if you dislike renamed and retagged releases) \u00b6 Add this for example as [-25] / ( \\[ rartv \\] | \\[ eztv \\] | \\[ TGx \\] ) /i / ( -4P | -4Planet | -AsRequested | -BUYMORE ) \\b /i / ( -Chamele0n | -GEROV | -iNC0GNiTO | -NZBGeek ) \\b /i / ( -Obfuscated | -postbot | -Rakuv | -Scrambled ) \\b /i / ( -WhiteRev | -xpost ) \\b /i Optional (matches releases that ends with EN) \u00b6 Add this for example as [-25] / \\s ? \\b en \\b $/i Optional Matches any release that contains '1-' as prefix for Release Groups \u00b6 Add this for example as [-25] / ( 1 -.+ ) $/i Optional Matches Season Packs (use this if you prefer Season packs) \u00b6 Add this for example as [15] / \\b S \\d + \\b ( ?!E \\d + \\b ) /i .su season pack issue .su season pack issue \u00b6 When you see a error in Sonarr that looks somehow like the follow screenshot Then theirs only one way real way that always solves this issue. create a new release profile specific for .su that uses the [Season regex(#optional-matches-season-packs-use-this-if-you-prefer-season-packs)] as Must not contain (2) Note Theirs a script for NZBGet that sometimes could help but it seems it doesn't always work. It also seems theirs a work around for SABnzbd but i can't confirm being i'm not using Sab. A little explanation of the scores and why \u00b6 Scores [75]-[100] Release Source. Scores [125]-[150] P2P Groups. Scores [10] Give a repack/proper a higher score but don't trump P2P groups for a Scene fix. Scores [-25] Retagged/Renames/Obfuscated releases. Watch out If you're getting often a error message like Has the same filesize as existing file , you might need to consider to remove the [-25] Scores [-100] Groups that mess with the audio or add another preferred language. Optional => We've tested it and it worked for what we've tested it on, if it will work in your situation we don't know if you notice something wrong just contact me and we will try to fix it or remove it. The reason why I got multiple entry's with the same score is because the line will go out of the box and I don't like how that looks. Final Results \u00b6 When you've done it correctly it will look something like this. And after you clicked on Save it will look something like this: This list is made by collecting information from Sonarr Discord Channel, and personal testing and a few others that helped. So I want to thnx everyone who helped to make this list possible, for privacy reasons I decided not to add the names/nick of the persons. If you want to be mentioned please message me on discord, including a link for proof to what part you want to be credited. Info Keep in mind this list will be a constant work in progress because I will be updating it when it's needed. So best to set a notification for updates for this page.","title":"Release Profile RegEx (WEB-DL)"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx/#release-profile-regex-web-dl","text":"Advanced feature The regex isn't mentioned anywhere, it's a hidden advanced feature Sonarr V3 has a great feature called Release Profile. With this option you can fine tune your preference. The Release profile that we're going to use for this example is mainly to prefer P2P releases over Scene releases, (Scene releases are still being downloaded but upgraded). If you don't care about quality then stop reading and see if the other tutorials are helpful for you. FAQ","title":"Release Profile RegEx (WEB-DL)"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx/#faq","text":"Q: Why do you only have a release profile for WEB-DL? A: I only do WEB-DL my self for TV shows because in my opinion WEB-DL is the sweet spot between Quality and Size and you often don't see big difference anyway for TV shows. (Except for shows like GOT, Vikings, etc) Q: Why do you prefer P2P groups over scene releases? A: Scene release always release in a rush to bring it out as fast as possible. So I noticed often that I got Repacks/Proper releases from them or from different groups and quality. P2P releases are a bit smarter and work sort of together by not doing the same release. Also I noticed that with some Scene releases the 5.1 audio was stripped out or converted to AAC audio. And in my opinion the P2P are of better quality. Theirs 1 Scene releaser that do bring out quality releases -deflate/-inflate . Q: Why do I see that many Amazon WEB-DL's repacks/proper lately? A: A large portion of Amazon WEB-DLs in the last week have only had 192Kbps DD+5.1, because that's all Amazon made available initially. The proper 640Kbps DD+5.1 audio might appear a few hours later or a few months, but when they get updated the episodes will be REPACKED. Q: Why did you remove all the scene groups? A: I decided to redo the Release Profile to make it easier for me and the end user to update/manage the Release Profile, I decided not to add the scene groups anymore (and also removing the current ones). Why ? Lately I noticed a lot of popup scene releases meaning we need to update often. With this it also means all scene and (yet) unknown groups will be getting a score of 0 and not -50 . I will still keep a eye on them and add the Low Quality Groups to the -100 score and when I find a new P2P group I will add them, resulting in less updates and a more accurate upgrade.","title":"FAQ"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx/#propers-and-repacks","text":"First we're need to make sure a P2P release isn't being replaced by a Scene Repack/Proper release ! Settings => Media Management Where we going to set it to Do not Prefer Then we navigate in Sonarr to the Settings => Profiles Then you will get a popup screen that will look like this: Must Contain => add words that the release name MUST HAVE! Must Not Contain => add words that the release name MUST NOT HAVE AND SO TO BE IGNORE! Preferred => add words you prefer with a certain score what you prefer more or upgrade. Include Preferred when Renaming => When you add {Preferred Words} to your renaming scheme it will add this info. Indexers => Specify what indexer the profile applies to. Tags => create a tag so this is only used by shows that you give this tag or else it's global. The Number between the [ brackets ] are the scores the release name will get during a automatic and manual search and with the use of the scores some releases will be preferred over others and even upgraded.","title":"Propers and Repacks"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx/#first-release-profile","text":"Important We're going to make use of 2 separate release profiles.","title":"First Release Profile"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx/#release-sources-streaming-service","text":"Note Also check mark Include Preferred when Renaming and add {Preferred Words} to your renaming scheme when you get download loop issues!!! What it does: When enabled the block with the Release Source (Streaming Service) in it are then added to the file name which fixes any loops due to Sonarr seeing a new NF rip when an AMZN rip is found. Probably doesn\u2019t happen if cutoff is met, but for anything that is unmet or any forced searches it results in a loop because NF is not in Sonarr\u2019s copy so it upgrades, and loops. Enabling the include in preferred words for AMZN and adding that to the file name fixes that. Example of a naming scheme for series: Can be found HERE Add this to your Preferred (3) with a score of [100] / \\b ( amzn | amazon ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i / \\b ( atvp | aptv ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i / \\b ( hmax ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i Add this to your Preferred (3) with a score of [95] / \\b ( sho ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i Add this to your Preferred (3) with a score of [90] / \\b ( dsnp | dsny | disney ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i / \\b ( nf | netflix ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i / \\b ( qibi ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i Add this to your Preferred (3) with a score of [85] / \\b ( hulu ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i Add this to your Preferred (3) with a score of [75] / \\b ( dcu ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i / \\b ( hbo ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i / \\b ( red ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i / \\b ( it ) \\b ( ? =[ ._- ] web [ ._- ] ? ( dl | rip ) \\b ) /i example","title":"Release Sources (Streaming Service)"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx/#second-release-profile","text":"Warning DO NOT Check mark Include Preferred when Renaming","title":"Second Release Profile"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx/#golden-rule","text":"Add this to your Must not contain (2) / ( ? =( 1080 | 720 )) .* (( x | h )[ ._- ] ?265 | hevc ) /i example Why the Must Not Contain entry So why did I put /(?=(1080|720)).*((x|h)[ ._-]?265|hevc)/i as Must Not Contain and what does it do ? It blocks/ignores 720/1080p releases that are encoded in x265, why ? Quote x265 is good for for 4k stuff or 1080p if they used the the remuxes as source. If the media isn't source quality/remux, then there will be a loss of quality every time. Also, once you go x265, typically that file is done. It can't be changed to something else without a huge loss of quality. Something like 95% of video files are x264 and have much better direct play support. If you have more than a couple users, you will notice much more transcoding. Just depends on your priorities. So basically if you are storage poor and just need to save space, use x265. The catch is if you want best quality x265, you need source quality files, so you still have huge file sizes. If you want maximum compatibility and the option to change your files to something else later, then x264. It's all really dependent on specific situations for different people It's a shame that most x265 groups microsize the releases or use the x264 as source what results in low quality releases. And the few groups that do use the correct source suffer from it. So I created my own golden rule. 720/1080p => x264 2160p/4k => x265","title":"Golden rule"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx/#p2p-groups-repackproper","text":"Add this to your Preferred (3) with a score of [180] The reason why this one get's such a high score is because it's the only quality scene group that exist (till now) and scene groups don't add the Release Sources (Streaming Service) to their release name so they don't get the extra point of the release source regex. / ( -deflate | -inflate ) \\b /i Add this to your Preferred (3) with a score of [150] / ( -AJP69 | -BTN | -CasStudio | -CtrlHD | -KiNGS ) \\b /i / ( -monkee | -NTb | -NTG | -QOQ | -RTN ) \\b /i / ( -TOMMY | -ViSUM | -T6D ) \\b /i Add this to your Preferred (3) with a score of [125] / ( -BTW | -Chotab | -CiT | -DEEP | -iJP | -iT00NZ ) \\b /i / ( -LAZY | -NYH | -SA89 | -SIGMA | -TEPES | -TVSmash ) \\b /i / ( -SDCC | -iKA | -iJP | -Cinefeel | -SPiRiT | -FC ) \\b /i / ( -JETIX | -Coo7 | -WELP | -KiMCHI | -BLUTONiUM ) \\b /i / ( -orbitron | -ETHiCS | -RTFM | -PSiG | -MZABI ) \\b /i Add this to your Preferred (3) with a score of [12] / ( repack3 ) /i Add this to your Preferred (3) with a score of [11] / ( repack2 ) /i Add this to your Preferred (3) with a score of [10] / \\b ( repack | proper ) \\b /i example","title":"P2P Groups + Repack/Proper"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx/#low-quality-groups","text":"Add this to your Preferred (3) with a score of [-100] / ( TBS | -BRiNK | -CHX | -XLF | -worldmkv | -GHOSTS ) \\b /i / ( -VIDEOHOLE ) \\b /i example","title":"Low Quality Groups"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx/#optional-preferred-preferences","text":"Note These options are optional and only needed if you got a certain use case for it, Or when you're on the top indexers/trackers !!!","title":"Optional preferred preferences"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx/#optional-use-these-only-if-you-dislike-renamed-and-retagged-releases","text":"Add this for example as [-25] / ( \\[ rartv \\] | \\[ eztv \\] | \\[ TGx \\] ) /i / ( -4P | -4Planet | -AsRequested | -BUYMORE ) \\b /i / ( -Chamele0n | -GEROV | -iNC0GNiTO | -NZBGeek ) \\b /i / ( -Obfuscated | -postbot | -Rakuv | -Scrambled ) \\b /i / ( -WhiteRev | -xpost ) \\b /i","title":"Optional (use these only if you dislike renamed and retagged releases)"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx/#optional-matches-releases-that-ends-with-en","text":"Add this for example as [-25] / \\s ? \\b en \\b $/i","title":"Optional (matches releases that ends with EN)"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx/#optional-matches-any-release-that-contains-1-as-prefix-for-release-groups","text":"Add this for example as [-25] / ( 1 -.+ ) $/i","title":"Optional Matches any release that contains '1-' as prefix for Release Groups"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx/#optional-matches-season-packs-use-this-if-you-prefer-season-packs","text":"Add this for example as [15] / \\b S \\d + \\b ( ?!E \\d + \\b ) /i .su season pack issue","title":"Optional Matches Season Packs (use this if you prefer Season packs)"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx/#su-season-pack-issue","text":"When you see a error in Sonarr that looks somehow like the follow screenshot Then theirs only one way real way that always solves this issue. create a new release profile specific for .su that uses the [Season regex(#optional-matches-season-packs-use-this-if-you-prefer-season-packs)] as Must not contain (2) Note Theirs a script for NZBGet that sometimes could help but it seems it doesn't always work. It also seems theirs a work around for SABnzbd but i can't confirm being i'm not using Sab.","title":".su season pack issue"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx/#a-little-explanation-of-the-scores-and-why","text":"Scores [75]-[100] Release Source. Scores [125]-[150] P2P Groups. Scores [10] Give a repack/proper a higher score but don't trump P2P groups for a Scene fix. Scores [-25] Retagged/Renames/Obfuscated releases. Watch out If you're getting often a error message like Has the same filesize as existing file , you might need to consider to remove the [-25] Scores [-100] Groups that mess with the audio or add another preferred language. Optional => We've tested it and it worked for what we've tested it on, if it will work in your situation we don't know if you notice something wrong just contact me and we will try to fix it or remove it. The reason why I got multiple entry's with the same score is because the line will go out of the box and I don't like how that looks.","title":"A little explanation of the scores and why"},{"location":"Sonarr/V3/Sonarr-Release-Profile-RegEx/#final-results","text":"When you've done it correctly it will look something like this. And after you clicked on Save it will look something like this: This list is made by collecting information from Sonarr Discord Channel, and personal testing and a few others that helped. So I want to thnx everyone who helped to make this list possible, for privacy reasons I decided not to add the names/nick of the persons. If you want to be mentioned please message me on discord, including a link for proof to what part you want to be credited. Info Keep in mind this list will be a constant work in progress because I will be updating it when it's needed. So best to set a notification for updates for this page.","title":"Final Results"},{"location":"Sonarr/V3/Sonarr-recommended-naming-scheme/","text":"Recommended naming scheme \u00b6 Often on the Sonarr Discord people ask what's the recommended/best way to name your files. First off it's personal preference, but it's often recommended to add non-recoverable info. Why? If, for whatever reason, you ever need to do a re-install or re-import in Sonarr or Plex/Emby/JellyFin it's nice to have all that info in the filename so it gets imported correctly and isn't incorrectly matched as HDTV or WEB-DL etc. The Tokens not available in the release won't be used/shown. Standard Episode Format \u00b6 All the details { Series TitleYear } - S { season:00 } E { episode:00 } - { Episode CleanTitle } [{ Preferred Words }{ Quality Full }]{[ MediaInfo VideoDynamicRange ]}[{ MediaInfo VideoBitDepth } bit ]{[ MediaInfo VideoCodec ]}{[ Mediainfo AudioCodec }{ Mediainfo AudioChannels ]}{ MediaInfo AudioLanguages }{ -Release Group } RESULTS: Single Episode: The Series Title! (2010) - S01E01 - Episode Title 1 [AMZN WEBDL-1080p Proper][HDR][10bit][x264][DTS 5.1]-RlsGrp Multi Episode: The Series Title! (2010) - S01E01-E02-E03 - Episode Title [AMZN WEBDL-1080p Proper][HDR][10bit][x264][DTS 5.1]-RlsGrp Minimal details + the irreplaceable data { Series Title } S { season:00 } E { episode:00 } {[ Quality Title ]}{[ MediaInfo AudioCodec }{ MediaInfo AudioChannels ]}{[ MediaInfo VideoCodec ]}{ -Release Group } RESULTS: Single Episode: The Series Title! S01E01 [HDTV-720p][DTS 5.1][x264]-RlsGrp Multi Episode: The Series Title! S01E01-E02-E03 [HDTV-720p][DTS 5.1][x264]-RlsGrp Daily Episode Format \u00b6 All the details { Series TitleYear } - { Air-Date } - { Episode CleanTitle } [{ Preferred Words }{ Quality Full }]{[ MediaInfo VideoDynamicRange ]}[{ MediaInfo VideoBitDepth } bit ]{[ MediaInfo VideoCodec ]}{[ Mediainfo AudioCodec }{ Mediainfo AudioChannels ]}{ MediaInfo AudioLanguages }{ -Release Group } RESULTS: The Series Title! (2010) - 2013-10-30 - Episode Title 1 [AMZN WEBDL-1080p Proper][HDR][10bit][x264][DTS 5.1]-RlsGrp Minimal details + the irreplaceable data { Series Title } - { Air-Date } - { Episode CleanTitle } {[ Quality Title ]}{[ MediaInfo AudioCodec }{ MediaInfo AudioChannels ]}{[ MediaInfo VideoCodec ]}{ -Release Group } RESULTS: The Series Title! - 2013-10-30 - Episode Title 1 [HDTV-720p][DTS 5.1][x264]-RlsGrp Anime Episode Format \u00b6 All the details { Series TitleYear } - S { season:00 } E { episode:00 } - { absolute:000 } - { Episode CleanTitle } [{ Preferred Words }{ Quality Full }]{[ MediaInfo VideoDynamicRange ]}[{ MediaInfo VideoBitDepth } bit ]{[ MediaInfo VideoCodec ]}[{ Mediainfo AudioCodec } { Mediainfo AudioChannels }]{ MediaInfo AudioLanguages }{ -Release Group } RESULTS: Single Episode: The Series Title! (2010) - S01E01 - 001 - Episode Title 1 [iNTERNAL HDTV-720p v2][HDR][10bit][x264][DTS 5.1][JA]-RlsGrp Multi Episode: The Series Title! (2010) - S01E01-E02-E03 - 001-002-003 - Episode Title [iNTERNAL HDTV-720p v2][HDR][10bit][x264][DTS 5.1][JA]-RlsGrp Minimal details + the irreplaceable data { Series Title } - S { season:00 } E { episode:00 } - { absolute:000 } - {[ Quality Title ]}[{ Mediainfo AudioCodec } { Mediainfo AudioChannels }]{[ MediaInfo VideoCodec ]}{ -Release Group } RESULTS: Single Episode: The Series Title! - S01E01 - 001 - [HDTV-720p][DTS 5.1][x264]-RlsGrp Multi Episode: The Series Title! - S01E01-E02-E03 - 001-002-003 - [HDTV-720p][DTS 5.1][x264]-RlsGrp Series Folder Format \u00b6 { Series TitleYear } RESULT: The Series Title! (2010) Season Folder Format \u00b6 For this there's only one real option to use in my opinion. Season { season:00 } RESULT: Season 01 Multi-Episode Style \u00b6 Scene RESULTS: Original Title vs Original Filename \u00b6 Want to keep the original release name that holds like all the info of the file then I suggest to use {Original Title} over {Original Filename} Why? The filename can be Obscured where the Release naming isn't especially when you use Usenet. {Original Title} => The.Series.Title.S01E01.Episode.Title.1080p.AMZN.WEB-DL.DDP5.1.H.264-RlsGrp {Original Filename} => show episode 1-1080p or lchd-tkk1080p or t1i0p3s7i8yuti THNX: A big thnx to fryfrog , rg9400 and bakerboy448 for the suggestions.","title":"Recommended naming scheme"},{"location":"Sonarr/V3/Sonarr-recommended-naming-scheme/#recommended-naming-scheme","text":"Often on the Sonarr Discord people ask what's the recommended/best way to name your files. First off it's personal preference, but it's often recommended to add non-recoverable info. Why? If, for whatever reason, you ever need to do a re-install or re-import in Sonarr or Plex/Emby/JellyFin it's nice to have all that info in the filename so it gets imported correctly and isn't incorrectly matched as HDTV or WEB-DL etc. The Tokens not available in the release won't be used/shown.","title":"Recommended naming scheme"},{"location":"Sonarr/V3/Sonarr-recommended-naming-scheme/#standard-episode-format","text":"All the details { Series TitleYear } - S { season:00 } E { episode:00 } - { Episode CleanTitle } [{ Preferred Words }{ Quality Full }]{[ MediaInfo VideoDynamicRange ]}[{ MediaInfo VideoBitDepth } bit ]{[ MediaInfo VideoCodec ]}{[ Mediainfo AudioCodec }{ Mediainfo AudioChannels ]}{ MediaInfo AudioLanguages }{ -Release Group } RESULTS: Single Episode: The Series Title! (2010) - S01E01 - Episode Title 1 [AMZN WEBDL-1080p Proper][HDR][10bit][x264][DTS 5.1]-RlsGrp Multi Episode: The Series Title! (2010) - S01E01-E02-E03 - Episode Title [AMZN WEBDL-1080p Proper][HDR][10bit][x264][DTS 5.1]-RlsGrp Minimal details + the irreplaceable data { Series Title } S { season:00 } E { episode:00 } {[ Quality Title ]}{[ MediaInfo AudioCodec }{ MediaInfo AudioChannels ]}{[ MediaInfo VideoCodec ]}{ -Release Group } RESULTS: Single Episode: The Series Title! S01E01 [HDTV-720p][DTS 5.1][x264]-RlsGrp Multi Episode: The Series Title! S01E01-E02-E03 [HDTV-720p][DTS 5.1][x264]-RlsGrp","title":"Standard Episode Format"},{"location":"Sonarr/V3/Sonarr-recommended-naming-scheme/#daily-episode-format","text":"All the details { Series TitleYear } - { Air-Date } - { Episode CleanTitle } [{ Preferred Words }{ Quality Full }]{[ MediaInfo VideoDynamicRange ]}[{ MediaInfo VideoBitDepth } bit ]{[ MediaInfo VideoCodec ]}{[ Mediainfo AudioCodec }{ Mediainfo AudioChannels ]}{ MediaInfo AudioLanguages }{ -Release Group } RESULTS: The Series Title! (2010) - 2013-10-30 - Episode Title 1 [AMZN WEBDL-1080p Proper][HDR][10bit][x264][DTS 5.1]-RlsGrp Minimal details + the irreplaceable data { Series Title } - { Air-Date } - { Episode CleanTitle } {[ Quality Title ]}{[ MediaInfo AudioCodec }{ MediaInfo AudioChannels ]}{[ MediaInfo VideoCodec ]}{ -Release Group } RESULTS: The Series Title! - 2013-10-30 - Episode Title 1 [HDTV-720p][DTS 5.1][x264]-RlsGrp","title":"Daily Episode Format"},{"location":"Sonarr/V3/Sonarr-recommended-naming-scheme/#anime-episode-format","text":"All the details { Series TitleYear } - S { season:00 } E { episode:00 } - { absolute:000 } - { Episode CleanTitle } [{ Preferred Words }{ Quality Full }]{[ MediaInfo VideoDynamicRange ]}[{ MediaInfo VideoBitDepth } bit ]{[ MediaInfo VideoCodec ]}[{ Mediainfo AudioCodec } { Mediainfo AudioChannels }]{ MediaInfo AudioLanguages }{ -Release Group } RESULTS: Single Episode: The Series Title! (2010) - S01E01 - 001 - Episode Title 1 [iNTERNAL HDTV-720p v2][HDR][10bit][x264][DTS 5.1][JA]-RlsGrp Multi Episode: The Series Title! (2010) - S01E01-E02-E03 - 001-002-003 - Episode Title [iNTERNAL HDTV-720p v2][HDR][10bit][x264][DTS 5.1][JA]-RlsGrp Minimal details + the irreplaceable data { Series Title } - S { season:00 } E { episode:00 } - { absolute:000 } - {[ Quality Title ]}[{ Mediainfo AudioCodec } { Mediainfo AudioChannels }]{[ MediaInfo VideoCodec ]}{ -Release Group } RESULTS: Single Episode: The Series Title! - S01E01 - 001 - [HDTV-720p][DTS 5.1][x264]-RlsGrp Multi Episode: The Series Title! - S01E01-E02-E03 - 001-002-003 - [HDTV-720p][DTS 5.1][x264]-RlsGrp","title":"Anime Episode Format"},{"location":"Sonarr/V3/Sonarr-recommended-naming-scheme/#series-folder-format","text":"{ Series TitleYear } RESULT: The Series Title! (2010)","title":"Series Folder Format"},{"location":"Sonarr/V3/Sonarr-recommended-naming-scheme/#season-folder-format","text":"For this there's only one real option to use in my opinion. Season { season:00 } RESULT: Season 01","title":"Season Folder Format"},{"location":"Sonarr/V3/Sonarr-recommended-naming-scheme/#multi-episode-style","text":"Scene RESULTS:","title":"Multi-Episode Style"},{"location":"Sonarr/V3/Sonarr-recommended-naming-scheme/#original-title-vs-original-filename","text":"Want to keep the original release name that holds like all the info of the file then I suggest to use {Original Title} over {Original Filename} Why? The filename can be Obscured where the Release naming isn't especially when you use Usenet. {Original Title} => The.Series.Title.S01E01.Episode.Title.1080p.AMZN.WEB-DL.DDP5.1.H.264-RlsGrp {Original Filename} => show episode 1-1080p or lchd-tkk1080p or t1i0p3s7i8yuti THNX: A big thnx to fryfrog , rg9400 and bakerboy448 for the suggestions.","title":"Original Title vs  Original Filename"}]}